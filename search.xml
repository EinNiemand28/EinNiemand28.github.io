<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BUAA-OS-2024-Shell-Challenge</title>
      <link href="/9801daf5.html"/>
      <url>/9801daf5.html</url>
      
        <content type="html"><![CDATA[<h1 id="shell挑战性任务">Shell挑战性任务</h1><h2 id="任务要求">任务要求</h2><p>本次挑战性任务是在 lab6 实现的 MOS Shell 基础上继续实现新的功能。</p><h3 id="实现功能">实现功能</h3><p>具体内容参考<a href="https://github.com/EinNiemand28/EinNiemand28.github.io/blob/main/file/Shell%20%E6%8C%91%E6%88%98%E6%80%A7%E4%BB%BB%E5%8A%A1%20-%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC%E4%B9%A6.pdf">任务说明</a>。（各测试点间无依赖关系）</p><h3 id="关于shell">关于shell</h3><p>在 MOS 中，进程是一个很重要的概念，我们需要清楚 MOS 在运行的过程中存在哪些进程、这些进程之间的关系是什么，这有助于我们完成 shell 的相关任务。</p><p>比如，当我们启动 shell 时，它的 main 函数构成了一个新的进程。这个主进程主要负责完成命令的读取（<code>readline</code>）等工作（这个进程从 mosh 被打开到结束也都是不会被 free 的），不断有新的进程被 fork 出来通过调用<code>runcmd</code>去执行命令。在<code>runcmd</code>中，则首先调用<code>parsecmd</code>解析命令的参数。</p><p><code>parsecmd</code>通过返回<code>argc</code>表明完成对命令和参数的解析，或者递归调用<code>parsecmd</code>进行更复杂的解析工作。在这个过程中，主要通过<code>gettoken</code>和<code>_gettoken</code>对字符串命令进行拆解。</p><p>解析完成后，又会调用<code>spawn</code>函数加载对应的可执行文件、fork 新的进程并设置跳转入口，以执行对应的命令。<code>spawn</code>会返回这个进程的 id ，使父进程得以<strong>等待</strong>（或根据要实现的功能进程不同的处理）子进程完成可执行文件的运行（所有会结束的进程最后会调用<code>exit()</code>），然后父进程也就将结束它的使命。</p><p>以上是 mosh 运行的大致逻辑，对这些有了基本的了解后，让我们着手开始增强 mosh 的功能吧。</p><h2 id="具体实现">具体实现</h2><h3 id="不带-b后缀指令">不带<code>.b</code>后缀指令</h3><p>只需在<code>spawn</code>加载可执行文件时进行额外判断即可，若可执行文件不存在，则添加<code>.b</code>后缀再次尝试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd;</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> ((fd = open(prog, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(cmd, prog);</span><br><span class="line">    <span class="built_in">strcat</span>(cmd, <span class="string">&quot;.b\0&quot;</span>); <span class="comment">// lib/string.c 中实现</span></span><br><span class="line">    <span class="comment">//debugf(&quot;cmd: %s\n&quot;, cmd);</span></span><br><span class="line">    <span class="keyword">if</span> ((fd = open(cmd, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指令条件执行">指令条件执行</h3><p>显然，这首先需要我们修改 MOS 中对用户进程<code>exit</code>的实现，使其能够返回值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">// After fs is ready (lab5), all our open files should be closed before dying.</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> !defined(LAB) || LAB &gt;= 5</span></span><br><span class="line">    close_all();</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    env = &amp;envs[ENVX(syscall_getenvid())];</span><br><span class="line">    <span class="keyword">if</span> (envs[ENVX(env-&gt;env_parent_id)].env_ipc_recving != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//debugf(&quot;%d should send: %d\n&quot;, env-&gt;env_id, r);</span></span><br><span class="line">        ipc_send(env-&gt;env_parent_id, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    syscall_env_destroy(<span class="number">0</span>);</span><br><span class="line">    user_panic(<span class="string">&quot;unreachable code&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我采用了 <code>ipc</code> 来实现返回值的传递，当父进程需要返回值时，让子进程调用<code>ipc_send</code></p><p>以条件<code>||</code>为例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">-2</span>: <span class="comment">// Or</span></span><br><span class="line">    <span class="keyword">if</span> ((*rightpipe = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> argc; <span class="comment">// 子进程执行左指令</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        u_int who;</span><br><span class="line">        r = ipc_recv(&amp;who, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//debugf(&quot;%d %d %d\n&quot;, *rightpipe, who, r);</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123; <span class="comment">// 若左为真，则跳过之后的指令，直到遇到注释&#x27;#&#x27;，或者遇到条件&#x27;&amp;&amp;&#x27;能让它停下来</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                c = gettoken(<span class="number">0</span>, &amp;t);</span><br><span class="line">            &#125; <span class="keyword">while</span> (c != <span class="number">-1</span> &amp;&amp; c != <span class="string">&#x27;#&#x27;</span> &amp;&amp; c);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parsecmd(argv, rightpipe, background); <span class="comment">// 可以继续解析</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>另外由于可执行文件执行之后的返回值不能直接传给上述父进程，所以可以修改<code>wait</code>函数，让其将值先返回给子进程，子进程再将此值返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">wait</span><span class="params">(u_int envid)</span> &#123;</span><br><span class="line">    <span class="comment">// 注意我们这里再 wait 中使用了 ipc，之后在其他地方再想使用这个 wait 时需要注意 ipc 是否会产生影响</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">e</span>;</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    u_int who;</span><br><span class="line">    e = &amp;envs[ENVX(envid)];</span><br><span class="line">    <span class="comment">// debugf(&quot;%08x waiting %08x\n&quot;, syscall_getenvid(), envid);</span></span><br><span class="line">    <span class="keyword">while</span> (e-&gt;env_id == envid &amp;&amp; e-&gt;env_status != ENV_FREE) &#123;</span><br><span class="line">        r = ipc_recv(&amp;who, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        syscall_yield();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sh.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">runcmd</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="type">int</span> child = spawn(argv[<span class="number">0</span>], argv);</span><br><span class="line">    <span class="keyword">if</span> (child &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        r = wait(child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="built_in">exit</span>(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多指令">更多指令</h3><blockquote><p>需要实现<code>touch</code>、<code>mkdir</code>、<code>rm</code>，并需要考虑给出的情形</p></blockquote><p>首先我们需要实现 MOS 的创建文件的用户接口（文件系统的接口已给出），新增以下内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fsreq.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_create</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> req_path[MAXPATHLEN];</span><br><span class="line">    u_int f_type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, u_int f_type)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serv.h</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">file_create</span><span class="params">(<span class="type">char</span> *path, <span class="keyword">struct</span> File **file)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, u_int f_type)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fsipc_create(path, f_type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fsipc.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsipc_create</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">int</span> f_type)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(path);</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">0</span> || len &gt; MAXPATHLEN) &#123;</span><br><span class="line">        <span class="keyword">return</span> -E_BAD_PATH;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Fsreq_create</span> *<span class="title">req</span> =</span> (<span class="keyword">struct</span> Fsreq_create *) fsipcbuf;</span><br><span class="line">    req-&gt;f_type = f_type;</span><br><span class="line">    <span class="built_in">strcpy</span>((<span class="type">char</span> *) req-&gt;req_path, path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fsipc(FSREQ_CREATE, req, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serv.c</span></span><br><span class="line"><span class="type">void</span> *serve_table[MAX_FSREQNO] = &#123;</span><br><span class="line">    ..., [FSREQ_CREATE] = serve_create,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">serve_create</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_create *rq)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">f</span>;</span></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((r = file_create(rq-&gt;req_path, &amp;f)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ipc_send(envid, r, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    f-&gt;f_type = rq-&gt;f_type;</span><br><span class="line">    ipc_send(envid, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，对于普通的<code>touch</code>和<code>mkdir</code>命令，我们只需要在对应<code>*.c</code>文件中进行以下操作即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> r = create(argv[<span class="number">1</span>], FTYPE_REG); <span class="comment">// 或修改类型为 FTYPE_DIR 以创建文件目录</span></span><br></pre></td></tr></table></figure><hr><p>对于<code>mkdir</code>，我们需要额外实现<code>-p</code>参数：当使用 <code>-p</code> 选项时忽略错误，若目录已存在则直接退出，若创建目录的父目录不存在则递归创建目录。</p><p>首先我们可以借助 ARG 宏来解析参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ARGBEGIN &#123;</span><br><span class="line">    <span class="comment">// 以此类推</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">        pmod = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        usage();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125; ARGEND</span><br><span class="line"><span class="comment">// 要注意解析完成后从 argv[0] 开始就是命令的执行参数</span></span><br></pre></td></tr></table></figure><p>对于<code>-p</code>参数，我的处理办法为，对路径进行解析，忽视错误对路径中每一个子目录进行创建</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *path = argv[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (*path == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">    path++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> len = <span class="built_in">strlen</span>(path);</span><br><span class="line">*(path + len) = <span class="string">&#x27;/&#x27;</span>; <span class="comment">// 方便创建最后一个目录</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (*(path + i) == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        *(path + i) = <span class="number">0</span>;</span><br><span class="line">        create(path, FTYPE_DIR);</span><br><span class="line">        *(path + i) = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于<code>rm</code>指令，用户接口<code>remove</code>已给出，直接使用即可</p><p>不过我们需要处理不同的情况</p><blockquote><ul><li><code>rm &lt;file&gt;</code>：若文件存在则删除 <code>&lt;file&gt;</code>，否则输出错误信息。</li><li><code>rm &lt;dir&gt;</code>：输出错误信息。</li><li><code>rm -r &lt;dir&gt;|&lt;file&gt;</code>：若文件或文件夹存在则删除，否则输出错误信息。</li><li><code>rm -rf &lt;dir&gt;|&lt;file&gt;</code>：如果对应文件或文件夹存在则删除，否则直接退出。</li></ul></blockquote><p>因此我们需要先获取路径对应的文件描述符，然后针对不同情况进行不同的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> fd = open(argv[<span class="number">0</span>], O_RDONLY); <span class="comment">// 只读</span></span><br><span class="line"><span class="keyword">if</span> (rmod &amp;&amp; <span class="built_in">fmod</span>) &#123;</span><br><span class="line">    remove(argv[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;rm: cannot remove \&#x27;%s\&#x27;: No such file or directory\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> Filefd *filefd = (<span class="keyword">struct</span> Filefd *) INDEX2FD(fd);</span><br><span class="line">        <span class="comment">// 获取文件描述符</span></span><br><span class="line">        <span class="keyword">if</span> (!rmod &amp;&amp; filefd-&gt;f_file.f_type == FTYPE_DIR) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;rm: cannot remove \&#x27;%s\&#x27;: Is a directory\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            remove(argv[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反引号">反引号</h3><blockquote><p>本次任务只需考虑<code>echo</code>进行的输出且数据较弱，故忽略<code>echo</code>指令和反引号，直接执行反引号中的指令貌似也能过。不过这里还是对反引号原有的要求进行了实现。</p></blockquote><p>首先我们在<code>SYMBOLS</code>里面添加反引号以完成识别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SYMBOLS <span class="string">&quot;&lt;|&gt;&amp;;()`#&quot;</span></span></span><br></pre></td></tr></table></figure><p>这里我采用了如下的方式区分前后的反引号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> backquote;</span><br><span class="line"><span class="type">int</span> _gettoken(<span class="type">char</span> *s, <span class="type">char</span> **p1, <span class="type">char</span> **p2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strchr</span>(SYMBOLS, *s)) &#123;</span><br><span class="line">        <span class="type">int</span> t = *s;</span><br><span class="line">        *p1 = s;</span><br><span class="line">        *s++ = <span class="number">0</span>;</span><br><span class="line">        *p2 = s;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="string">&#x27;`&#x27;</span>) &#123;</span><br><span class="line">            backquote ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后使用管道将反引号中指令的所有输出传给父进程，对其解析以作为使用反引号的指令的参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;`&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (backquote) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = pipe(p)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            debugf(<span class="string">&quot;failed to allocate a pipe: %d\n&quot;</span>, r);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((*rightpipe = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// fork 子进程指令解析反引号中内容</span></span><br><span class="line">            <span class="comment">// 并将标准输入端与管道写端相连</span></span><br><span class="line">            dup(p[<span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">            close(p[<span class="number">1</span>]);</span><br><span class="line">            close(p[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> parsecmd(argv, rightpipe, background);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将标准输入端与管道读端相连，使用 read 读取信息</span></span><br><span class="line">            dup(p[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line">            close(p[<span class="number">0</span>]);</span><br><span class="line">            close(p[<span class="number">1</span>]);</span><br><span class="line">            <span class="type">char</span> *tmp = (<span class="type">char</span> *) bf;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, count = <span class="number">0</span>; i &lt; MAXLEN; i++) &#123;</span><br><span class="line">                count += read(<span class="number">0</span>, bf + i, <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (count == i) <span class="keyword">break</span>;</span><br><span class="line">                syscall_yield();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">strchr</span>(<span class="string">&quot;\t\r\n&quot;</span>, *tmp)) &#123;</span><br><span class="line">                *tmp++ = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 以换行符进行分割</span></span><br><span class="line">            <span class="keyword">while</span> (*tmp) &#123;</span><br><span class="line">                <span class="type">char</span> *s1 = tmp;</span><br><span class="line">                <span class="keyword">while</span> (!<span class="built_in">strchr</span>(<span class="string">&quot;\t\r\n&quot;</span>, *tmp) &amp;&amp; *tmp) &#123;</span><br><span class="line">                    tmp++;</span><br><span class="line">                &#125;</span><br><span class="line">                *tmp++ = <span class="number">0</span>;</span><br><span class="line">                argv[argc++] = s1;</span><br><span class="line">                <span class="keyword">while</span> (<span class="built_in">strchr</span>(<span class="string">&quot;\t\r\n&quot;</span>, *tmp) &amp;&amp; *tmp) &#123;</span><br><span class="line">                    tmp++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                c = gettoken(<span class="number">0</span>, &amp;t);</span><br><span class="line">                <span class="comment">// 这里父进程需要跳过直到右引号的所有内容</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;`&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> argc;</span><br><span class="line">        <span class="comment">// 子进程完成了对反引号中内容的解析，返回执行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>这里最开始我使用原始的<code>wait</code>但是没有成功，因此使用了类似于轮询的方式完成了对数据的读取</p><p>不过后来我需要在<code>wait.c</code>中添加新的功能，所以上面比较丑陋的轮询方式可以简化为下面的函数调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wait.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check2</span><span class="params">(u_int envid)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">e</span>;</span></span><br><span class="line">    e = &amp;envs[ENVX(envid)];</span><br><span class="line">    <span class="keyword">while</span> (e-&gt;env_id == envid &amp;&amp; e-&gt;env_status != ENV_FREE) &#123;</span><br><span class="line">        syscall_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注释功能">注释功能</h3><p>这个比较简单，完成对<code>#</code>的识别后进行如下处理即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> argc;</span><br></pre></td></tr></table></figure><h3 id="一行多指令">一行多指令</h3><p>常规的进程 fork</p><p>需要注意的点是可能之前会有重定向，将输出指向了其他地方，这里需要将其重新指回控制台</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;;&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> ((*rightpipe = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> argc;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wait(*rightpipe);</span><br><span class="line">        <span class="keyword">if</span> (redirect) &#123;</span><br><span class="line">            close(<span class="number">0</span>);</span><br><span class="line">            close(<span class="number">1</span>);</span><br><span class="line">            dup(opencons(), <span class="number">1</span>);</span><br><span class="line">            dup(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            redirect = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parsecmd(argv, rightpipe, background);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="追加重定向">追加重定向</h3><p>首先我们需要实现文件操作的<code>O_APPEND</code>模式，即追加写功能</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> O_APPEND 0x1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// serv.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">serve_open</span><span class="params">(u_int envid, <span class="keyword">struct</span> Fsreq_open *rq)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    o-&gt;o_mode = rq-&gt;req_omode;</span><br><span class="line">    ff-&gt;f_fd.fd_omode = o-&gt;o_mode;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ff-&gt;f_fd.fd_omode &amp; O_APPEND) &#123;</span><br><span class="line">        ff-&gt;f_fd.fd_offset = f-&gt;f_size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>parsecmd</code>中进行相应的修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>:; <span class="comment">// 这个分号是因为 C 语言不允许在 case 后面直接定义变量</span></span><br><span class="line">    <span class="type">int</span> cc = gettoken(<span class="number">0</span>, &amp;t);</span><br><span class="line">    <span class="type">int</span> mode = O_WRONLY | O_CREAT; <span class="comment">// 没有则创建</span></span><br><span class="line">    <span class="keyword">if</span> (cc == <span class="string">&#x27;&gt;&#x27;</span>) &#123; <span class="comment">// 判断是否是追加重定向</span></span><br><span class="line">        mode |= O_APPEND;</span><br><span class="line">        <span class="keyword">if</span> ((cc = gettoken(<span class="number">0</span>, &amp;t)) != <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">            debugf(<span class="string">&quot;syntax error: &gt; not followed by word\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cc == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">        mode |= O_TRUNC; <span class="comment">// 普通重定向需先清空文件内容</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugf(<span class="string">&quot;syntax error: &gt; not followed by word\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((r = open(t, mode)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        debugf(<span class="string">&quot;failed to open \&#x27;%s\&#x27;: %d\n&quot;</span>, t, r);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fd = r;</span><br><span class="line">    dup(fd, <span class="number">1</span>); <span class="comment">// 标准输出端与对应文件符相连</span></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h3 id="引号支持">引号支持</h3><p>由于不用考虑引号和反引号的嵌套处理，所以也就相对简单，只需在<code>_gettoken</code>时将引号内所用内容标记为一个<code>word</code>（<code>w</code>）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> _gettoken(<span class="type">char</span> *s, <span class="type">char</span> **p1, <span class="type">char</span> **p2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (*s == <span class="string">&#x27;\&quot;&#x27;</span>) &#123; <span class="comment">// 这个判断需要在其他所有情况的前面</span></span><br><span class="line">        *p1 = ++s;</span><br><span class="line">        <span class="keyword">while</span> (*s != <span class="string">&#x27;\&quot;&#x27;</span> &amp;&amp; *s++);</span><br><span class="line">        *s++ = <span class="number">0</span>;</span><br><span class="line">        *p2 = s;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="历史指令">历史指令</h3><p><s>重量级</s></p><p>首先本着要做就要做好的原则，我先实现了对键入命令任意位置的修改的支持（使用<kbd>←</kbd>,<kbd>→</kbd>,<kbd>Backspace</kbd>,<kbd>Del</kbd>），这样不仅看起来更加顺眼，还可以实现对历史指令的修改</p><p>查阅资料可知，我们需要判断的 ascii 为</p><table><thead><tr><th>键</th><th>编码</th></tr></thead><tbody><tr><td>←</td><td>\033[D</td></tr><tr><td>→</td><td>\033[C</td></tr><tr><td>↑</td><td>\033[A</td></tr><tr><td>↓</td><td>\033[B</td></tr><tr><td>Backspace</td><td>\b or 0x7f</td></tr><tr><td>Del</td><td>~</td></tr></tbody></table><p>通过以下宏我们可以实现光标的移动，从而能够通过输出新的内容覆盖指定位置的原有内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MoveLeft(x) debugf(<span class="string">&quot;\033[%dD&quot;</span>, x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MoveRight(x) debugf(<span class="string">&quot;\033[%dC&quot;</span>, x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MoveUp(x) debugf(<span class="string">&quot;\033[%dA&quot;</span>, x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Movedown(x) debugf(<span class="string">&quot;\033[%dB&quot;</span>, x)</span></span><br></pre></td></tr></table></figure><p>然后修改<code>readline</code>的逻辑，维护当前指令的长度<code>len</code>和光标位置<code>i</code>（表示在第i个字符前），以及历史指令的读取</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, u_int n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, len = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> tmp;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((r = read(<span class="number">0</span>, &amp;tmp, <span class="number">1</span>)) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                debugf(<span class="string">&quot;read error: %d\n&quot;</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (删除字符) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (方向键) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;\r&#x27;</span> || tmp == <span class="string">&#x27;\n&#x27;</span>) &#123; <span class="comment">// 结束</span></span><br><span class="line">            buf[len] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 普通字符</span></span><br><span class="line">            <span class="keyword">if</span> (i == len) &#123;</span><br><span class="line">                buf[i++] = tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = len; j &gt; i; j--) &#123;</span><br><span class="line">                    buf[j] = buf[j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                buf[i] = tmp;</span><br><span class="line">                buf[len + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">                MoveLeft(++i); <span class="comment">// 光标移动至开头</span></span><br><span class="line">                debugf(<span class="string">&quot;%s&quot;</span>, buf); <span class="comment">// 显示新的内容</span></span><br><span class="line">                MoveLeft(len - i + <span class="number">1</span>); <span class="comment">// 将光标移动至原来的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            len += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步，对于退格键<kbd>Backspace</kbd>和删除键<kbd>Del</kbd>的处理，主要思路是用空格覆盖想要删除的字符（以实现删除效果），对于光标位置的计算没什么好说的，细心即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tmp == <span class="string">&#x27;\b&#x27;</span> || tmp == <span class="number">0x7f</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == len) &#123;</span><br><span class="line">            buf[--i] = <span class="number">0</span>;</span><br><span class="line">            MoveLeft(<span class="number">1</span>);</span><br><span class="line">            debugf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            MoveLeft(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &lt; len - <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                buf[j] = buf[j + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            buf[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            MoveLeft(i--);</span><br><span class="line">            debugf(<span class="string">&quot;%s &quot;</span>, buf);</span><br><span class="line">            MoveLeft(len - i);</span><br><span class="line">        &#125;</span><br><span class="line">        len -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;~&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; len; ++j) &#123;</span><br><span class="line">            buf[j] = buf[j + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        buf[--len] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line">            MoveLeft(i);</span><br><span class="line">        &#125;</span><br><span class="line">        debugf(<span class="string">&quot;%s &quot;</span>, buf);</span><br><span class="line">        MoveLeft(len - i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于方向键的处理，左移右移比较直接，只需要注意不要移出范围</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;\033&#x27;</span>) &#123;</span><br><span class="line">    read(<span class="number">0</span>, &amp;tmp, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        read(<span class="number">0</span>, &amp;tmp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">                    i += <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    MoveLeft(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    i -= <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    MoveRight(<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上下键的处理，我们先不考虑历史指令如何保存和读取，而是关注如何实现上下键的逻辑功能<br>这里我采用了一个全局变量<code>hislen</code>来记录历史指令的数量、一个局部变量<code>hisline</code>来记录当前是哪条指令（<code>[0,hislen - 1]</code>表示历史指令），<code>histmp</code>用来保存当前输入的指令（因为可能会上键选取历史指令、最后又下键回到当前指令）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deleteLine</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> len)</span> &#123; <span class="comment">// 光标位置和buf长度</span></span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">0</span>) &#123;</span><br><span class="line">        MoveLeft(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; len; ++k) &#123;</span><br><span class="line">        debugf(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len != <span class="number">0</span>) &#123;</span><br><span class="line">        MoveLeft(len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">readline</span><span class="params">(<span class="type">char</span> *buf, u_int n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> hisline = hislen;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == <span class="string">&#x27;\033&#x27;</span>) &#123;</span><br><span class="line">        read(<span class="number">0</span>, &amp;tmp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            read(<span class="number">0</span>, &amp;tmp, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                    Movedown(<span class="number">1</span>); <span class="comment">// 将光标移回来</span></span><br><span class="line">                    <span class="keyword">if</span> (hisline == hislen) &#123;</span><br><span class="line">                        <span class="comment">// 保存一下当前输入的指令</span></span><br><span class="line">                        <span class="built_in">strcpy</span>(histmp, buf);</span><br><span class="line">                        *(histmp + len) = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hisline &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        hisline--;</span><br><span class="line">                        readHistory(hisline, buf);</span><br><span class="line">                        <span class="comment">// 读取第 hisline 条历史指令</span></span><br><span class="line">                        deleteLine(i, len);</span><br><span class="line">                        <span class="comment">// 清除当前行的所有内容</span></span><br><span class="line">                        debugf(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">                        len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">                        i = len;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                    <span class="comment">//MoveUp(1); 往下则不用移动</span></span><br><span class="line">                    <span class="keyword">if</span> (hisline &lt; hislen - <span class="number">1</span>) &#123;</span><br><span class="line">                        hisline++;</span><br><span class="line">                        readHistory(hisline, buf);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hisline + <span class="number">1</span> == hislen) &#123;</span><br><span class="line">                        hisline++;</span><br><span class="line">                        <span class="built_in">strcpy</span>(buf, histmp);</span><br><span class="line">                        <span class="comment">// 回到当前指令</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    deleteLine(i, len);</span><br><span class="line">                    debugf(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">                    len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">                    i = len;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>现在我们可以开始尝试实现历史指令的功能了<br>首先是初始化创建<code>/.mosh_history</code>文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((r = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (create(<span class="string">&quot;/.mosh_history&quot;</span>, FTYPE_REG) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;create failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    close(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于如何从文件中读取历史指令，我采用了一个数组<code>hisoffset</code>来记录每条指令的偏移，这样我们就可以通过<code>seek</code>和<code>read</code>来读取指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> hislen, hisoffset[HISTFILESIZE + <span class="number">5</span>];</span><br><span class="line"><span class="comment">// hisoffset[i] -&gt; 前 (i+1) 条指令的长度之和 + (i+1) 个换行符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">readHistory</span><span class="params">(<span class="type">int</span> line, <span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, fd;</span><br><span class="line">    <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (line &gt;= hislen) &#123;</span><br><span class="line">        *buf = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> offset = (line &gt; <span class="number">0</span> ? hisoffset[line - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> len = (line &gt; <span class="number">0</span> ? hisoffset[line] - hisoffset[line - <span class="number">1</span>] : hisoffset[line]);</span><br><span class="line">    <span class="keyword">if</span> ((r = seek(fd, offset)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;seek failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((r = read(fd, buf, len)) != len) &#123;</span><br><span class="line">        user_panic(<span class="string">&quot;read failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    buf[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取指令需要注意的是最大指令条数为<code>HISTFILESIZE=20</code>，当超过时需要将最早的指令删除。这里我采用的是将后19条指令读出，清空文件，再和新指令一起写入的简单粗暴的方式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">saveHistory</span><span class="params">(<span class="type">char</span> *buf)</span> &#123;</span><br><span class="line">    <span class="type">int</span> r, fd;</span><br><span class="line">    <span class="keyword">if</span> (hislen &lt; HISTFILESIZE) &#123; <span class="comment">// 未达上限</span></span><br><span class="line">        <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_WRONLY | O_APPEND)) &lt; <span class="number">0</span>) &#123; <span class="comment">// 追加写</span></span><br><span class="line">            user_panic(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        *(buf + len) = <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 加换行符</span></span><br><span class="line">        len += <span class="number">1</span>;</span><br><span class="line">        *(buf + len) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((r = write(fd, buf, len)) != len) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        hisoffset[hislen++] = len + (hislen &gt; <span class="number">0</span> ? hisoffset[hislen - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 已满</span></span><br><span class="line">        <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_RDONLY)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;open failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((r = seek(fd, hisoffset[<span class="number">0</span>])) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;seek failed&quot;</span>); <span class="comment">// 从第 1 条指令开始读</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = hisoffset[HISTFILESIZE - <span class="number">1</span>] - hisoffset[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 读出除第 0 条指令外的所有指令</span></span><br><span class="line">        <span class="keyword">if</span> ((r = read(fd, buftmp, len)) != len) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_TRUNC | O_WRONLY)) &lt; <span class="number">0</span>) &#123; <span class="comment">// 清空</span></span><br><span class="line">            user_panic(<span class="string">&quot;trunc failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((r = write(fd, buftmp, len)) != len) &#123;</span><br><span class="line">            debugf(<span class="string">&quot;%s\n&quot;</span>, buftmp);</span><br><span class="line">            debugf(<span class="string">&quot;%d %d\n&quot;</span>, len, r);</span><br><span class="line">            user_panic(<span class="string">&quot;rewrite error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/.mosh_history&quot;</span>, O_WRONLY | O_APPEND)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;rewrite not correctly&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">strlen</span>(buf);</span><br><span class="line">        *(buf + len) = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        len += <span class="number">1</span>;</span><br><span class="line">        *(buf + len) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ((r = write(fd, buf, len)) != len) &#123;</span><br><span class="line">            user_panic(<span class="string">&quot;write error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ttmp = hisoffset[<span class="number">0</span>]; <span class="comment">// 重新计算所有偏移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; HISTFILESIZE; i++) &#123;</span><br><span class="line">            hisoffset[i] = hisoffset[i + <span class="number">1</span>] - ttmp;</span><br><span class="line">        &#125;</span><br><span class="line">        hisoffset[hislen - <span class="number">1</span>] = hisoffset[hislen - <span class="number">2</span>] + len;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>history</code>指令，直接将其变为<code>cat /.mosh_history</code>即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">runcmd</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;history&quot;</span>) || !<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;history.b&quot;</span>)) &#123;</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;.mosh_history&quot;</span>;</span><br><span class="line">        argc = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前后台任务管理">前后台任务管理</h3><blockquote><ul><li>当命令的末尾添加上 &amp; 符号时，该命令应该在后台执行</li><li>实现 jobs 指令列出当前 shell 中所有后台任务的状态。需要为任务创建 ID（每次启动 mosh 时，任务从 1 开始编号，每个新增任务编号应加 1），并且通过 jobs 指令输出包括：任务 ID（job_id）、任务的运行状态（status：可能的取值为 Running，Done）、任务的进程 ID（env_id）与运行任务时输入的指令（cmd）。</li><li>实现 fg 将后台任务带回前台继续运行，用户通过 fg &lt;job_id&gt; 的方式将对应任务带回前台。</li><li>实现 kill 指令，用户通过 kill &lt;job_id&gt; 来实现结束后台任务。</li><li>以上指令均需要设计为内置指令（与<code>history</code>一样）</li></ul></blockquote><p>坑点很多，相比于历史指令，这部分更是在 bug 里找 bug</p><p>总之这里收回前文对进程之间关系的强调伏笔，需要注意的是一定要在<code>mosh</code>的<strong>主进程</strong>中读写 jobs 的相关信息（子进程被 free 信息就没了），然后对于 ipc 的使用也要多加考虑，以防产生错误行为</p><hr><p>首先我们在每次读取到指令后就根据是否有<code>&amp;</code>符号来判断是否为后台任务，然后将其状态和指令保存在一个结构体数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> cmd[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> jobscount;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Job</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    <span class="type">int</span> env_id;</span><br><span class="line">    <span class="type">char</span> cmd[<span class="number">1024</span>];</span><br><span class="line">&#125; jobs[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">savetask</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(cmd, s);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">while</span> (s[len - <span class="number">1</span>] != <span class="string">&#x27;&amp;&#x27;</span> &amp;&amp; len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[len - <span class="number">1</span>] == <span class="string">&#x27;&amp;&#x27;</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(jobs[++jobscount].cmd, cmd);</span><br><span class="line">        jobs[jobscount].status = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        readline(buf, <span class="keyword">sizeof</span> buf);</span><br><span class="line">        <span class="type">int</span> rr = savetask(buf);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着需要使用 ipc 去拿到对应的进程 id<br>先将<code>runcmd</code>改为有返回值，其中与 jobs 相关的操作返回非 0 值，否则返回 0，然后通过类似之前处理条件操作的方法将值传回 mosh 主进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(runcmd(buf));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ret = wait(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>parsecmd</code>中解析命令时需要检测是否有<code>&amp;</code>符号，如果有则将参数<code>*background</code>置为 1，并在<code>runcmd</code>中返回执行该命令的进程 id ，然后记录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">parsecmd</span><span class="params">(<span class="type">char</span> **argv, <span class="type">int</span> *rightpipe, <span class="type">int</span> *background)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span>:</span><br><span class="line">        *background = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">runcmd</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="type">int</span> child = spawn(argv[<span class="number">0</span>], argv);</span><br><span class="line">    close_all();</span><br><span class="line">    <span class="keyword">if</span> (child &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (background) &#123;</span><br><span class="line">            r = <span class="number">0</span>; <span class="comment">// 不等待，即意味着在后台挂起</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = wait(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugf(<span class="string">&quot;spawn %s: %d\n&quot;</span>, argv[<span class="number">0</span>], child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (background) &#123;</span><br><span class="line">        <span class="keyword">return</span> child;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (ret) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rr) &#123;</span><br><span class="line">            jobs[jobscount].env_id = ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>fg</code>指令，为了避免使用 ipc 时出现的各种玄学错误，最后选择了轮询等待对应的子进程执行完毕，然后<code>return 0</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">atoi</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s) &#123;</span><br><span class="line">        ret = ret * <span class="number">10</span> + (*s++ - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">runcmd</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>], <span class="string">&quot;fg&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> jobid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (jobid &lt;= jobscount) &#123;</span><br><span class="line">            debugf(<span class="string">&quot;fg: job (%d) do not exist\n&quot;</span>, jobid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (jobs[jobid].status == <span class="number">0</span>) &#123;</span><br><span class="line">            debugf(<span class="string">&quot;fg: (0x%08x) not running\n&quot;</span>, jobs[jobid].env_id);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        check2(jobs[jobid].env_id); <span class="comment">// 等待这个进程执行完</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait.c</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">check2</span><span class="params">(u_int envid)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">e</span>;</span></span><br><span class="line">    e = &amp;envs[ENVX(envid)];</span><br><span class="line">    <span class="keyword">while</span> (e-&gt;env_id == envid &amp;&amp; e-&gt;env_status != ENV_FREE) &#123;</span><br><span class="line">        syscall_yield();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>kill</code>命令，直接返回任务 id ，然后再主进程中将这个进程设置为<code>ENV_NOT_RUNNABLE</code>即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret &lt;= jobscount) &#123;</span><br><span class="line">    <span class="keyword">if</span> (jobs[ret].status) &#123;</span><br><span class="line">        syscall_set_env_status(jobs[ret].env_id, ENV_NOT_RUNNABLE);</span><br><span class="line">        jobs[ret].status = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugf(<span class="string">&quot;fg: (0x%08x) not running\n&quot;</span>, jobs[ret].env_id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>jobs</code>指令，使用返回值<code>-1</code>来表示，然后在主进程输出对应的信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= jobscount; i++) &#123;</span><br><span class="line">        debugf(<span class="string">&quot;[%d] %-10s 0x%08x %s\n&quot;</span>, i, jobs[i].status ? <span class="string">&quot;Running&quot;</span> : <span class="string">&quot;Done&quot;</span>, jobs[i].env_id, jobs[i].cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外值得注意的是，任务挂起以后会自己执行完毕，所以方便起见我们需要每次查询对应进程是否结束（状态是否为<code>ENV_FREE</code>），并更新对应状态信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= jobscount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (jobs[i].status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (check(jobs[i].env_id)) &#123;</span><br><span class="line">            jobs[i].status = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">check</span><span class="params">(u_int envid)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">Env</span> *<span class="title">e</span>;</span></span><br><span class="line">    e = &amp;envs[ENVX(envid)];</span><br><span class="line">    <span class="keyword">if</span> (e-&gt;env_status == ENV_FREE) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BUAA操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OS-2024-Lab6</title>
      <link href="/ac93ecd3.html"/>
      <url>/ac93ecd3.html</url>
      
        <content type="html"><![CDATA[<h1 id="lab6实验报告">lab6实验报告</h1><h2 id="思考题">思考题</h2><h3 id="thinking-6-1">Thinking 6.1</h3><blockquote><p>示例代码中，父进程操作管道的写端，子进程操作管道的读端。如果现在想让父进程作为“读者”，代码应当如何修改？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fildes[<span class="number">2</span>];</span><br><span class="line"><span class="comment">// fildes[0]读端 fildes[1]写端</span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> status;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    status = pipe(fildes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error in pipe!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">switch</span>(fork()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">/* 子进程 - 作为管道的写者 */</span></span><br><span class="line">            close(fildes[<span class="number">0</span>]);</span><br><span class="line">            write(fildes[<span class="number">1</span>], <span class="string">&quot;Hello world\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line">            close(fildes[<span class="number">1</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">/* 父进程 - 作为管道的读者 */</span></span><br><span class="line">            close(fildes[<span class="number">1</span>]);</span><br><span class="line">            read(fildes[<span class="number">0</span>], buf, <span class="number">100</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;father-process read:%s&quot;</span>, buf);</span><br><span class="line">            close(fildes[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thinking-6-2">Thinking 6.2</h3><blockquote><p>上面这种不同步修改 pp_ref 而导致的进程竞争问题在 user/lib/fd.c 中的 dup 函数中也存在。请结合代码模仿上述情景，分析一下我们的 dup 函数中为什么会出现预想之外的情况？</p></blockquote><p>阅读代码可以知道，dup 函数的流程为：</p><ol><li>将<code>newfd</code>对应的页映射到<code>oldfd</code>对应的物理页面</li><li>将<code>newfd</code>的数据所在页映射到<code>oldfd</code>的数据所在物理页面</li></ol><p>如果某个进程在执行 dup 时，已经完成了 1，但还未完成 2，此时发生中断，与之通信的进程会根据<code>ref(fd)==ref(pipe)</code>认为写者进程已关闭，从而执行读操作，但实际上写者还未完成写操作，导致读者读到了错误的数据。</p><p>所以应该先执行 2，再执行 1，这样就不会出现上述问题。</p><h3 id="thinking-6-3">Thinking 6.3</h3><blockquote><p>阅读上述材料并思考：为什么系统调用一定是原子操作呢？如果你觉得不是所有的系统调用都是原子操作，请给出反例。希望能结合相关代码进行分析说明。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;asm/asm.h&gt;</span><br><span class="line">#include &lt;stackframe.h&gt;</span><br><span class="line"></span><br><span class="line">.section .text.tlb_miss_entry</span><br><span class="line">tlb_miss_entry:</span><br><span class="line">j       exc_gen_entry</span><br><span class="line"></span><br><span class="line">.section .text.exc_gen_entry</span><br><span class="line">exc_gen_entry:</span><br><span class="line">SAVE_ALL</span><br><span class="line">/*</span><br><span class="line">* Note: When EXL is set or UM is unset, the processor is in kernel mode.</span><br><span class="line">* When EXL is set, the value of EPC is not updated when a new exception occurs.</span><br><span class="line">* To keep the processor in kernel mode and enable exception reentrancy,</span><br><span class="line">* we unset UM and EXL, and unset IE to globally disable interrupts.</span><br><span class="line">*/</span><br><span class="line">mfc0    t0, CP0_STATUS</span><br><span class="line">and     t0, t0, ~(STATUS_UM | STATUS_EXL | STATUS_IE)</span><br><span class="line">mtc0    t0, CP0_STATUS</span><br><span class="line">/* Exercise 3.9: Your code here. */</span><br><span class="line">mfc0t0, CP0_CAUSE</span><br><span class="line">andit0, 0x7c</span><br><span class="line">lwt0, exception_handlers(t0)</span><br><span class="line">jrt0</span><br></pre></td></tr></table></figure><p>通过阅读指导书和注释可知，我们使用的 MIPS 4Kc 中的 CP0_Status 寄存器的 EXL 位和 UM 位表示了处理器当前的运行状态（当且仅当 EXL 被设置为 0 且 UM 被设置为 1 时，处理器处于用户模式），IE 位表示中断是否开启。而我们在处理系统调用时，将 EXL 、 UM 和 IE 位都设置为 0，使系统处于内核模式且不响应中断，故系统调用一定是原子操作。</p><h3 id="thinking-6-4">Thinking 6.4</h3><blockquote><p>仔细阅读上面这段话，并思考下列问题</p><ul><li>按照上述说法控制 pipe_close 中 fd 和 pipe unmap 的顺序，是否可以解决上述场景的进程竞争问题？给出你的分析过程。</li><li>我们只分析了 close 时的情形，在 fd.c 中有一个 dup 函数，用于复制文件描述符。试想，如果要复制的文件描述符指向一个管道，那么是否会出现与 close 类似的问题？请模仿上述材料写写你的理解。</li></ul></blockquote><ul><li>可以解决。因为在任何时刻都有<code>ref(fd) &lt;= ref(pipe)</code>，所以在<code>pipe_close</code>中先执行 unmap fd，就不会出现上述进程竞争的问题。</li><li>会出现类似的问题。因为在执行 dup 时，若先 map fd 再 map pipe ，就会使得<code>ref(fd)</code>的 +1 先于 pipe ，导致在两个 unmap 的间隙，会出现<code>ref(pipe) == ref(fd)</code>的情况。</li></ul><h3 id="thinking-6-5">Thinking 6.5</h3><blockquote><p>思考以下三个问题。</p><ul><li>认真回看 Lab5 文件系统相关代码，弄清打开文件的过程。</li><li>回顾 Lab1 与 Lab3，思考如何读取并加载 ELF 文件。</li><li>在 Lab1 中我们介绍了 data text bss 段及它们的含义，data 段存放初始化过的全局变量，bss 段存放未初始化的全局变量。关于 memsize 和 filesize ，我们在 Note 1.3.4中也解释了它们的含义与特点。关于 Note 1.3.4，注意其中关于“bss 段并不在文件中占数据”表述的含义。回顾 Lab3 并思考：elf_load_seg() 和 load_icode_mapper() 函数是如何确保加载 ELF 文件时，bss 段数据被正确加载进虚拟内存空间。bss 段在 ELF 中并不占空间，但 ELF 加载进内存后，bss 段的数据占据了空间，并且初始值都是 0。请回顾 elf_load_seg() 和 load_icode_mapper() 的实现，思考这一点是如何实现的？</li></ul><p>下面给出一些对于上述问题的提示，以便大家更好地把握加载内核进程和加载用户进程的区别与联系，类比完成 spawn 函数。</p><p>​关于第一个问题，在 Lab3 中我们创建进程，并且通过 ENV_CREATE(…) 在内核态加载了初始进程，而我们的 spawn 函数则是通过和文件系统交互，取得文件描述块，进而找到 ELF 在“硬盘”中的位置，进而读取。</p><p>​关于第二个问题，各位已经在 Lab3 中填写了 load_icode 函数，实现了 ELF 可执行文件中读取数据并加载到内存空间，其中通过调用 elf_load_seg 函数来加载各个程序段。在 Lab3 中我们要填写 load_icode_mapper 回调函数，在内核态下加载 ELF 数据到内存空间；相应地，在 Lab6 中 spawn 函数也需要在用户态下使用系统调用为 ELF 数据分配空间。</p></blockquote><ul><li>打开文件的过程为：<ol><li>调用<code>file.c</code>中的<code>open</code>函数指定文件路径<code>path</code>和读取模式<code>mode</code></li><li>调用<code>fd_alloc</code>分配文件描述符，再调用<code>fsipc_open</code>向文件服务系统发送打开文件的请求</li><li>调用<code>fsipc</code>向文件服务系统进程发送 IPC 请求，并等待返回</li><li>文件服务系统进程收到请求后调用<code>serve_open</code>处理请求，并调用<code>file_open</code>打开文件，返回文件描述符</li></ol></li><li>读取并加载 ELF 文件的过程为：<ol><li>调用<code>load_icode</code>函数将可执行文件（文件头地址为 binary ）加载到进程 e 的内存空间</li><li>调用<code>elf_load_seg</code>函数加载各个程序段，对于其中需要加载的页面，使用回调函数<code>load_icode_mapper</code>完成单个页面的加载</li></ol></li><li>在分配页面时，将text 段和 data 段占据的页面中没有占满的空间置为 0 给 bss 段，且另外再给 bss 分配时，仅使用<code>syscall_mem_alloc</code>而不映射任何内容</li></ul><h3 id="thinking-6-6">Thinking 6.6</h3><blockquote><p>通过阅读代码空白段的注释我们知道，将标准输入或输出定向到文件，需要我们将其 dup 到 0 或 1 号文件描述符（fd）。那么问题来了：在哪步，0 和 1 被“安排”为标准输入和标准输出？请分析代码执行流程，给出答案。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/init.c</span></span><br><span class="line"><span class="comment">// stdin should be 0, because no file descriptors are open yet</span></span><br><span class="line"><span class="keyword">if</span> ((r = opencons()) != <span class="number">0</span>) &#123;</span><br><span class="line">    user_panic(<span class="string">&quot;opencons: %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// stdout</span></span><br><span class="line"><span class="keyword">if</span> ((r = dup(<span class="number">0</span>, <span class="number">1</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    user_panic(<span class="string">&quot;dup: %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thinking-6-7">Thinking 6.7</h3><blockquote><p>在 shell 中执行的命令分为内置命令和外部命令。在执行内置命令时 shell 不需要 fork 一个子 shell，如 Linux 系统中的 cd 命令。在执行外部命令时 shell 需要 fork 一个子 shell，然后子 shell 去执行这条命令。</p><p>据此判断，在 MOS 中我们用到的 shell 命令是内置命令还是外部命令？请思考为什么 Linux 的 cd 命令是内部命令而不是外部命令？</p></blockquote><p>是外部命令。</p><p>cd 命令使用频繁，若设置为外部指令则每次使用时都会多次 fork。故设置为内部指令可以提高系统运行效率。</p><h3 id="thinking-6-8">Thinking 6.8</h3><blockquote><p>在你的 shell 中输入命令 ls.b | cat.b &gt; motd。</p><ul><li>请问你可以在你的 shell 中观察到几次 spawn ？分别对应哪个进程？</li><li>请问你可以在你的 shell 中观察到几次进程销毁？分别对应哪个进程？</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">ls.b | cat.b &gt; motd</span></span><br><span class="line">[00002803] pipecreate </span><br><span class="line">spawn: 14341</span><br><span class="line">spawn: 16390</span><br><span class="line">[00003805] destroying 00003805</span><br><span class="line">[00003805] free env 00003805</span><br><span class="line">i am killed ... </span><br><span class="line">[00004006] destroying 00004006</span><br><span class="line">[00004006] free env 00004006</span><br><span class="line">i am killed ... </span><br><span class="line">[00003004] destroying 00003004</span><br><span class="line">[00003004] free env 00003004</span><br><span class="line">i am killed ... </span><br><span class="line">[00002803] destroying 00002803</span><br><span class="line">[00002803] free env 00002803</span><br><span class="line">i am killed ... </span><br></pre></td></tr></table></figure><ul><li>共有 2 次 spawn，分别打开了 ls.b， cat.b 进程</li><li>共有 4 次进程销毁，分别销毁了：执行管道左边命令的进程、执行管道右边命令的进程、解析并执行管道右边命令的进程、解析并执行当前命令的进程</li></ul><h2 id="难点分析">难点分析</h2><h3 id="管道">管道</h3><h4 id="管道的原理">管道的原理</h4><p>管道是一种进程间通信的方式，分为有名管道和匿名管道，其中匿名管道只能在具有公共祖先的进程之间使用，且通常使用在父子进程之间（ MOS 实验中仅要求实现匿名管道）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Overview:</span></span><br><span class="line"><span class="comment"> *   Create a pipe.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Post-Condition:</span></span><br><span class="line"><span class="comment"> *   Return 0 and set &#x27;pfd[0]&#x27; to the read end and &#x27;pfd[1]&#x27; to the</span></span><br><span class="line"><span class="comment"> *   write end of the pipe on success.</span></span><br><span class="line"><span class="comment"> *   Return an corresponding error code on error.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">pipe</span><span class="params">(<span class="type">int</span> pfd[<span class="number">2</span>])</span>;</span><br></pre></td></tr></table></figure><p>在 UNIX 以及 MOS 中，父进程调用 pipe 函数后，会打开两个新的文件描述符（<strong>设置 PTE_LIBRARY 权限位</strong>），它们被映射到同一内存空间（其中 fd[0] 表示读端、 fd[1] 表示写端）。在 fork 函数的配合下，子进程复制父进程的两个文件描述符，从而在父子进程间形成了四个（父子各拥有一读一写）指向同一片内存区域的文件描述符，父子进程可根据需 要关掉自己不用的一个，从而实现父子进程间的单向通信管道。</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240611223809577.png" alt=""></p><h4 id="管道的使用">管道的使用</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user/lib/pipe.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PIPE_SIZE 32 <span class="comment">// small to provoke races</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Pipe</span> &#123;</span></span><br><span class="line">u_int p_rpos; <span class="comment">// read position</span></span><br><span class="line">u_int p_wpos; <span class="comment">// write position</span></span><br><span class="line">u_char p_buf[PIPE_SIZE]; <span class="comment">// data buffer</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一个管道有 PIPE_SIZE(32 Byte) 大小的<strong>环形</strong>缓冲区，读写的位置 i 实际上是 i%PIPE_SIZE 。</p><ul><li>写者可写条件：<code>p_wpos - p_rpos &lt; PIPE_SIZE</code>（这里有个坑点，要注意这些变量均为<strong>无符号数</strong>，相减会“溢出”）</li><li>读者可读条件：<code> p_rpos &lt; p_wpos</code></li></ul><p>判断管道是否关闭的等式：<code>pageref(rfd) + pageref(wfd) = pageref(pipe)</code></p><blockquote><p>每个匿名管道分配了三页空间：一页是读数据的文件描述符 rfd，一页是写数据的文件描述符 wfd，剩下一页是被两个文件描述符共享的管道数据缓冲区 pipe</p><p>故在有 1 个读者、1 个写者的前提下，管道将被引用两次</p></blockquote><p>这里进程竞争问题对判断的影响和对应处理可见上文 Thinking 。</p><h3 id="shell">Shell</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240611225349797.png" alt=""></p><h4 id="加载可执行文件">加载可执行文件</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">spawn</span><span class="params">(<span class="type">char</span> *prog, <span class="type">char</span> **argv)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">spawnl</span><span class="params">(<span class="type">char</span> *prog, <span class="type">char</span> *args, ...)</span> &#123;</span><br><span class="line"><span class="comment">// Thanks to MIPS calling convention, the layout of arguments on the stack</span></span><br><span class="line"><span class="comment">// are straightforward.</span></span><br><span class="line"><span class="keyword">return</span> spawn(prog, &amp;args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从文件系统读取指定的文件（二进制 ELF 文件，在 MOS 中为 *.b ）</li><li>调用<code>syscall_exofork</code>申请新的进程控制块</li><li>调用<code>init_stack</code>为子进程初始化地址空间。对于栈空间，由于 spawn 需要将命令行参数传递给用户程序，所以要将参数也写入用户栈中</li><li>将目标程序对应的 ELF 加载到子进程的地址空间中</li><li>调用<code>syscall_set_trapframe</code>设置子进程的寄存器</li><li>调用<code>syscall_mem_map</code>将父进程的共享页面映射到子进程的地址空间中</li><li>调用<code>syscall_set_env_status</code>设置子进程为可执行状态</li></ul><h4 id="shell命令的执行">Shell命令的执行</h4><ul><li>使用 readline 函数循环读入 buf 并进行特殊字符的处理</li><li>fork 子进程执行 runcmd</li><li>使用 gettoken 和 parsecmd 来解析指令，并使用 spawn 加载运行对应的程序</li></ul><h2 id="实验体会">实验体会</h2><p>本次实验要求我们使用管道实现一个简单的 Shell ，总体来说没什么难点；不过对于 Shell 的具体实现指导书没有过多的讲解，如果想丰富 Shell 的功能，还需要多读源码、对整个 MOS 的运行过程有一个非常清晰的认识。</p>]]></content>
      
      
      <categories>
          
          <category> BUAA操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OS-2024-Lab5</title>
      <link href="/359abd69.html"/>
      <url>/359abd69.html</url>
      
        <content type="html"><![CDATA[<h1 id="lab5实验报告">lab5实验报告</h1><h2 id="思考题">思考题</h2><h3 id="thinking-5-1">Thinking 5.1</h3><blockquote><p>如果通过 kseg0 读写设备，那么对于设备的写入会缓存到 Cache 中。这是一种<strong>错误</strong>的行为，在实际编写代码的时候这么做会引发不可预知的问题。请思考：这么做这会引发什么问题？对于不同种类的设备（如我们提到的串口设备和 IDE 磁盘）的操作会有差异吗？可以从缓存的性质和缓存更新的策略来考虑。</p></blockquote><p>当程序需要读取设备的数据时，若数据已经被写入了Cache，则会从Cache中直接读取，而此时若外部设备的数据发生变化，则会产生错误的行为。</p><h3 id="thinking-5-2">Thinking 5.2</h3><blockquote><p>查找代码中的相关定义，试回答一个磁盘块中最多能存储多少个文件控制块？一个目录下最多能有多少个文件？我们的文件系统支持的单个文件最大为多大？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bytes per file system block - same as page size</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCK_SIZE PAGE_SIZE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_STRUCT_SIZE 256</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> &#123;</span></span><br><span class="line"><span class="type">char</span> f_name[MAXNAMELEN]; <span class="comment">// filename</span></span><br><span class="line"><span class="type">uint32_t</span> f_size; <span class="comment">// file size in bytes</span></span><br><span class="line"><span class="type">uint32_t</span> f_type; <span class="comment">// file type</span></span><br><span class="line"><span class="type">uint32_t</span> f_direct[NDIRECT];</span><br><span class="line"><span class="type">uint32_t</span> f_indirect;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">f_dir</span>;</span> <span class="comment">// the pointer to the dir where this file is in, valid only in memory.</span></span><br><span class="line"><span class="type">char</span> f_pad[FILE_STRUCT_SIZE - MAXNAMELEN - (<span class="number">3</span> + NDIRECT) * <span class="number">4</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)];</span><br><span class="line">&#125; __attribute__((aligned(<span class="number">4</span>), packed));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE2BLK (BLOCK_SIZE / sizeof(struct File))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// File types</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTYPE_REG 0 <span class="comment">// Regular file</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FTYPE_DIR 1 <span class="comment">// Directory</span></span></span><br></pre></td></tr></table></figure><p>由代码可知，一个磁盘块最多能存储<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mn>4096</mn><mi>B</mi></mrow><mrow><mn>256</mn><mi>B</mi></mrow></mfrac><mo>=</mo><mn>16</mn></mrow><annotation encoding="application/x-tex">\frac{4096B}{256B}=16</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">5</span><span class="mord mtight">6</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">4</span><span class="mord mtight">0</span><span class="mord mtight">9</span><span class="mord mtight">6</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span></span></span></span>个文件控制块。</p><p>若<code>f_type == FTYPE_DIR</code>，其中的指针最多可以记录<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1024</mn></mrow><annotation encoding="application/x-tex">1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span></span></span></span>个磁盘块，故一个目录下最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1024</mn><mo>×</mo><mn>16</mn><mo>=</mo><mn>16384</mn></mrow><annotation encoding="application/x-tex">1024 \times 16 = 16384</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">6</span><span class="mord">3</span><span class="mord">8</span><span class="mord">4</span></span></span></span>个文件。</p><p>若<code>f_type == FTYPE_REG</code>，则同理可知单个文件最大为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1024</mn><mo>×</mo><mn>4</mn><mi>K</mi><mi>B</mi><mo>=</mo><mn>4</mn><mi>M</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">1024 \times 4KB = 4MB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span>。</p><h3 id="thinking-5-3">Thinking 5.3</h3><blockquote><p>请思考，在满足磁盘块缓存的设计的前提下，我们实验使用的内核支持的最大磁盘大小是多少？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Disk block n, when in memory, is mapped into the file system</span></span><br><span class="line"><span class="comment"> * server&#x27;s address space at DISKMAP+(n*BLOCK_SIZE). */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAP 0x10000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Maximum disk size we can handle (1GB) */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DISKMAX 0x40000000</span></span><br></pre></td></tr></table></figure><p>显然，支持的最大磁盘大小为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi mathvariant="normal">x</mi><mn>4000</mn><mi mathvariant="normal">_</mi><mn>0000</mn><mi>B</mi><mo>=</mo><mn>1</mn><mi>G</mi><mi>B</mi></mrow><annotation encoding="application/x-tex">0{\rm x}4000\_0000B=1GB</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.99333em;vertical-align:-0.31em;"></span><span class="mord">0</span><span class="mord"><span class="mord"><span class="mord mathrm">x</span></span></span><span class="mord">4</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span></p><h3 id="thinking-5-4">Thinking 5.4</h3><blockquote><p>在本实验中，fs/serv.h、user/include/fs.h 等文件中出现了许多宏定义，试列举你认为较为重要的宏定义，同时进行解释，并描述其主要应用之处。</p></blockquote><p>代码中的注释写得很详细，这些宏大部分指代不同数据结构的大小，如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FILE2BLK (BLOCK_SIZE / sizeof(struct File))</span></span><br><span class="line"><span class="comment">//指一个磁盘块最大文件块数，可用来遍历目录项</span></span><br><span class="line"></span><br><span class="line">u_int nblock;</span><br><span class="line">nblock = ROUND(dir-&gt;f_size, BLOCK_SIZE) / BLOCK_SIZE;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nblock; i++) &#123;</span><br><span class="line">    <span class="type">void</span> *blk;</span><br><span class="line">    try(file_get_block(dir, i, &amp;blk));</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">files</span> =</span> (<span class="keyword">struct</span> File *)blk;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">struct</span> File *f = files; f &lt; files + FILE2BLK; ++f) &#123;</span><br><span class="line">        <span class="comment">//do something...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thinking-5-5">Thinking 5.5</h3><blockquote><p>在 Lab4“系统调用与 fork”的实验中我们实现了极为重要的 fork 函数。那么 fork 前后的父子进程是否会共享文件描述符和定位指针呢？请在完成上述练习的基础上编写一个程序进行验证。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//serv_check.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *msg = <span class="string">&quot;This is the NEW message of the day!\n&quot;</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> *diff_msg = <span class="string">&quot;This is a different message of the day!\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="type">int</span> fdnum;</span><br><span class="line"><span class="type">char</span> buf[<span class="number">512</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((r = open(<span class="string">&quot;/newmotd&quot;</span>, O_RDWR)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">user_panic(<span class="string">&quot;cannot open /newmotd: %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br><span class="line">fdnum = r;</span><br><span class="line">debugf(<span class="string">&quot;open is good\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (r = fork()) &#123;</span><br><span class="line">n = read(fdnum, buf, <span class="number">10</span>);</span><br><span class="line">debugf(<span class="string">&quot;father: \&#x27;%s\&#x27;\n&quot;</span>, buf);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n = read(fdnum, buf, <span class="number">10</span>);</span><br><span class="line">debugf(<span class="string">&quot;child: \&#x27;%s\&#x27;\n&quot;</span>, buf);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240530213141501.png" alt=""></p><h3 id="thinking-5-6">Thinking 5.6</h3><blockquote><p>请解释 File, Fd, Filefd 结构体及其各个域的作用。比如各个结构体会在哪些过程中被使用，是否对应磁盘上的物理实体还是单纯的内存数据等。说明形式自定，要求简洁明了，可大致勾勒出文件系统数据结构与物理实体的对应关系与设计框架。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXNAMELEN 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NDIRECT 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_STRUCT_SIZE 256</span></span><br><span class="line"><span class="comment">// file control block</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> &#123;</span></span><br><span class="line"><span class="type">char</span> f_name[MAXNAMELEN]; <span class="comment">// filename</span></span><br><span class="line"><span class="type">uint32_t</span> f_size; <span class="comment">// file size in bytes</span></span><br><span class="line"><span class="type">uint32_t</span> f_type; <span class="comment">// file type</span></span><br><span class="line"><span class="type">uint32_t</span> f_direct[NDIRECT];</span><br><span class="line"><span class="type">uint32_t</span> f_indirect;</span><br><span class="line">    <span class="comment">// 指向存放文件数据的对应磁盘块，不使用指向间接磁盘块（(uint32_t *) f_indirect）的前十个指针</span></span><br><span class="line">    <span class="comment">/* 使用示范</span></span><br><span class="line"><span class="comment">    int bno; // the block number</span></span><br><span class="line"><span class="comment">    if (i &lt; NDIRECT) &#123;</span></span><br><span class="line"><span class="comment">    bno = dirf-&gt;f_direct[i];</span></span><br><span class="line"><span class="comment">    &#125; else &#123;</span></span><br><span class="line"><span class="comment">    bno = ((uint32_t *) disk[dirf-&gt;f_indirect].data)[i];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> *<span class="title">f_dir</span>;</span> <span class="comment">// the pointer to the dir where this file is in, valid only in memory.</span></span><br><span class="line"><span class="type">char</span> f_pad[FILE_STRUCT_SIZE - MAXNAMELEN - (<span class="number">3</span> + NDIRECT) * <span class="number">4</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)]; <span class="comment">// 占位</span></span><br><span class="line">&#125; __attribute__((aligned(<span class="number">4</span>), packed));</span><br><span class="line"></span><br><span class="line"><span class="comment">// file descriptor</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> &#123;</span></span><br><span class="line">u_int fd_dev_id; <span class="comment">// 该文件对应的设备</span></span><br><span class="line">u_int fd_offset; <span class="comment">// 读写的偏移量</span></span><br><span class="line">u_int fd_omode; <span class="comment">// 读写方式，包括只读、只写、读写等</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入文件操作符，是为了给用户程序提供操作文件的同一接口，使用户进程能知晓文件的信息和状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// file descriptor + file</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Filefd</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fd</span> <span class="title">f_fd</span>;</span> <span class="comment">// 文件描述符</span></span><br><span class="line">u_int f_fileid; <span class="comment">// 文件id</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">f_file</span>;</span> <span class="comment">// 对应的文件控制块</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="thinking-5-7">Thinking 5.7</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240528225331405.png" alt=""></p><blockquote><p>图 5.9 中有多种不同形式的箭头，请解释这些不同箭头的差别，并思考我们的操作系统是如何实现对应类型的进程间通信的。</p></blockquote><p>图中实线箭头表示调用另一个程序中的对应函数，虚线箭头表示使用IPC获取调用结果。</p><ul><li>文件系统服务进程在完成初始化（<code>serv_init,fs_init</code>）后，调用<code>serve</code>函数（一个死循环），然后反复调用<code>ipc_recv</code>等待用户进程发出操作请求，并根据请求的不同类型执行相应的文件操作，完成服务后使用<code>ipc_send</code>返回结果。</li><li>用户进程针对不同的请求类型，通过<code>ipc_send</code>发送必要的参数（将请求的内容放在结构体中），然后等待被文件系统反馈的结果（<code>ipc_send</code>）唤醒。</li></ul><h2 id="难点分析">难点分析</h2><h3 id="外设控制">外设控制</h3><p>CPU 通过读写设备控制器上的寄存器实现对设备的控制和通信。而在MIPS体系结构下，我们使用 MMIO机制访问设备寄存器。</p><p><strong>MMIO</strong>（内存映射IO）：使用不同的物理内存地址 为设备寄存器编址，将一部分对物理内存的访问 “重定向” 到设备地址空间中。</p><table><thead><tr><th>偏移</th><th style="text-align:left">寄存器功能</th><th>数据位宽</th></tr></thead><tbody><tr><td>0x0</td><td style="text-align:left">读/写：向磁盘中读/写数据，从 0 字节开始逐个读出/写入</td><td>4B</td></tr><tr><td>0x1</td><td style="text-align:left">读：设备错误信息；写：设置 IDE 命令的特定参数</td><td>1B</td></tr><tr><td>0x2</td><td style="text-align:left">写：设置一次需要操作的扇区数量</td><td>1B</td></tr><tr><td>0x3</td><td style="text-align:left">写：设置目标扇区号的 [7:0] 位（LBAL）</td><td>1B</td></tr><tr><td>0x4</td><td style="text-align:left">写：设置目标扇区号的 [15:8] 位（LBAM）</td><td>1B</td></tr><tr><td>0x5</td><td style="text-align:left">写：设置目标扇区号的 [23:16] 位（LBAH）</td><td>1B</td></tr><tr><td>0x6</td><td style="text-align:left">写：设置目标扇区号的 [27:24] 位，配置扇区寻址模式 （CHS/LBA），设置要操作的磁盘编号</td><td>1B</td></tr><tr><td>0x7</td><td style="text-align:left">读：获取设备状态；写：配置设备工作状态</td><td>1 字节</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240530222324917.png" alt=""></p><p>使用系统调用<code>sys_write_dev</code>和<code>sys_read_dev</code>读写<code>kseg1</code>段内核数据，来实现设备读写操作。</p><h3 id="文件系统结构">文件系统结构</h3><h4 id="磁盘结构">磁盘结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Block</span> &#123;</span></span><br><span class="line"><span class="type">uint8_t</span> data[BLOCK_SIZE];</span><br><span class="line"><span class="type">uint32_t</span> type;</span><br><span class="line">&#125; disk[NBLOCK];</span><br><span class="line"><span class="comment">// 操作系统与磁盘交互的最小逻辑单元</span></span><br><span class="line"><span class="comment">// Block0作为引导扇区和分区表使用</span></span><br><span class="line"><span class="comment">// Block1作为超级块（Super Block），文件系统的基本信息</span></span><br><span class="line"><span class="comment">// Block2作为位图块，用来管理空闲的磁盘资源</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Super</span> &#123;</span></span><br><span class="line"><span class="type">uint32_t</span> s_magic;   <span class="comment">// Magic number: FS_MAGIC</span></span><br><span class="line"><span class="type">uint32_t</span> s_nblocks; <span class="comment">// Total number of blocks on disk （1024）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">File</span> <span class="title">s_root</span>;</span> <span class="comment">// Root directory node（f_type: FTYPE_DIR, f_name: &quot;/&quot;）</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*---------------------------------------*/</span></span><br><span class="line"><span class="comment">// Initial the disk. Do some work with bitmap and super block.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_disk</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i, diff;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 1: Mark boot sector block.</span></span><br><span class="line">disk[<span class="number">0</span>].type = BLOCK_BOOT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Initialize boundary.</span></span><br><span class="line">nbitblock = (NBLOCK + BLOCK_SIZE_BIT - <span class="number">1</span>) / BLOCK_SIZE_BIT;</span><br><span class="line">    <span class="comment">// 为了使用Bitmap标识整个磁盘上所有块的使用情况所需要的磁盘块的数量</span></span><br><span class="line">nextbno = <span class="number">2</span> + nbitblock;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: Initialize bitmap blocks.</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nbitblock; ++i) &#123;</span><br><span class="line">disk[<span class="number">2</span> + i].type = BLOCK_BMAP;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nbitblock; ++i) &#123;</span><br><span class="line"><span class="built_in">memset</span>(disk[<span class="number">2</span> + i].data, <span class="number">0xff</span>, BLOCK_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (NBLOCK != nbitblock * BLOCK_SIZE_BIT) &#123;</span><br><span class="line">        <span class="comment">// 不存在的部分置为0</span></span><br><span class="line">diff = NBLOCK % BLOCK_SIZE_BIT / <span class="number">8</span>;</span><br><span class="line"><span class="built_in">memset</span>(disk[<span class="number">2</span> + (nbitblock - <span class="number">1</span>)].data + diff, <span class="number">0x00</span>, BLOCK_SIZE - diff);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: Initialize super block.</span></span><br><span class="line">disk[<span class="number">1</span>].type = BLOCK_SUPER;</span><br><span class="line">super.s_magic = FS_MAGIC;</span><br><span class="line">super.s_nblocks = NBLOCK;</span><br><span class="line">super.s_root.f_type = FTYPE_DIR;</span><br><span class="line"><span class="built_in">strcpy</span>(super.s_root.f_name, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件系统">文件系统</h4><p>见<code>Thinking 5.6</code></p><h4 id="用户接口">用户接口</h4><p>引入文件描述符（file descriptor）作为用户程序管理、操作文件的基础，隔离底层的文件系统实现，抽象地表示对一个文件进行的操作。</p><p>关于<code>Fd</code>和<code>Filefd</code>可看<code>Thinking 5.6</code></p><p>我们将一个进程所有的文件描述符存储在<code>[FDTABLE, FILEBASE)</code>这一地址空间中（使用<code>fd_alloc</code>分配），在<code>FILEBASE</code>之上存储对应的<code>Filefd</code>。</p><ul><li><p>Filefd 结构体的第一个成员就是 Fd，因此指向 Filefd 的指针同样指向这个 Fd 的起始位置，故可以进行强制转换。</p></li><li><p>可使用<code>fa2data</code>获取文件描述符对应的文件的数据，使用<code>fd2num</code>返回描述符编号</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">fd2data</span><span class="params">(<span class="keyword">struct</span> Fd *fd)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">void</span> *)INDEX2DATA(fd2num(fd));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fd2num</span><span class="params">(<span class="keyword">struct</span> Fd *fd)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ((u_int)fd - FDTABLE) / PTMAP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件操作如何进行">文件操作如何进行</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240530231846036.png" alt=""></p><p>随后在函数<code>fsipc</code>中使用IPC向文件服务系统发送请求，在<code>serve_*</code>中调用相应的<code>fs_*</code>对文件和磁盘数据进行操作</p><h2 id="实验体会">实验体会</h2><p>lab5总体看虽然代码量大很吓人，但实际上通过阅读指导书了解了MOS文件系统的精巧设计思路，仿照lab4的思路去理解各个函数之间的调用关系，还是可以比较轻松地完成任务的。只不过确实这次课下没有付出相应的充足时间，导致课上很不熟练、bug频出，最后也没时间做extra了。</p><p>然后关于课上debug，一点惨痛教训：指针的类型强制转换，是改变了该指针对一段内存的解释方式，一定要搞清楚要用这个指针去读取什么类型的数据！</p>]]></content>
      
      
      <categories>
          
          <category> BUAA操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OS-2024-Lab4</title>
      <link href="/429d8dff.html"/>
      <url>/429d8dff.html</url>
      
        <content type="html"><![CDATA[<h1 id="lab4实验报告">lab4实验报告</h1><h2 id="思考题">思考题</h2><h3 id="thinking-4-1">Thinking 4.1</h3><blockquote><p>思考并回答下面的问题：</p><ul><li>内核在保存现场的时候是如何避免破坏通用寄存器的？</li><li>系统陷入内核调用后可以直接从当时的 $a0-$a3 参数寄存器中得到用户调用 msyscall 留下的信息吗？</li><li>我们是怎么做到让 sys 开头的函数“认为”我们提供了和用户调用 msyscall 时同样的参数的？</li><li>内核处理系统调用的过程对 Trapframe 做了哪些更改？这种修改对应的用户态的变化是什么？</li></ul></blockquote><ol><li><p>通过<code>include/stackframe.h</code>中的<code>SAVE_ALL</code>宏，用<code>$k0,$k1</code>寄存器将其他通用寄存器保存到内核栈上。</p></li><li><p>可以，不过在陷入内核态时已经将<code>$a0-$a3</code>寄存器中的值保存到了内核栈中，一般来说直接从内核栈中获取这些参数的值。</p></li><li><p>根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">M</mi><mi mathvariant="script">I</mi><mi mathvariant="script">P</mi><mi mathvariant="script">S</mi></mrow><annotation encoding="application/x-tex">\mathcal{MIPS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">M</span><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mord mathcal" style="margin-right:0.08222em;">P</span><span class="mord mathcal" style="margin-right:0.075em;">S</span></span></span></span></span>调用规范，调用<code>msyscall</code>时，<code>syscall_*</code>已经将调用参数存入了<code>$a0-$a3</code>寄存器和用户栈中；进一步，陷入内核调用后，将用户进程上下文环境保存进内核栈中。因此，函数<code>sys_*</code>可以使用到所需要的参数。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_syscall</span><span class="params">(<span class="keyword">struct</span> Trapframe *tf)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    tf-&gt;cp0_epc = tf-&gt;cp0_epc + <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//完成系统调用后直接返回下一条指令（规定了syscall不会在延迟槽中被使用）</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    tf-&gt;regs[<span class="number">2</span>] = (*func) (arg1, arg2, arg3, arg4, arg5);</span><br><span class="line">    <span class="comment">//将系统调用返回值传回用户态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="thinking-4-2">Thinking 4.2</h3><blockquote><p>思考 envid2env 函数: 为什么 envid2env 中需要判断 e-&gt;env_id != envid 的情况？如果没有这步判断会发生什么情况？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LOG2NENV 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NENV (1 &lt;&lt; LOG2NENV)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ENVX(envid) ((envid) &amp; (NENV - 1))</span></span><br></pre></td></tr></table></figure><p>当<code>envid!=0</code>时，通过宏<code>ENVX</code>获取当前进程<code>e</code>，可以看到，该宏取envid的<strong>低10位</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u_int <span class="title function_">mkenvid</span><span class="params">(<span class="keyword">struct</span> Env *e)</span> &#123;</span><br><span class="line">    <span class="type">static</span> u_int i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ((++i) &lt;&lt; (<span class="number">1</span> + LOG2NENV)) | (e - envs);</span><br><span class="line">    <span class="comment">//高位不全为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的是无效（没被分配）的envid，则不判断<code>e-&gt;env_id!=envid</code>就会产生错误。</p><h3 id="thinking-4-3">Thinking 4.3</h3><blockquote><p>思考下面的问题，并对这个问题谈谈你的理解：请回顾 kern/env.c 文件中 mkenvid() 函数的实现，该函数不会返回 0，请结合系统调用和 IPC 部分的实现与 envid2env() 函数的行为进行解释。</p></blockquote><p>由上可知，envid不会为0。故将0作为保留值，可以很方便地获取当前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">P</mi><mi mathvariant="script">C</mi><mi mathvariant="script">B</mi></mrow><annotation encoding="application/x-tex">\mathcal{PCB}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">P</span><span class="mord mathcal" style="margin-right:0.05834em;">C</span><span class="mord mathcal" style="margin-right:0.03041em;">B</span></span></span></span></span>的指针。</p><h3 id="thinking-4-4">Thinking 4.4</h3><blockquote><p>关于 fork 函数的两个返回值，下面说法正确的是：</p><p>A、fork 在父进程中被调用两次，产生两个返回值</p><p>B、fork 在两个进程中分别被调用一次，产生两个不同的返回值</p><p>C、fork 只在父进程中被调用了一次，在两个进程中各产生一个返回值</p><p>D、fork 只在子进程中被调用了一次，在两个进程中各产生一个返回值</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">child = syscall_exofork();</span><br><span class="line"><span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">env = envs + ENVX(syscall_getenvid());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">C</mi></mrow><annotation encoding="application/x-tex">\mathcal{C}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.05834em;">C</span></span></span></span></span>，<code>fork</code>只在当前进程（父进程）中被调用了一次，通过进一步调用<code>sys_exofork</code>创建了新的进程，复制了此时的现场并将子进程上下文环境中的<code>e-&gt;env_tf.regs[2]($v0)</code>设为<strong>0</strong>，而父进程则在最后返回子进程id。</p><h3 id="thinking-4-5">Thinking 4.5</h3><blockquote><p>我们并不应该对所有的用户空间页都使用 duppage 进行映射。那么究竟哪些用户空间页应该映射，哪些不应该呢？请结合 kern/env.c 中 env_init 函数进行的页面映射、include/mmu.h 里的内存布局图以及本章的后续描述进行思考。</p></blockquote><p>首先<code>ULIM</code>和<code>UTOP</code>之间的内容为内核的页表数据，也是所有进程共享的只读空间，同时在<code>env_alloc</code>已从<code>base_pgdir</code>中拷贝至进程页表，故不需要映射。</p><p>然后<code>UTOP</code>和<code>USTACKTOP</code>之间的内容是用来处理用户异常的，也不需要进行映射。</p><p>故最终需要映射的内容为<code>USTACKTOP</code>之下所有的有效页（<code>PTE_V</code>）。</p><h3 id="thinking-4-6">Thinking 4.6</h3><blockquote><p>在遍历地址空间存取页表项时你需要使用到 vpd 和 vpt 这两个指针，请参考 user/include/lib.h 中的相关定义，思考并回答这几个问题：</p><ul><li>vpt 和 vpd 的作用是什么？怎样使用它们？</li><li>从实现的角度谈一下为什么进程能够通过这种方式来存取自身的页表？</li><li>它们是如何体现自映射设计的？</li><li>进程能够通过这种方式来修改自己的页表项吗？</li></ul></blockquote><ol><li><code>vpt</code>和<code>vpd</code>分别是指向用户页表和页目录的指针，以<code>vpt</code>为基地址，加上页表偏移量即可得到指向<code>va</code>对应的页表项的指针，即<code>vpt[va &gt;&gt; 12]</code>；以<code>vpd</code>为基地址，加上页目录偏移量即可得到指向<code>va</code>对应的页目录项的指针。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> vpt ((const volatile Pte *)UVPT)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vpd ((const volatile Pde *)(UVPT + (PDX(UVPT) &lt;&lt; PGSHIFT)))</span></span><br><span class="line"><span class="comment">//这两个值分别为用户地址空间中页表的首地址和页目录的首地址</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">env_setup_vm</span><span class="params">(<span class="keyword">struct</span> Env *e)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    e-&gt;env_pgdir[PDX(UVPT)] = PADDR(e-&gt;env_pgdir) | PTE_V;</span><br><span class="line">    <span class="comment">//将进程页目录表中 UVPT 对应的页目录项设为了进程页目录表对应的地址</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>不能，页表由内核维护，用户只能进行访问。</li></ol><h3 id="thinking-4-7">Thinking 4.7</h3><blockquote><p>在 do_tlb_mod 函数中，你可能注意到了一个向异常处理栈复制 Trapframe 运行现场的过程，请思考并回答这几个问题：</p><ul><li>这里实现了一个支持类似于“异常重入”的机制，而在什么时候会出现这种“异常重 入”？</li><li>内核为什么需要将异常的现场 Trapframe 复制到用户空间？</li></ul></blockquote><ol><li>异常重入是指在处理异常的过程中，又触发了新的异常。如在处理写时复制的页写入异常时，又发生了缺页等异常。</li><li>因为页写入异常的处理是在用户态进行的，所以需要保存现场到用户空间用以恢复现场。</li></ol><h3 id="thinking-4-8">Thinking 4.8</h3><blockquote><p>在用户态处理页写入异常，相比于在内核态处理有什么优势？</p></blockquote><p>提高系统的稳定性，即使处理异常时进程崩溃，也不会影响到整个系统。</p><h3 id="thinking-4-9">Thinking 4.9</h3><blockquote><p>请思考并回答以下几个问题：</p><ul><li>为什么需要将 syscall_set_tlb_mod_entry 的调用放置在 syscall_exofork 之前？</li><li>如果放置在写时复制保护机制完成之后会有怎样的效果？</li></ul></blockquote><ol><li>只需要在写时复制保护机制完成之前调用<code>syscall_set_tlb_mod_entry</code>即可。</li><li>无法正常处理页写入相关异常。</li></ol><h2 id="难点分析">难点分析</h2><h3 id="系统调用完整过程">系统调用完整过程</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240522161536474.png" alt="syscall"></p><ol><li><p>用户程序调用<code>syscall_*</code>函数（定义在<code>user/lib/syscall_lib.h</code>中）。</p></li><li><p><code>syscall_*</code>函数将系统调用号和系统调用参数存入寄存器（<code>$a0-$a3</code>）和用户栈中（这一过程由编译器自动编译），然后调用<code>msyscall。</code></p></li><li><p>在<code>msyscall</code>函数中执行<code>syscall</code>指令使CPU陷入内核态。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LEAF(msyscall)</span><br><span class="line">syscall</span><br><span class="line">jrra</span><br><span class="line">//记得返回syscall_*</span><br><span class="line">END(msyscall)</span><br></pre></td></tr></table></figure></li><li><p>陷入内核态后，跳转到<code>.exc_gen_entry</code>处执行指令。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.section .text.exc_gen_entry</span><br><span class="line">exc_gen_entry:</span><br><span class="line">SAVE_ALL</span><br><span class="line">//将用户进程上下文环境保存在内核栈中</span><br><span class="line">mfc0    t0, CP0_STATUS</span><br><span class="line">and     t0, t0, ~(STATUS_UM | STATUS_EXL | STATUS_IE)</span><br><span class="line">mtc0   t0, CP0_STATUS</span><br><span class="line">mfc0t0, CP0_CAUSE</span><br><span class="line">andit0, 0x7c</span><br><span class="line">lwt0, exception_handlers(t0)</span><br><span class="line">//跳转到对应的异常处理函数</span><br><span class="line">jrt0</span><br></pre></td></tr></table></figure></li><li><p><code>kern/traps.c</code>中定义了异常处理函数，系统调用对应的异常码为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>8</mn></mrow><annotation encoding="application/x-tex">8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">8</span></span></span></span>。</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> (*exception_handlers[<span class="number">32</span>])(<span class="type">void</span>) = &#123;</span><br><span class="line">    [<span class="number">0</span> ... <span class="number">31</span>] = handle_reserved,</span><br><span class="line">    [<span class="number">0</span>] = handle_int,</span><br><span class="line">    [<span class="number">2</span> ... <span class="number">3</span>] = handle_tlb,</span><br><span class="line">    [<span class="number">1</span>] = handle_mod,</span><br><span class="line">    [<span class="number">8</span>] = handle_sys,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>kern/genex.S</code>中使用<code>BUILD_HANDLER</code>宏对<code>handle_*</code>函数进行了封装。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.macro BUILD_HANDLER exception handler</span><br><span class="line">NESTED(handle_\exception, TF_SIZE + 8, zero)</span><br><span class="line">move    a0, sp</span><br><span class="line">addiu   sp, sp, -8</span><br><span class="line">jal     \handler</span><br><span class="line">addiu   sp, sp, 8</span><br><span class="line">j       ret_from_exception</span><br><span class="line">END(handle_\exception)</span><br><span class="line">.endm</span><br><span class="line">BUILD_HANDLER mod do_tlb_mod</span><br><span class="line">BUILD_HANDLER sys do_syscall</span><br></pre></td></tr></table></figure></li><li><p><code>do_syscall</code>根据系统调用号调用对应的函数，并将返回值存入内核栈中保存的用户进程（<code>tf.reg[2]</code>）、修改epc使得能够返回到<code>msyscall</code>函数中的<code>jr ra</code>指令。</p></li><li><p>调用<code>ret_from_exception</code>，执行<code>RESTORE_ALL</code>宏还原现场并返回用户程序，系统调用结束。</p></li></ol><h3 id="ipc">ipc</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240522164558501.png" alt="ipc"></p><h3 id="fork的实现">fork的实现</h3><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240522165234868.png" alt="fork"></p><h4 id="写时复制机制">写时复制机制</h4><p>使用<code>fork</code>创建子进程时，让父子进程暂时共享内存，当页面需要写入数据时才将内存分离，以避免同时消耗大量物理内存。</p><p>具体实现为，将虚拟页权限位设置为<code>PTE_D = 0 &amp;&amp; PTE_COW = 1</code>，当需要写入时触发<code>TLB_Mod</code>异常。</p><h4 id="页写入异常处理机制">页写入异常处理机制</h4><p>当用户程序写入一个在TLB中<code>PTE_D</code>位为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>的页面时，系统会陷入<code>TLB Mod</code>异常，之后会跳转到<code>kern/tlbex.c</code>中的<code>do_tlb_mod</code>函数。</p><p>该函数会将进程上下文保存在<strong>用户态的异常处理栈</strong>中，并设置<code>$a0</code>和<code>$epc</code>的值，使得异常恢复后能跳转到<code>env_user_tlb_mod_entry</code>所设置的用户异常处理函数的地址。也就是说，<code>TLB Mod</code>异常的主要处理过程是在用户态中。</p><hr><p>对于写时复制机制，我们将父子进程的<code>TLB Mod</code>异常处理函数设为<code>cow_entry</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> __attribute__((<span class="keyword">noreturn</span>)) cow_entry(<span class="keyword">struct</span> Trapframe *tf) &#123;</span><br><span class="line">    <span class="comment">//获取发生写入异常的地址</span></span><br><span class="line">u_int va = tf-&gt;cp0_badvaddr;</span><br><span class="line">u_int perm;</span><br><span class="line">perm = vpt[VPN(va)] &amp; <span class="number">0xfff</span>;</span><br><span class="line">    <span class="comment">//检查标志位</span></span><br><span class="line"><span class="keyword">if</span> (!(perm &amp; PTE_COW)) &#123;</span><br><span class="line">user_panic(<span class="string">&quot;doesn&#x27;t have PTE_COW&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//分配一个新的物理页面到临时地址UCOW，修改权限</span></span><br><span class="line">perm = (perm &amp; (~PTE_COW)) | PTE_D;</span><br><span class="line">syscall_mem_alloc(<span class="number">0</span>, (<span class="type">void</span> *) UCOW, perm);</span><br><span class="line">    <span class="comment">//复制页面内容至新页面</span></span><br><span class="line"><span class="built_in">memcpy</span>((<span class="type">void</span> *) UCOW, (<span class="type">void</span> *) ROUNDDOWN(va, PAGE_SIZE), PAGE_SIZE);</span><br><span class="line"><span class="comment">//映射写入异常的地址到新页面上</span></span><br><span class="line">syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span> *) UCOW, <span class="number">0</span>, (<span class="type">void</span> *) va, perm);</span><br><span class="line">    <span class="comment">//解除临时地址UCOW的内存映射</span></span><br><span class="line">syscall_mem_unmap(<span class="number">0</span>, (<span class="type">void</span> *) UCOW);</span><br><span class="line">    <span class="comment">//设置返回地址</span></span><br><span class="line"><span class="type">int</span> r = syscall_set_trapframe(<span class="number">0</span>, tf);</span><br><span class="line">user_panic(<span class="string">&quot;syscall_set_trapframe returned %d&quot;</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>值得一提的是，如何在用户异常处理函数中返回呢？通过上面的内容可以看到，采用的方法是陷入一个新的异常，替换内核栈的内容，从而在返回时根据替换的<code>Trapframe</code>恢复现场。这就是系统调用<code>sys_set_trapframe</code>的基本原理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sys_set_trapframe</span><span class="params">(u_int envid, <span class="keyword">struct</span> Trapframe *tf)</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">if</span> (env == curenv) &#123;</span><br><span class="line">*((<span class="keyword">struct</span> Trapframe *)KSTACKTOP - <span class="number">1</span>) = *tf;</span><br><span class="line"><span class="comment">//注意返回值</span></span><br><span class="line"><span class="keyword">return</span> tf-&gt;regs[<span class="number">2</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="页面映射">页面映射</h4><p>由于写时复制机制，我们只需调用<code>syscall_mem_map</code>将父进程的页面映射到子进程中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fork()</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; VPN(USTACKTOP); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((vpd[i &gt;&gt; <span class="number">10</span>] &amp; PTE_V) &amp;&amp; (vpt[i] &amp; PTE_V)) &#123;</span><br><span class="line">        <span class="comment">//vpd和vpt的使用见思考题4.6</span></span><br><span class="line">        duppage(child, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限设置规则如下：</p><ul><li>原本便不可写、共享或就是写时复制的页面不需要更改其权限</li><li>对可写、非共享且不是写时复制的页面，需要取消其可写位，设置写时复制位。然后将其映射给子进程， 并更新父进程这一页的权限</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//duppage()</span></span><br><span class="line"><span class="keyword">if</span> ((perm &amp; PTE_D) &amp;&amp; !(perm &amp; PTE_LIBRARY) &amp;&amp; !(perm &amp; PTE_COW)) &#123;</span><br><span class="line">    perm = (perm &amp; (~PTE_D)) | PTE_COW;</span><br><span class="line">    syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span> *) addr, envid, (<span class="type">void</span> *) addr, perm);</span><br><span class="line">    syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span> *) addr, <span class="number">0</span>, (<span class="type">void</span> *) addr, perm);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    syscall_mem_map(<span class="number">0</span>, (<span class="type">void</span> *) addr, envid, (<span class="type">void</span> *) addr, perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验体会">实验体会</h2><p>这一章内容还是比较多的，不过通过仔细阅读指导书和相关流程图，以及实验代码，最终还是能大致搞明白系统调用以及ipc、fork的具体过程，两次exam也都顺利通过了。不过感觉debug能力和灵活运用知识的能力还是不够，归根结底还是对MOS的整体结构和内存管理那一块的东西没有搞得很清楚，不能做到对各个函数运用自如。总之，还得继续努力。</p>]]></content>
      
      
      <categories>
          
          <category> BUAA操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OO-2024-Unit4</title>
      <link href="/1e5b8c04.html"/>
      <url>/1e5b8c04.html</url>
      
        <content type="html"><![CDATA[<h2 id="正向建模与开发">正向建模与开发</h2><p>正向建模与开发是指从需求分析开始，通过逐步细化需求，创建模型，并最终开发出软件的过程。这种方法强调从抽象到具体、从概念到实现的系统性过程。</p><p>而本单元正式所使用 UML（<code>Unified Modeling Language</code>）建模语言则是贯彻上述理念的一个很好的工具。在之前几个单元的设计中，我们虽然已经开始对 UML 有一些接触，但只是局限于用它来对每单元最后的迭代结果进行总结分析。既然有没有 UML 我们都<s>或好或坏</s>地完成了架构设计任务，那为什么还要花时间来接触这样一门建模语言呢？</p><p>面向对象本质上定义了一个抽象语言系统</p><ul><li>词汇：对象、属性、操作、活动、流程、状态……</li><li>语法：对象间连接、对象与数据间连接、对象与操作间连接、属性与操作间连接、属性与活动间连接、操作与状态间连接……</li></ul><p>我们作为面向对象的初学者，通过 oopre + oo 算是品尝了一番迭代开发的滋味，也许不必在意用这样的语言组成的话语会向别人传达什么信息，只要自己代码写得痛快并且能够理解就行。但也许未来我们可能会面对越来越复杂、迭代不止的软件开发任务，或者与他人进行合作开发；这个时候若还是看了眼需求埋头就写、边想边写，就有点不太现实了。</p><p>UML 作为一种建模语言，它提供了一种标准的、统一的、可视化的建模方法，使得我们可以用一种统一的语言来描述软件系统的各个方面，从而使得我们能够更好地理解、分析、设计、实现、测试、维护软件系统。正向建模与开发就是一种系统化的软件开发方法，通过需求分析、系统建模、架构设计、详细设计、编码实现、集成测试和部署维护等步骤，确保软件开发过程的规范性和可控性。这种方法有助于提高软件开发的效率和质量，降低项目风险。</p><p>不过，很多时候在一开始就通过建模语言设计好所有的架构是不现实的，因为需求总是会变化的。所以在实际开发中，我们可以采用增量式开发的方法，先设计好一个基本的架构，然后根据需求的变化逐步迭代，逐步完善。这样可以在保证软件质量的同时，也能够更好地适应需求的变化。而在这单元的实践中，我主要采用的是先用语言文字进行简单建模，然后再上手进行对应代码的具体实现。</p><h2 id="unit4架构设计">Unit4架构设计</h2><p>本单元的主要任务是模拟一个读书馆的管理系统，我们需要设计一个系统，能够管理读者、图书、借阅记录等信息。</p><h3 id="最终架构">最终架构</h3><h4 id="类图">类图</h4><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240616225501640.png" alt="Model"></p><h4 id="状态图-书籍">状态图（书籍）</h4><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240616230019026.png" alt="StatechartDiagram"></p><h4 id="顺序图-预约">顺序图（预约）</h4><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240616230118188.png" alt="SequenceDiagram"></p><h3 id="迭代过程">迭代过程</h3><blockquote><p>三次简易文字建模如下</p></blockquote><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">##</span> hw13</span><br><span class="line"></span><br><span class="line">1. close后整理</span><br><span class="line">    - 借还处的书全部放回书架</span><br><span class="line">    - 预约处的过期（对预约的所有人）的书放回书架，删除预约表中记录</span><br><span class="line"></span><br><span class="line">2. open后整理</span><br><span class="line"></span><br><span class="line">    - 根据预约表和书架的情况取书到预约台，为指定用户保留五天并删除预约表中记录</span><br><span class="line"></span><br><span class="line">3. 开馆</span><br><span class="line"></span><br><span class="line">    - 借阅</span><br><span class="line">        - 先判断是否可从书架中取出</span><br><span class="line">        - 再根据用户持书情况判断此书的归属</span><br><span class="line">    - 还书</span><br><span class="line">        - 本次作业还书立即成功，书由用户<span class="built_in">$</span><span class="keyword">\to</span><span class="built_in">$</span>借还处</span><br><span class="line">    - 预约</span><br><span class="line">        - 根据持书情况判断是否允许该预约，若预约表中已有则拒绝这次预约</span><br><span class="line">        - 若预约成功，预约请求加入预约表</span><br><span class="line"></span><br><span class="line">    - 取书</span><br><span class="line">        - 预约处查询，若为其保存且是要取的书，则取书成功，删除预约表对应记录</span><br><span class="line">        - 否则失败</span><br><span class="line">    - 查询</span><br><span class="line">        - 直接查询书架情况即可</span><br><span class="line"></span><br><span class="line"><span class="params">##</span> hw14</span><br><span class="line"></span><br><span class="line">0. - 正式书籍：书架、预约处、借还处、用户</span><br><span class="line">    - 非正式书籍：借还处、漂流角、用户</span><br><span class="line">        - 不可预约、续借</span><br><span class="line">        - 由用户捐献，序列号与书架不同，且书号不重复（最多一本）</span><br><span class="line">1. close后整理</span><br><span class="line">    - 借还处的书根据不同情况全部送回（书架、漂流角）</span><br><span class="line">    - 预约处的过期（对预约的所有人）的书放回书架，删除预约表中记录</span><br><span class="line">2. open后整理</span><br><span class="line">    - 预约处的过期的书放回书架</span><br><span class="line">    - 根据预约表和书架的情况取书到预约处，为指定用户保留五天并删除预约表中记录</span><br><span class="line">3. 开馆</span><br><span class="line">    - 查询</span><br><span class="line">        - 根据`Type`查询书架或漂流角</span><br><span class="line">    - 借书</span><br><span class="line">        - 先判断是否可从书架中取出</span><br><span class="line">        - 再根据用户持书情况判断此书的归属，借书成功时设定还书期限</span><br><span class="line">    - 预约</span><br><span class="line">        - 非正式书籍不可预约</span><br><span class="line">        - 根据持书情况判断是否允许该预约，预约成功则预约请求加入预约表</span><br><span class="line">    - 还书</span><br><span class="line">        - 还书立即成功，需要判断是否逾期</span><br><span class="line">    - 取书</span><br><span class="line">        - 预约处查询，若为其保存且是要取的书，则取书成功，删除预约表对应记录，确定还书期限</span><br><span class="line">        - 否则失败</span><br><span class="line">    - 续借</span><br><span class="line">        - 还书期限前5天内才可续借，若有对该书的预约且书架上无书则失败</span><br><span class="line">        - 续借成功则还书期限延长30天</span><br><span class="line">    - 捐献</span><br><span class="line">        - 一定成功，直接放入漂流角</span><br><span class="line"></span><br><span class="line"><span class="params">##</span> hw15</span><br><span class="line"></span><br><span class="line">0. - 新增用户信用分（信用分可查询）</span><br><span class="line">    - 初始为10，上限20</span><br><span class="line">    - 信用分为负，不允许借书（扣在借还处）、预约、续借</span><br><span class="line">    - 按时还书+1，逾期后**立刻**-2</span><br><span class="line">    - 未按时取书-3</span><br><span class="line">    - 捐赠图书+2，变为正式书籍再+2</span><br></pre></td></tr></table></figure><p>第一次设计时就采用了将管理操作分为开馆、闭馆、日常操作三个部分，并且使用单例模式来实现对于图书馆的管理。图书馆中包括书架、借还处、预约处以及用户数据等信息。设置<code>Appointment</code>类记录单次预约信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Library</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Library library;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">BookShelf</span> <span class="variable">bs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookShelf</span>(LibrarySystem.SCANNER.getInventory());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">BorrowAndReturnOffice</span> <span class="variable">bro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BorrowAndReturnOffice</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AppointmentOffice</span> <span class="variable">ao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppointmentOffice</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Library</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Library <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (library == <span class="literal">null</span>) &#123;</span><br><span class="line">            library = <span class="keyword">new</span> <span class="title class_">Library</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> library;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            LibraryCommand&lt;?&gt; command = LibrarySystem.SCANNER.nextCommand();</span><br><span class="line">            <span class="keyword">if</span> (command == <span class="literal">null</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (command.getCmd().equals(<span class="string">&quot;OPEN&quot;</span>)) &#123;</span><br><span class="line">                open();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.getCmd().equals(<span class="string">&quot;CLOSE&quot;</span>)) &#123;</span><br><span class="line">                close();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                process((LibraryRequest) command.getCmd());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(LibraryRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>其实从文字版建模可以看出，我对预约请求的处理由“不许重复预约”（此时题目要求没有对管理策略进行限制）变化为“只要条件满足就允许”，也算是根据需求的变化而不断调整架构设计的:一个写照了。</p><p>其他的内容就是不断添加新的功能，比如捐赠、图书升级、续借、信用分等，然后在原有的基础上新增漂流角、进行修改。</p><p>比如对<code>User</code>类的属性进行了适当的修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;LibraryBookId, Integer&gt; books; <span class="comment">// value值为还书期限</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> bookB; <span class="comment">// 是否持有B类书籍 </span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> bookBU; <span class="comment">// 是否持有BU类书籍</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> credit;</span><br></pre></td></tr></table></figure><p>并增加续借、信用分等的处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">renew</span><span class="params">(LibraryBookId bookId, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">returnDue</span> <span class="operator">=</span> books.get(bookId);</span><br><span class="line">    books.put(bookId, returnDue + day);</span><br><span class="line">    <span class="keyword">return</span> returnDue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeCredit</span><span class="params">(<span class="type">int</span> change)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (credit + change &gt; <span class="number">20</span>) &#123; credit = <span class="number">20</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; credit += change; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><hr><p>给预约请求类<code>Appointment</code>增加<code>order</code>属性以决定分配书籍顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Appointment</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> order;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> User user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LibraryBookId bookId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Appointment</span><span class="params">(User user, LibraryBookId bookId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.order = count++;</span><br><span class="line">        <span class="built_in">this</span>.user = user;</span><br><span class="line">        <span class="built_in">this</span>.bookId = bookId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在开馆前整理时，对预约请求进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Appointment&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(requestSet);</span><br><span class="line">tmp.sort((o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (o1.equals(o2) || o1.getOrder() == o2.getOrder()) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> Long.compare(o1.getOrder(), o2.getOrder());</span><br><span class="line">&#125;);</span><br><span class="line">tmp.removeIf(...);</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><hr><p>新增属性<code>returnForm</code>来判断每天闭馆时哪些图书逾期，以修改对应用户信用分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;Map&lt;String, Integer&gt;&gt; returnForm = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">500</span>);</span><br><span class="line"><span class="comment">// key为用户id，value为应还书籍数量</span></span><br><span class="line"><span class="comment">// 输入事件在 [2024-01-01] 至 [2024-12-31] 之间发生</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Library</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; ++i) &#123; returnForm.add(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">(LocalDate date)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> <span class="built_in">this</span>.date + <span class="number">1</span>; day &lt; date.getDayOfYear(); ++day) &#123;</span><br><span class="line">        returnForm.get(day).forEach((key, value) -&gt; users.get(key).changeCredit(-<span class="number">2</span> * value));</span><br><span class="line">    &#125; <span class="comment">// 日期不连续，开馆时也要检查</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(LocalDate date)</span> &#123;</span><br><span class="line">    <span class="comment">// 闭馆时检查今天应该收回哪些书籍</span></span><br><span class="line">returnForm.get(<span class="built_in">this</span>.date).forEach((key, value) -&gt; users.get(key).changeCredit(-<span class="number">2</span> * value));</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">然后进行以下操作时记得更新 returnForm</span></span><br><span class="line"><span class="comment">borrowBook, returnBook, pickBook, renewBook</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="思维演进">思维演进</h2><h3 id="架构设计">架构设计</h3><p>从先导课到如今 oo 正课迎来尾声，从开始时对 Java 编程的学习，到体会和学习面向对象的设计思想，我的确收获颇深，也算是和课程的名字（面向对象设计与构造）相符了吧。</p><p>在 Unit1 中，我接触到了层次化设计的思想，学习了递归下降这样的实践方法。除了重新捡起先导课 Java 语法的知识，抽象问题的能力和架构设计的感觉也逐渐从无到有地发展起来。本学期的唯一一次大重构也发生在这个单元。总的来说，这单元的学习给我打开了面向对象设计的大门，让我了解和学习了许多结构和层次的思想。</p><p>在 Unit2 中，接触到了多线程设计的问题。同时这一时期，操作系统课也了解了些许相关的知识。不过由于是第一次建立起对多线程运行机制的认识，这单元的迭代作业可谓是至暗时刻。在无数次 debug 以及动手实现影子电梯之后，终于在这个单元快要结束的时候，我才对各个线程和类之间如何交互、如何保证安全性有了很清晰的认知，只是可惜两次作业中的影子电梯没能检查出所有的线程安全问题、没能安全通过这个单元，也算是一个遗憾了。</p><p>在 Unit3 中，接触到了契约式设计，感觉这个思想还是挺好的，然后也学到了 JML 对于 JUnit 测试的帮助。</p><p>在 Unit4 中，则是接触了正向建模开发这一思想。在这单元的迭代作业中，使用的文字版建模让我很快完成了每次任务。在写代码之前进行总体的架构设计、并在实现过程中不断改进，确实是提高效率、减缓代码屎山化的不二选择。</p><h3 id="测试">测试</h3><p>很惭愧，这个学期没有搭建一个自己的评测机，大部分时候是白嫖其他同学的评测机，然后自己再手搓数据进行压力测试、反复阅读指导书和代码测试 Corner Case 。</p><p>学习 oo 之前对测试的认识就是简答地查看测试用例的结果是否正确，但之后发现测试是很丰富的，包括主要接触到的黑箱测试、白箱测试，以及单元测试、集成测试、系统测试等等。感触最深的还是 Unit3 对于 JML 规格的学习，这种测试方法在契约式设计时对于代码的正确性检查应该是很有帮助的。</p><h2 id="课程收获">课程收获</h2><p>不管怎么说，还是顺利结束了这门声名远扬的课程的学习。虽然感觉最后没有实现幻想中的完全胜利，也没有像一些同学收获那么多，但还是学到了一些或感兴趣或有用的知识和思想——层次化设计、多线程、契约式设计等等。虽然熬夜重构第二次作业时因拙劣的架构和不熟悉的语法特性而破防，虽然费了很多心思写的影子电梯还是被测出了 bug ……但更能抗压了，<s>更能 debug 了</s>。如果重新来过可能结局会好那么一点，不过过程总是这样的。失败总是贯穿始终，遗憾才是常态，就这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> BUAA面向对象设计与构造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OO-2024-Unit3</title>
      <link href="/803f19a7.html"/>
      <url>/803f19a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言-唉-jml">前言——唉，JML</h2><p>本单元的主题为<strong>基于规格</strong>的层次化设计，相较于前两个单元的问题抽象与分解、并发程序设计，这单元的难度算是降低了不少吧——所有的方法与接口都由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>规格给出，只需要根据约定、将功能一一实现即可（暂不考虑程序性能的前提下）。</p><p>在我看来，其实不用太纠结于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>这里有什么毛病，那里有什么毛病，<s>虽然有时看起来确实很滑稽</s>（比如由于其形式化的描述，费了老半天劲写出来的东西自然语言一句话就讲明白了），最主要的一点还是去感受<strong>契约式设计</strong>的魅力（<s>见仁见智把</s>）。</p><p>规格设计者（架构师）基于规格和需要实现的业务，定义一个类所需管理的数据及其需要满足的约束和实现不同作用的方法；而程序员则遵循对每个对象和方法的要求，只需聚焦于具体方法的实现。当然在保证没有二义性的前提下，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>大篇大篇的数理逻辑表述确实又臭又长（所以这学期助教们对用于教学的JML的简化工作确实挺好的）。不过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>这样的形式化的表述，在另一方面确实有利于对代码进行各种验证和测试：</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="monospace">p</mi><mi mathvariant="monospace">r</mi><mi mathvariant="monospace">e</mi><mtext>-</mtext><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">o</mi><mi mathvariant="monospace">n</mi><mi mathvariant="monospace">d</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">o</mi><mi mathvariant="monospace">n</mi><mo>→</mo><mi mathvariant="monospace">p</mi><mi mathvariant="monospace">o</mi><mi mathvariant="monospace">s</mi><mi mathvariant="monospace">t</mi><mtext>-</mtext><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">o</mi><mi mathvariant="monospace">n</mi><mi mathvariant="monospace">d</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">o</mi><mi mathvariant="monospace">n</mi><mtext> </mtext><mtext> </mtext><mo>&amp;</mo><mo>&amp;</mo><mtext> </mtext><mtext> </mtext><mi mathvariant="monospace">n</mi><mi mathvariant="monospace">o</mi><mtext> </mtext><mi mathvariant="monospace">s</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">d</mi><mi mathvariant="monospace">e</mi><mtext>-</mtext><mi mathvariant="monospace">e</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">f</mi><mi mathvariant="monospace">e</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">s</mi></mrow><annotation encoding="application/x-tex">\tt pre\text{-}condition \to post\text{-}condition \, \, \And\And \, \, no \, side\text{-}effects</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9166599999999999em;vertical-align:-0.22222em;"></span><span class="mord"><span class="mord mathtt">p</span><span class="mord mathtt">r</span><span class="mord mathtt">e</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathtt">c</span><span class="mord mathtt">o</span><span class="mord mathtt">n</span><span class="mord mathtt">d</span><span class="mord mathtt">i</span><span class="mord mathtt">t</span><span class="mord mathtt">i</span><span class="mord mathtt">o</span><span class="mord mathtt">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathtt">p</span><span class="mord mathtt">o</span><span class="mord mathtt">s</span><span class="mord mathtt">t</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathtt">c</span><span class="mord mathtt">o</span><span class="mord mathtt">n</span><span class="mord mathtt">d</span><span class="mord mathtt">i</span><span class="mord mathtt">t</span><span class="mord mathtt">i</span><span class="mord mathtt">o</span><span class="mord mathtt">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mbin">&amp;</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">&amp;</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathtt">n</span><span class="mord mathtt">o</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathtt">s</span><span class="mord mathtt">i</span><span class="mord mathtt">d</span><span class="mord mathtt">e</span><span class="mord text"><span class="mord">-</span></span><span class="mord mathtt">e</span><span class="mord mathtt">f</span><span class="mord mathtt">f</span><span class="mord mathtt">e</span><span class="mord mathtt">c</span><span class="mord mathtt">t</span><span class="mord mathtt">s</span></span></span></span></span></span></p><p>所以在实际项目开发过程中，感觉自然语言和规格语言并不应该是相斥的，不是只能有一个存在。<s>（教学中只给JML并要求能看懂，倒也能理解）</s></p><p>还有一点要说的是，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>描述的规格是我们希望我们管理的数据会产生什么样的行为/变化，在实际实现的过程中我们不应逐字逐句翻译<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>（一些时候无法满足性能要求甚至<s>难以翻译</s>），而应采用合适的算法、数据结构，以及将方法的逻辑拆解成小的功能模块；另外，如果我们要写出一个已实现的方法对应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>（虽然感觉这个行为很难评），也不能一句一句翻译，比如这个方法用了某种算法，那使用的算法的细节并不是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>或者说规格关心的，关注的是数据或者对象状态的变化。比如下面这个求解字符串莱文斯坦距离的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Levenshtein</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] dp;</span><br><span class="line">    <span class="comment">/*@ requires str1 != null &amp;&amp; str2 != null;</span></span><br><span class="line"><span class="comment">      @ ensures \result ==</span></span><br><span class="line"><span class="comment">      @     ((str1.length() == str2.length() &amp;&amp; (\forall int i; 0 &lt;= i &amp;&amp; i &lt; str1.length(); str1.charAt(i) == str2.charAt(i))) ||</span></span><br><span class="line"><span class="comment">      @      (str1.length() == str2.length() - 1 &amp;&amp; (\forall int i; 0 &lt;= i &amp;&amp; i &lt; str1.length(); str1.charAt(i) == str2.charAt(i))) ||</span></span><br><span class="line"><span class="comment">      @      (str1.length() - 1 == str2.length() &amp;&amp; (\forall int i; 0 &lt;= i &amp;&amp; i &lt; str2.length(); str1.charAt(i) == str2.charAt(i))));</span></span><br><span class="line"><span class="comment">      @*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(String str1, String str2)</span> &#123;<span class="comment">//使用某些方法帮助简化JML</span></span><br><span class="line">        <span class="keyword">if</span> (str1 == <span class="literal">null</span> || str2 == <span class="literal">null</span>) &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span> (str1.equals(str2)) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> str1.substring(<span class="number">0</span>, str1.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (tmp.equals(str2)) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        tmp = str2.substring(<span class="number">0</span>, str2.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> str1.equals(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*@ public normal_behavior</span></span><br><span class="line"><span class="comment">      @ requires src != null &amp;&amp; dst != null &amp;&amp; !src.equals(dst);</span></span><br><span class="line"><span class="comment">      @ ensures (\exist String[] PathM;</span></span><br><span class="line"><span class="comment">                pathM.length &gt;= 2 &amp;&amp; pathM[0].equals(src) &amp;&amp; pathM[pathM.length - 1].equals(dst) &amp;&amp;</span></span><br><span class="line"><span class="comment">                (\forall int i; 1 &lt;= i &amp;&amp; i &lt; pathM.length; check(pathM[i - 1], pathM[i]));</span></span><br><span class="line"><span class="comment">                (\forall String[] Path; Path.length &gt;= 2 &amp;&amp; path[0].equals(src) &amp;&amp; path[path.length - 1].equals(dst) &amp;&amp;</span></span><br><span class="line"><span class="comment">                 (\forall int i; 1 &lt;= i &amp;&amp; i &lt; path.length; check(path[i - 1], path[i]));</span></span><br><span class="line"><span class="comment">                 (\sum int i; 0 &lt;= i &amp;&amp; i &lt; path.length; 1) &gt;= (\sum int i; 0 &lt;= i &amp;&amp; i &lt; pathM.length; 1) &amp;&amp;</span></span><br><span class="line"><span class="comment">                 \result == (\sum int i; 1 &lt;= i &amp;&amp; i &lt; pathM.length; 1)));</span></span><br><span class="line"><span class="comment">      @ also</span></span><br><span class="line"><span class="comment">      @ public normal_behavior</span></span><br><span class="line"><span class="comment">      @ requires src != null &amp;&amp; dst != null &amp;&amp; src.equals(dst);</span></span><br><span class="line"><span class="comment">      @ ensures \result == 0</span></span><br><span class="line"><span class="comment">      @*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">solve</span><span class="params">(String src, String dst)</span> &#123;</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">int</span>[src.length() + <span class="number">1</span>][dst.length() + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; src.length(); ++i) &#123;</span><br><span class="line">            dp[i + <span class="number">1</span>][<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dst.length(); ++i) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i + <span class="number">1</span>] = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; src.length(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; dst.length(); ++j) &#123;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = Math.min(dp[i][j + <span class="number">1</span>], dp[i + <span class="number">1</span>][j]) + <span class="number">1</span>;</span><br><span class="line">                dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = Math.min(dp[i][j] + <span class="number">1</span>, dp[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (src.charAt(i) == dst.charAt(j)) &#123;</span><br><span class="line">                    dp[i + <span class="number">1</span>][j + <span class="number">1</span>] = Math.min(dp[i + <span class="number">1</span>][j + <span class="number">1</span>], dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[src.length()][dst.length()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于测试">关于测试</h2><h3 id="黑盒测试与白盒测试">黑盒测试与白盒测试</h3><p>黑盒测试：</p><ul><li>基于代码的规格说明和功能需求进行的测试</li><li>作为测试人员，我们不需要了解代码的内部结构或实现细节，而是将其视为一个黑盒子，只关注其输入和输出之间的关系，检验对错（设置各种<code>Corner Cases</code>以及压力测试等）</li><li>这类测试主要是用于验证代码的行为是否符合预期</li><li>这单元我们根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>规格进行的测试就属于黑盒测试</li></ul><p>白盒测试：</p><ul><li>基于代码的内部结构和实现细节进行的测试</li><li>我们需要了代码内部逻辑和使用的算法，并针对地设计测试用例</li><li>通常需要关注代码覆盖率、分支覆盖率等各种覆盖率，比如上学期<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mi mathvariant="script">O</mi><mi mathvariant="script">P</mi></mrow><annotation encoding="application/x-tex">\mathcal{OOP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.08222em;">P</span></span></span></span></span>要求的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">U</mi><mi mathvariant="script">n</mi><mi mathvariant="script">i</mi><mi mathvariant="script">t</mi></mrow><annotation encoding="application/x-tex">\mathcal{JUnit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal" style="margin-right:0.09931em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span></span></li></ul><h3 id="其他多种测试">其他多种测试</h3><ol><li>单元测试<ul><li>单元测试是针对软件中的最小可测试单元进行的测试，通常是代码中的一个函数、方法或类。</li><li>单元测试的目标是验证每个单元的功能是否符合预期，以确保代码的每个部分都能正常工作。</li><li>例如，本单元对社交网络的单元测试可以包括对各种增加/删除元素、查询、发送信息等功能进行测试，每个功能被视为一个单元。</li></ul></li><li>功能测试<ul><li>功能测试是测试软件的功能是否按照规格说明和用户需求的预期工作。</li><li>在功能测试中，我们需要模拟用户操作，验证软件的各项功能是否符合预期，包括输入验证、功能流程、界面交互等。</li><li>例如，对于一个电子商务网站，功能测试可以包括用户注册、浏览商品、下订单、支付等功能的测试。</li></ul></li><li>集成测试<ul><li>集成测试是测试软件中不同模块或组件之间的交互和集成是否正常。</li><li>在集成测试中，我们需要将各个模块组合起来，并测试它们之间的接口和交互是否符合设计要求。</li><li>例如，对于一个社交网络应用，集成测试可以包括用户登录、发布动态、评论、点赞等功能的整体测试。</li></ul></li><li>压力测试<ul><li>压力测试是测试软件在负载过高或资源不足的情况下是否能够正常工作。</li><li>在压力测试中，我们可以模拟大量用户同时访问系统或者增加系统负载，以测试软件的性能、稳定性和可靠性。</li><li>例如，对于一个在线游戏服务器，压力测试可以模拟大量玩家同时在线、进行游戏，以测试服务器是否能够承受住这样的负载。或者对于我们<s>喜闻乐见</s>的互测来说，生成各种极限数据。</li></ul></li><li>回归测试<ul><li>回归测试是在软件发生变更后重新执行之前的测试用例，以确保变更不会对软件的其他部分造成影响。</li><li>在回归测试中，我们需要针对变更的部分以及相关联的功能重新执行测试用例，并验证软件的整体功能是否受到影响。</li><li>例如，当我们每次修复bug或者进行迭代后，也要使用之前已经通过的数据对代码进行测试，以确保bug修复没有引入新的问题😃</li></ul></li></ol><p>总之，这些测试类型在软件或项目开发过程中起着不同的作用，我们可以通过综合运用有效地提高软件的质量、可靠性、可维护性。</p><h3 id="数据构造策略">数据构造策略</h3><p>除了使用大佬们提供的评测机，我构造数据的主要策略是，针对一些需要优化的指令进行压力测试。</p><p>比如第二次互测时，对于指令<code>queryTagValueSum</code>，我构造数据的具体策略如下：</p><ol><li><code>load_network</code>（100人）</li><li><code>at 1 1</code>（给<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">person1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord">1</span></span></span></span>加上Tag）</li><li>增加<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个人并与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>e</mi><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">person1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord">1</span></span></span></span>连边，然后连同前面的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>99</mn></mrow><annotation encoding="application/x-tex">99</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">9</span></span></span></span>个人，一块加入上述Tag中</li><li>最后剩下的操作全部执行<code>qtvs</code></li></ol><p>简单计算可知，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>取约<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>725</mn></mrow><annotation encoding="application/x-tex">725</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span><span class="mord">2</span><span class="mord">5</span></span></span></span>时压力最大（针对双重循环来说）。</p><h2 id="架构设计">架构设计</h2><p>本单元的主要任务是实现一个简单的社交网络。</p><p>具体的<code>UML</code>类图如下</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/hw11.png" alt="hw11"></p><p>虽然基本上规格都由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>给出了，但它只是定义了方法或者接口的外部可感知行为及其约束，以及需要管理的数据所要满足的要求，实际编写代码时，我们需要灵活使用不同算法和数据结构，才能在保证性能的同时达成想要的效果。</p><p>在本单元作业实现中，我新建了<code>Graph</code>类，使用<strong>邻接表</strong>存储信息，将绝大部分维护信息的工作从<code>Network</code>类中分出来，<code>Network</code>只负责实现各种业务的接口。</p><p>其他的部分如<code>Tag</code>、<code>Person</code>、<code>Message</code>和异常类则由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>规定好了，总体结构没有什么特别的地方。</p><h3 id="时间复杂度分析">时间复杂度分析</h3><p>本单元要求维护一张关系图（初始为空），并支持修改和查询操作（指令数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>⩽</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup></mrow><annotation encoding="application/x-tex">N \leqslant 10^4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8200000000000001em;vertical-align:-0.13667em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span></span></span></span>）。为了在时限内通过所有数据，我们需要保证每种操作的时间复杂度<strong>最多</strong>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，在保证正确性的基础上再尝试进行复杂度优化或常数优化。</p><p>首先是最基本的<code>add relation</code>和<code>modify relation</code>，其实可以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>实现，但是为了避免<code>queryTripleSum</code>、<code>queryTagValueSum</code>等操作的多重循环，需要在修改关系的时候对相关的信息进行维护，这样上述的查询操作就可以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Graph.addRelation()</span></span><br><span class="line"><span class="comment">//维护三元环, deleteRelation时同理</span></span><br><span class="line"><span class="keyword">if</span> (acquaintance.get(id1).size() &gt; acquaintance.get(id2).size()) &#123;</span><br><span class="line"><span class="comment">//一点常数优化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> o : acquaintance.get(id2)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (acquaintance.get(id1).contains(o)) &#123;</span><br><span class="line">            tripleNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> o : acquaintance.get(id1)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (acquaintance.get(id2).contains(o)) &#123;</span><br><span class="line">            tripleNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>TagValueSum</code>的维护，与其费劲心思在<code>Person</code>类中维护信息，我选择了比较简单的实现，直接在<code>Network</code>中记录所有出现的Tag，修改所有满足条件的Tag即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tag.addPerson(), 删人同理</span></span><br><span class="line"><span class="keyword">for</span> (Person p : persons.values()) &#123; valueSum += <span class="number">2</span> * person.queryValue(p); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Network.addRelation(), modify同理</span></span><br><span class="line"><span class="keyword">for</span> (MyTag tag : tags) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tag.hasPerson(persons.get(id1)) &amp;&amp; tag.hasPerson(persons.get(id2))) &#123;</span><br><span class="line">        tag.update(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tag.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    valueSum += <span class="number">2</span> * value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>queryTagAgeVar</code>，计算方差原本是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>的，不过可以在<code>addPersonToTag</code>、<code>delPersonFromTag</code>时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>维护<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo><mi>A</mi><mi>g</mi><mi>e</mi><mo separator="true">,</mo><mo>∑</mo><mi>A</mi><mi>g</mi><msup><mi>e</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sum Age,\sum Age^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064118em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，然后就可以做到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>查询方差。</p><p>对于<code>queryShortestPath</code>，实际就是<strong>01最短路</strong>，直接<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">B</mi><mi mathvariant="script">F</mi><mi mathvariant="script">S</mi></mrow><annotation encoding="application/x-tex">\mathcal{BFS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.03041em;">B</span><span class="mord mathcal" style="margin-right:0.09931em;">F</span><span class="mord mathcal" style="margin-right:0.075em;">S</span></span></span></span></span>即可（也可以双向，减小常数），复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span>为边数小于指令数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findShortestPath</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (s == t) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; dis = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    dis.put(s, <span class="number">0</span>);</span><br><span class="line">    dis.put(t, <span class="number">0</span>);</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; flag = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    flag.put(s, <span class="number">0</span>);</span><br><span class="line">    flag.put(t, <span class="number">1</span>);</span><br><span class="line">    Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();<span class="comment">//distance小的先进先出</span></span><br><span class="line">    <span class="keyword">if</span> (acquaintance.get(s).size() &gt; acquaintance.get(t).size()) &#123;<span class="comment">//可能的常数优化（</span></span><br><span class="line">        q.add(t);</span><br><span class="line">        q.add(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        q.add(s);</span><br><span class="line">        q.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> q.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> flag.get(u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : acquaintance.get(u)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis.containsKey(v)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag.get(v) != f) &#123;<span class="comment">//搜索交汇</span></span><br><span class="line">                    <span class="keyword">return</span> dis.get(u) + dis.get(v);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dis.put(v, dis.get(u) + <span class="number">1</span>);</span><br><span class="line">            flag.put(v, f);</span><br><span class="line">            q.add(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>queryBestAcquaintance</code>，其实<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>查询也没问题，不过由于<code>queryCoupleSum</code>的存在，基本上要求必须在常数时间内实现<code>qba</code>。</p><p>当然我们还是可以再加人/删人的时候<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>维护最大值，不过我选择了用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">T</mi><mi mathvariant="script">r</mi><mi mathvariant="script">e</mi><mi mathvariant="script">e</mi><mi mathvariant="script">M</mi><mi mathvariant="script">a</mi><mi mathvariant="script">p</mi></mrow><annotation encoding="application/x-tex">\mathcal{TreeMap}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathcal">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span></span></span>去存<code>acquaintance</code>相关信息，这样就可以降低复杂度至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(logN)/O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>。</p><p>由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">T</mi><mi mathvariant="script">r</mi><mi mathvariant="script">e</mi><mi mathvariant="script">e</mi><mi mathvariant="script">M</mi><mi mathvariant="script">a</mi><mi mathvariant="script">p</mi></mrow><annotation encoding="application/x-tex">\mathcal{TreeMap}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.25417em;">T</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">e</span><span class="mord mathcal">M</span><span class="mord mathdefault">a</span><span class="mord mathdefault">p</span></span></span></span></span>只能以键值进行排序，研究了一阵子不得以我只能以一种很不优雅的方式自定义了比较器😕</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Integer, Acquaintance&gt; valueById;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Acquaintance, Integer&gt; value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBestAcquaintance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value.firstEntry().getKey().getPersonId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Acquaintance.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Acquaintance</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Acquaintance&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> personId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Acquaintance o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == o.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(personId, o.personId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o.value, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他指令基本上根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>来就好，除了维护整张图关系的并查集，基本没有使用算法和数据结构进行优化的必要了。</p><h3 id="并查集的延迟重建">并查集的延迟重建</h3><p>本来我们可以使用<strong>路径压缩+启发式合并</strong>的并查集，做到每个关系修改和查询（<code>isCircle</code>）操作的平均时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\alpha(N))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span>（可以认为是很小的常数），同时<code>queryBlockSum</code>也可以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>维护和查询。</p><p>不过有了<code>modifyRelation</code>删边操作，我们不得不在某些时候对并查集进行重建。</p><ol><li><p>如果是每次判断需要删边时无脑全部重建，则很大可能会被卡烂掉（常数+评测机波动）</p></li><li><p>每次删边时部分重建，常数小了很多，不过很多时候不太必要（因为只有查询的时候才需要准确的<code>BlockSum</code>和<code>isCircle</code>）</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Graph.deleteRelation()</span></span><br><span class="line">HashSet&lt;Integer&gt; visited = <span class="keyword">new</span> <span class="title class_">Hashset</span>&lt;&gt;();</span><br><span class="line">father.put(id1, id1);</span><br><span class="line">dfs(id1, id1, visited);</span><br><span class="line">rank.put(id1, visited.size());</span><br><span class="line"><span class="keyword">if</span> (!visited.contains(id2)) &#123;</span><br><span class="line">    father.put(id2, id2);</span><br><span class="line">    visited.clear();</span><br><span class="line">    dfs(id2, id2, visited);</span><br><span class="line">    rank.put(id2, visited.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//dfs</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> fa, <span class="type">int</span> u, Hashset&lt;Integer&gt; visited)</span> &#123;</span><br><span class="line">    visited.add(u);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : acquaintance.get(u)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited.contains(v)) &#123;</span><br><span class="line">            father.put(v, fa);</span><br><span class="line">            rank.put(v, <span class="number">1</span>);</span><br><span class="line">            dfs(fa, v, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者删边时设置脏位，需要查询时才重建并查集。不过这样的话，当修改和查询指令轮流到来时，这个方法会和<code>1</code>一样拉（因为会无脑全部重建）</p></li></ol><hr><p>结合以上思路我们可以设计一种带有<strong>精确</strong>脏位的并查集（思路来自讨论区<a href="http://oo.buaa.edu.cn/assignment/521/discussion/1562">jhz同学的分享</a>）</p><p>具体来说，我们可以将原来标记整个图的脏位扩展为<strong>对每个联通块</strong>进行脏位标记，设置<code>dirty</code>为所有被删边操作污染的父节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Integer&gt; dirty;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Graph.deleteRelation()</span></span><br><span class="line"><span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> find(id1);</span><br><span class="line"><span class="keyword">if</span> (!dirty.contains(f)) &#123;<span class="comment">//不要重复了</span></span><br><span class="line">    dirty.add(f);</span><br><span class="line">    blockNum--;<span class="comment">//先不考虑这个联通块的贡献</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个行为的意义是，进行了此次删边操作后，以f为父节点的联通块内的具体情况我们将不得而知，</span></span><br><span class="line"><span class="comment">这个联通块内所有点的关系信息是“不确定”的，需要查询时我们就对这些点进行关系的重建</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>重建的步骤为</p><ol><li>若<code>dirty</code>不为空，则所有的父节点在<code>dirty</code>中的点是我们需要重建的点</li><li>从需要重建的点的集合中开始<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">D</mi><mi mathvariant="script">F</mi><mi mathvariant="script">S</mi></mrow><annotation encoding="application/x-tex">\mathcal{DFS}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="mord mathcal" style="margin-right:0.09931em;">F</span><span class="mord mathcal" style="margin-right:0.075em;">S</span></span></span></span></span>，重建这部分并查集</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rebuild</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dirty.isEmpty()) &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; needToBuild = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> id : acquaintance.keySet()) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            一定要先找出所有要重建的点，而不能边重建边判断哪些点需要重建，</span></span><br><span class="line"><span class="comment">            因为重建到一半的并查集的信息是“不稳定的”，</span></span><br><span class="line"><span class="comment">            重建的过程中再去判断点是否要重建，就可能会漏掉部分点</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (dirty.contains(find(id))) &#123;<span class="comment">//父节点被标记</span></span><br><span class="line">                needToBuild.add(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Integer&gt; visited = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> id : needToBuild) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited.contains(id)) &#123;</span><br><span class="line">                father.put(id, id);</span><br><span class="line">                rank.put(id, dfs(id, id, visited));</span><br><span class="line">                blockNum++;<span class="comment">//有了一个联通块</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dirty.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> fa, <span class="type">int</span> u, HashSet&lt;Integer&gt; visited)</span> &#123;</span><br><span class="line">    visited.add(u);</span><br><span class="line">    <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : acquaintance.get(u)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited.contains(v)) &#123;</span><br><span class="line">            father.put(v, fa);</span><br><span class="line">            rank.put(v, <span class="number">1</span>);</span><br><span class="line">            cnt += dfs(fa, v, visited);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;<span class="comment">//返回联通块的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是对于查询操作，<code>queryBlockSum</code>我们需要调用<code>rebuild</code>。</p><p>而对于<code>isCircle</code>，需要分以下几种情况讨论：</p><ol><li>若<code>!dirty.contains(f1) &amp;&amp; !dirty.contains(f2)</code>，则这两个联通块都未被污染，正常判断即可</li><li>若<code>dirty.contains(f1) &amp;&amp; dirty.contains(f2)</code>，则此时对我们来说这两个联通块的状态是“薛定谔的”，需要重建</li><li>而若两个父亲只有一个脏位被标记，这是我们<strong>立即得出被查询的两个点是不联通</strong>的（因为显然这两个点父节点不一样）</li></ol><p>剩下的就是正常的并查集的相关操作，不过最后还有一点需要注意<s>血泪教训</s>：</p><p>就是并查集合并的时候，需要优先将没有脏位的父节点合并到有脏位的父节点，否则这个联通块的脏位信息是不准确的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> id1, <span class="type">int</span> id2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">fa1</span> <span class="operator">=</span> find(id1);</span><br><span class="line">    <span class="type">int</span> <span class="variable">fa2</span> <span class="operator">=</span> find(id2);</span><br><span class="line">    <span class="keyword">if</span> (fa1 != fa2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dirty.contains(fa1) == dirty.contains(fa2)) &#123;</span><br><span class="line">            <span class="comment">//启发式合并</span></span><br><span class="line">            <span class="keyword">if</span> (rank.get(fa1) &gt; rank.get(fa2)) &#123;</span><br><span class="line">                father.put(fa2, fa1);</span><br><span class="line">                rank.put(fa1, rank.get(fa1) + rank.get(fa2));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                father.put(fa1, fa2);</span><br><span class="line">                rank.put(fa2, rank.get(fa2) + rank.get(fa1));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dirty.contains(fa1)) &#123;</span><br><span class="line">            father.put(fa2, fa1);</span><br><span class="line">            rank.put(fa1, rank.get(fa1) + rank.get(fa2));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            father.put(fa1, fa2);</span><br><span class="line">            rank.put(fa2, rank.get(fa2) + rank.get(fa1));</span><br><span class="line">        &#125;</span><br><span class="line">        blockNum--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于重建操作只在需要的时候进行，并且我们精确了重建的点的范围，无论对于什么数据，这种方法相较于前面几种都是只优不劣的。</p><h3 id="容器类的选择和轮子的使用">容器类的选择和轮子的使用</h3><p>由于本单元维护的是一个社交网络，每个对象的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mi mathvariant="script">d</mi></mrow><annotation encoding="application/x-tex">\mathcal{Id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mord mathdefault">d</span></span></span></span></span>是独一无二的，且取值范围是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mi mathvariant="script">n</mi><mi mathvariant="script">t</mi></mrow><annotation encoding="application/x-tex">\mathcal{Int}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span></span></span></span></span>，所以我们可以很自然地想到用使用<code>HashMap</code>，建立<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">I</mi><mi mathvariant="script">d</mi></mrow><annotation encoding="application/x-tex">\mathcal{Id}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.07382em;">I</span><span class="mord mathdefault">d</span></span></span></span></span>到各种属性/对象的映射。</p><p>而对于其他一些不需要这样的映射的对象的集合，则基本来说<code>HashSet</code>是较优的选择（因为对象不重复且可以<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>使用<code>contains</code>）。</p><p>然后对于<code>getReceivedMessages</code>，要求返回前<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>5</mn></mrow><annotation encoding="application/x-tex">5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>个Message，所以不能内部无序的<code>HashMap</code>或<code>HashSet</code>。经过查阅资料和参考讨论区<a href="http://oo.buaa.edu.cn/assignment/527/discussion/1570">czx同学的思路分享</a>，最终选择了基于链表的<code>LinkedList</code>来存储Messages。</p><p>具体操作为：添加Message时使用<code>addFirst</code>方法，删除时使用<code>removeIf</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">    messages.addFirst(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteNotices</span><span class="params">()</span> &#123;</span><br><span class="line">    messages.removeIf(message -&gt; message <span class="keyword">instanceof</span> MyNoticeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于删除上述容器中的特定元素操作，一般而言，我们都会采用迭代器的形式去遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;E&gt; it = collection.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext) &#123;</span><br><span class="line">    <span class="type">E</span> <span class="variable">item</span> <span class="operator">=</span> it.next;</span><br><span class="line">    <span class="keyword">if</span> (check(item)) &#123;</span><br><span class="line">        it.remove();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但其实<code>Collection</code>接口定义了方法<code>removeIf</code>，我们需要实现的删除操作正可以用这个现成的方法来实现，而且看起来十分优雅。下面是<code>removeIf</code>的相关用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span>;</span><br></pre></td></tr></table></figure><p>其中，<code>Predicate</code>是函数式接口，用于表示一个断言，该函数接受一个参数并返回布尔值。在 <code>removeIf</code> 方法中，传入一个 <code>Predicate</code> 类型的参数，表示要移除的元素需要满足的条件。若删除成功则返回真。</p><ol><li><p>可以使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mi mathvariant="script">a</mi><mi mathvariant="script">m</mi><mi mathvariant="script">b</mi><mi mathvariant="script">d</mi><mi mathvariant="script">a</mi></mrow><annotation encoding="application/x-tex">\mathcal{Lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">m</span><span class="mord mathdefault">b</span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span></span></span></span></span>表达式（允许把函数作为一个方法的参数）定义过滤条件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(parameters) -&gt; expression</span></span><br><span class="line"><span class="comment">或</span></span><br><span class="line"><span class="comment">(parameters) -&gt; &#123; statement; &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比如删除所有的NoticeMessage</span></span><br><span class="line">messages.removeIf(message -&gt; message <span class="keyword">instanceof</span> MyNoticeMessage);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除emojiList中emojiHeatList不存在的key</span></span><br><span class="line">emojiList.removeIf(emoji -&gt; !emojiHeatList.containsKey(emoji));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除emojiList中emojiHeatList存在的key（方法引用）</span></span><br><span class="line">emojiList.removeIf(emojiHeatList::containsKey);</span><br></pre></td></tr></table></figure></li><li><p>自定义一个实现<code>Predicate</code>接口的类来定义过滤条件</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt; collection = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">collection.removeIf(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;E&gt;() &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(...)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="性能与bug修复">性能与bug修复</h2><p>本单元一个最大的优化就是实现了并查集的延迟重建功能。</p><p>其实<code>hw9</code>的时候我想着因为有删边，不管怎样处理都要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>，所以直接无脑重建（想的是反正最多是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>E</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(E^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>而且时限<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mi>s</mi></mrow><annotation encoding="application/x-tex">10s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord mathdefault">s</span></span></span></span>），但是由于<code>load_network</code>指令的存在，第一次作业数据范围给的就显得有点大了（虽然后面改小了，虽然强测<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi></mrow><annotation encoding="application/x-tex">T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span></span></span></span>掉的点打赢复活赛了）。所以后面两次作业改成了延迟重建的并查集。</p><p>然后就是<code>hw10</code>强测和互测的bug，其实挺不应该的，<code>queryTagValueSum</code>直接写的双重循环计算。<s>但是我这么做也是有理由的，你听我慢慢狡辩</s>。首先是当时维护<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mi>a</mi><mi>l</mi><mi>u</mi><mi>e</mi><mi>S</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">ValueSum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">u</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span></span></span></span>的过程出了一点麻烦，一直没搞清楚哪里出了问题，并且由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">U</mi><mi mathvariant="script">n</mi><mi mathvariant="script">i</mi><mi mathvariant="script">t</mi></mrow><annotation encoding="application/x-tex">\mathcal{JUnit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal" style="margin-right:0.09931em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span></span>中测也只有两次机会了；然后翻了翻<code>hw9</code>打赢复活赛的点，发现只给了一千条左右的指令，想着课程组还挺良心的嘛，数据确实有梯度😃。</p><p>总之最后还是懒了，没改原来的双重循环，结果强测（一万条指令）和互测人直接被卡晕掉了。<s>这波被课程组狠狠背刺了。</s></p><p><code>hw11</code>互测出了bug，就是上文提到的十分隐蔽的关于延迟重建的并查集的合并细节，收回伏笔了属于是。</p><hr><p>对于规格与实现分离的理解，其实已经体现在架构设计中了。</p><p>设计一些规格之外的方法，辅助业务代码的实现；而这其中又可以灵活采用合适的算法、数据结构等。</p><hr><p>总的来说，这单元做得不是很好吧，本来轻松可以避免的bug没有去做，感觉经历了上个单元电梯的拷打、两次作业费尽心思写影子电梯但最终都没有做到完美，和这单元又碰上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>，整个人有点懒了。</p><p>但是不管怎么说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mi mathvariant="script">O</mi></mrow><annotation encoding="application/x-tex">\mathcal{OO}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.02778em;">O</span></span></span></span></span>课程要进入最后一个单元了，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>e</mi><mi>b</mi><mi>u</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">debug</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mord mathdefault">b</span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>能力（指狼狈地修复bug时）还是一如既往地在线。</p><h2 id="junit测试">JUnit测试</h2><p>上学期<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mi mathvariant="script">O</mi><mi mathvariant="script">P</mi></mrow><annotation encoding="application/x-tex">\mathcal{OOP}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.08222em;">P</span></span></span></span></span>的时候已经品尝过了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">U</mi><mi mathvariant="script">n</mi><mi mathvariant="script">i</mi><mi mathvariant="script">t</mi></mrow><annotation encoding="application/x-tex">\mathcal{JUnit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal" style="margin-right:0.09931em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span></span>，当时感觉是真的鸡肋，也不好写。</p><p>这单元学了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>和怎么对规格进行测试，（<s>虽然可能是装模作样地在测试规格</s>）感觉又还行了。</p><p>主要还是模仿实验课上的代码，使用<code>Parameters</code>生成数据搭建<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">U</mi><mi mathvariant="script">n</mi><mi mathvariant="script">i</mi><mi mathvariant="script">t</mi></mrow><annotation encoding="application/x-tex">\mathcal{JUnit}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal" style="margin-right:0.09931em;">U</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span></span></span></span></span>测试框架，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Parameterized.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetworkTest</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyNetwork myNetwork;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyNetworkTest</span><span class="params">(MyNetwork myNetwork)</span> &#123; <span class="built_in">this</span>.myNetwork = myNetwork; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Parameters</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Collection <span class="title function_">prepareData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">testNum</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        Object[][] objects = <span class="keyword">new</span> <span class="title class_">Object</span>[testNum][];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; testNum; ++k) &#123;</span><br><span class="line">            <span class="comment">//do something, such as generating network by implementation functions</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(objects);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneFuction</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        测试对应方法是否满足规格要求</span></span><br><span class="line"><span class="comment">        如pure, ensures, signals等</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="心得体会">心得体会</h2><p>这单元的学习，算是让我了解到了“契约式编程”这一思想吧，其实这单元照着规格实现代码的时候，我还是感觉挺受用的（雾，然后还是挺期待以后大项目的实践中能够真正接触到它。</p><p>然后其他的体会，前文写了很多，这里就不再说了。</p><p>最后关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">J</mi><mi mathvariant="script">M</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{JML}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78055em;vertical-align:-0.09722em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.18472em;">J</span><span class="mord mathcal">M</span><span class="mord mathcal">L</span></span></span></span></span>，其实我没什么意见，助教们写的推送给我帮助很大，感谢十分用心的助教们。</p>]]></content>
      
      
      <categories>
          
          <category> BUAA面向对象设计与构造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OO-2024-Unit2</title>
      <link href="/f7382931.html"/>
      <url>/f7382931.html</url>
      
        <content type="html"><![CDATA[<h2 id="同步块与锁">同步块与锁</h2><p>在本单元的设计中，考虑到对性能的影响不大（请求数量级为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">10^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>），以及为了更简单地保证共享资源时的线程安全，绝大部分情况下我是用<code>synchronized</code>给方法加锁（即锁住对应实例）。</p><p>其余部分为了实现其他的互斥操作或者线程同步操作，如将进行重置操作后的乘客“遣返”回主请求队列、进行影子电梯模拟、双轿厢离开交换楼层时通知另一个轿厢，则会使用<code>synchronized (...) &#123;&#125;</code>进行上锁。</p><p>需要注意的是，后者加锁方式必须仔细考虑获取锁的时候是否会造成死锁问题，也可以使用<code>ReentrantLock</code>的<code>tryLock()</code>方法避免这一问题，此处先按下不表。</p><p>总之，在进行多线程同步设计时，需要对线程间的协作和资源的共享情况有一个清醒的认知。</p><h2 id="架构设计迭代">架构设计迭代</h2><h3 id="hw5">hw5</h3><h4 id="基本思路">基本思路</h4><p>主要采用了<code>生产者-消费者</code>设计模式，一方面输入线程<code>InputThread</code>不断“生产”请求，另一方面将这些请求经由调度器<code>Dispatcher</code>分发给一个合适的电梯线程<code>Elevator</code>去处理。</p><p>由于这次作业指定了每个乘客乘坐的电梯，故最开始<s>没有单独设计</s><code>Dispatcher</code>，直接分给对应的电梯就好了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainRequestQueue.isEmpty() &amp;&amp; mainRequestQueue.isEnd()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; ++i) &#123;</span><br><span class="line">            requestQueues.get(i - <span class="number">1</span>).setEndFlag(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> mainRequestQueue.getOneRequestAndRemove();</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;<span class="comment">//跳过</span></span><br><span class="line">    &#125;</span><br><span class="line">    requestQueues.get(person.getElevatorId() - <span class="number">1</span>).addRequest(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于电梯的运行策略，采用了主流且效率高的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">L</mi><mi mathvariant="script">O</mi><mi mathvariant="script">O</mi><mi mathvariant="script">K</mi></mrow><annotation encoding="application/x-tex">\mathcal{LOOK}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathcal">L</span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mord mathcal" style="margin-right:0.01445em;">K</span></span></span></span></span>策略，具体流程和实现如下：</p><ul><li>首先规定电梯初始运行方向（由于所有电梯初始停在一楼，故方向设为向上<code>direction = true</code>），然后沿此方向移动</li><li>到达某楼层后，根据电梯内外乘客情况，判断是否需要进行开关门操作<ul><li>如果有人达到目的地（这里为了方便设置了一个以楼层为Key的HashMap来记录），则开门</li><li>如果该楼层有人，方向与电梯相同且不超载，则开门</li></ul></li><li>接着判断电梯中是否还有人，有则继续移动，没有则检查请求队列<ul><li>队列为空，若<code>endFlag</code>为真则电梯停止工作，否则等待请求输入和分配</li><li>不为空，且存在请求的出发地为此时电梯运行的前方，则继续移动；若所有请求都在相反的方向，则调头</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Advice <span class="title function_">getAdvice</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (canOpenForOut() || canOpenForIn()) &#123;</span><br><span class="line">        <span class="keyword">return</span> Advice.OPEN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curNumber != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Advice.MOVE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.requestQueue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.requestQueue.isEnd()) &#123;</span><br><span class="line">                <span class="keyword">return</span> Advice.END;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Advice.WAIT;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (haveSameDirection()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Advice.MOVE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Advice.REVERSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hw6">hw6</h3><h4 id="基本思路">基本思路</h4><p>采用两级调度器进行调度，一级调度器即<code>dispatcher</code>，使用<strong>影子电梯</strong>模拟局部最优解，将请求分给最合适的电梯；二级调度器即电梯运行策略<code>strategy</code>，与之前基本保持不变。（新增<code>RESET</code>动作）</p><p>设置乘客请求达到的顺序<code>order</code>，按照先来后到的顺序进行分配和接送：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.order, person.order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestQueue</span> &#123;<span class="comment">//主请求队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Person&gt; requests;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> PriorityQueue&lt;Person&gt; requestQueue;</span><br></pre></td></tr></table></figure><p>为每个电梯增加一个等待队列<code>waitingQueue</code>，用于暂存重置期间被分配的乘客，重置完成后再将其加入<code>requestQueue</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Person person : waitingQueue) &#123;</span><br><span class="line">    TimableOutput.println(String.format(<span class="string">&quot;RECEIVE-%d-%d&quot;</span>, person.getPersonId(), id));</span><br><span class="line">    requestQueue.add(person);</span><br><span class="line">&#125;</span><br><span class="line">waitingQueue.clear();</span><br></pre></td></tr></table></figure><p>主请求队列end条件变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.endFlag &amp;&amp; resetCount == <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//新增resetCount确保所有reset都已完成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="架构调整">架构调整</h4><p>另外，在进行hw6的bug修复时，借鉴讨论区大佬的思路，对架构进行了一些调整——将电梯的运行状态与线程分离开来，单独设计一个处理器类<code>ProcessingUnit</code>。</p><p>为了读取电梯的状态实现影子电梯的模拟，电梯的运行状态成了电梯和调度器的<strong>共享资源</strong>。所以为了整体架构和各部分职责看起来更清晰明了，选择将电梯的运行状态与线程分离开来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Elevator</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ProcessingUnit processingUnit;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Elevator</span><span class="params">(ProcessingUnit processingUnit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processingUnit = processingUnit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (processingUnit.execute() == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hw7">hw7</h3><h4 id="基本思路">基本思路</h4><p>主要是对于双轿厢进行的调整，不过规定了重置为双轿厢之后就不得再重置，倒是省去了不少麻烦。</p><p>然后是主请求队列end条件变为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">isEnd</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.endFlag &amp;&amp; resetCount == <span class="number">0</span> &amp;&amp; peopleCount == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双轿厢设计">双轿厢设计</h4><ul><li>开始时就创建12个电梯线程，1-6为A轿厢，7-12为B轿厢（未重置时处于<code>Advice.WAIT</code>状态）</li><li>A轿厢完成双轿厢重置后，再去唤醒B轿厢，使得重置完成<strong>同步</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isDoubleCar.equals(<span class="string">&quot;-B&quot;</span>) &amp;&amp; resetFlag) &#123;</span><br><span class="line">    startTime = System.currentTimeMillis();</span><br><span class="line">    checkResetFlag();<span class="comment">//等待唤醒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="keyword">if</span> (transferFloor != <span class="number">0</span>) &#123;</span><br><span class="line">    isDoubleCar = <span class="string">&quot;-A&quot;</span>;</span><br><span class="line">    curFloor = transferFloor - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">synchronized</span> (anotherCar) &#123;</span><br><span class="line">        anotherCar.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意是，我设置了<code>isDoubleCar</code>这一属性来区分双轿厢和解决输出问题（初始为NULL），而A轿厢释放乘客时还未完成重置，此时还不能将这一属性改为<code>-A</code>。</p><p>同时，如果某次模拟的时候正在进行双轿厢重置，别忘了设置影子电梯的当前楼层为<code>transferFloor + 1</code>。</p><ul><li>在双轿厢中设置共享对象<code>Flag</code>，处理相撞问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isDoubleCar.isEmpty() &amp;&amp; curFloor == transferFloor) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag.getState()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    flag.setOccupied(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//进入前等待另一轿厢离开</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDoubleCar.isEmpty() &amp;&amp; tempFloor == transferFloor) &#123;</span><br><span class="line">    flag.setOccupied(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (isDoubleCar.equals(<span class="string">&quot;-B&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wait(<span class="number">5</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">synchronized</span> (anotherCar) &#123;</span><br><span class="line">        anotherCar.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//离开后通知另一轿厢</span></span><br></pre></td></tr></table></figure><h3 id="最终架构">最终架构</h3><h4 id="类图">类图</h4><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/New_diagram.png" alt="New_diagram"></p><h4 id="时序图">时序图</h4><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/seq.png" alt="seq"></p><h4 id="复杂度">复杂度</h4><table><thead><tr><th style="text-align:left">method</th><th>CogC</th><th>ev(G)</th><th>iv(G)</th><th>v(G)</th></tr></thead><tbody><tr><td style="text-align:left">Dispatcher.dispatch</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Dispatcher.Dispatcher</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Dispatcher.doubleCarReset</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Dispatcher.getBestElevator(Person)</td><td><strong>16.0</strong></td><td><strong>6.0</strong></td><td>8.0</td><td><strong>11.0</strong></td></tr><tr><td style="text-align:left">Dispatcher.normalReset(int, int, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Dispatcher.run()</td><td>9.0</td><td><strong>4.0</strong></td><td>5.0</td><td>6.0</td></tr><tr><td style="text-align:left">Dispatcher.simulate(ProcessingUnit, Person)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Elevator.Elevator(ProcessingUnit)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0s</td></tr><tr><td style="text-align:left">Elevator.run()</td><td>3.0</td><td>3.0</td><td>2.0</td><td>3.0</td></tr><tr><td style="text-align:left">Flag.Flag()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Flag.getState()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Flag.setOccupied(boolean)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">InputThread.InputThread(RequestQueue, Dispatcher)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">InputThread.run()</td><td>9.0</td><td>3.0</td><td>5.0</td><td>6.0</td></tr><tr><td style="text-align:left">MainClass.init(RequestQueue)</td><td>4.0</td><td>1.0</td><td>3.0</td><td>4.0</td></tr><tr><td style="text-align:left">MainClass.main(String[])</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.compareTo(Person)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.deepClone()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.getDirection()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.getFromFloor()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.getPersonId()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.getToFloor()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.Person(int, int, int, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Person.setFromFloor(int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.addRequest(Person)</td><td>4.0</td><td>1.0</td><td>3.0</td><td>3.0</td></tr><tr><td style="text-align:left">ProcessingUnit.canTake(int)</td><td>1.0</td><td>1.0</td><td>1.0</td><td>2.0</td></tr><tr><td style="text-align:left">ProcessingUnit.checkResetFlag()</td><td>2.0</td><td>1.0</td><td>2.0</td><td>3.0</td></tr><tr><td style="text-align:left">ProcessingUnit.clearTheElevator()</td><td>6.0</td><td>1.0</td><td>5.0</td><td>5.0</td></tr><tr><td style="text-align:left">ProcessingUnit.execute()</td><td>2.0</td><td>2.0</td><td>1.0</td><td>7.0</td></tr><tr><td style="text-align:left">ProcessingUnit.getAdvice()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.getRestTime()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.getTransferFloor()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.makeShadowElevator(ShadowElevator)</td><td>7.0</td><td>1.0</td><td>6.0</td><td>7.0</td></tr><tr><td style="text-align:left">ProcessingUnit.move()</td><td><strong>30.0</strong></td><td><strong>7.0</strong></td><td><strong>9.0</strong></td><td><strong>15.0</strong></td></tr><tr><td style="text-align:left">ProcessingUnit.openAndClose()</td><td><strong>30.0</strong></td><td><strong>6.0</strong></td><td><strong>12.0</strong></td><td><strong>16.0</strong></td></tr><tr><td style="text-align:left">ProcessingUnit.ProcessingUnit(int, RequestQueue, PriorityQueue, ArrayList)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.reset()</td><td>12.0</td><td><strong>4.0</strong></td><td>7.0</td><td>9.0</td></tr><tr><td style="text-align:left">ProcessingUnit.setDoubleCar(String, int, int, int, ProcessingUnit)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.setEndFlag(boolean)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td style="text-align:left">ProcessingUnit.setFlag(Flag)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ProcessingUnit.setResetFlag(boolean, int, int)</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td style="text-align:left">ProcessingUnit.waitRequest()</td><td>6.0</td><td>2.0</td><td>5.0</td><td>6.0</td></tr><tr><td style="text-align:left">RequestQueue.addRequest(Person)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.addReset()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.finishOneRequest()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.finishOneReset()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.getOneRequestAndRemove()</td><td>6.0</td><td>3.0</td><td>3.0</td><td>7.0</td></tr><tr><td style="text-align:left">RequestQueue.isEmpty()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.isEnd()</td><td>1.0</td><td>1.0</td><td>1.0</td><td>3.0</td></tr><tr><td style="text-align:left">RequestQueue.RequestQueue()</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">RequestQueue.setEndFlag(boolean)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ShadowElevator.addPerson(Person)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ShadowElevator.canTake(int)</td><td>1.0</td><td>1.0</td><td>1.0</td><td>2.0</td></tr><tr><td style="text-align:left">ShadowElevator.move()</td><td>4.0</td><td>1.0</td><td>1.0</td><td>4.0</td></tr><tr><td style="text-align:left">ShadowElevator.openAndClose()</td><td>12.0</td><td><strong>4.0</strong></td><td>5.0</td><td>8.0</td></tr><tr><td style="text-align:left">ShadowElevator.reset()</td><td>1.0</td><td>1.0</td><td>2.0</td><td>2.0</td></tr><tr><td style="text-align:left">ShadowElevator.run(Person)</td><td>3.0</td><td>1.0</td><td>2.0</td><td>7.0</td></tr><tr><td style="text-align:left">ShadowElevator.setAttributes(int, int, int, int, int)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ShadowElevator.setAttributes(String, int, int, int, int, boolean)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">ShadowElevator.setQueue(int, PriorityQueue, ArrayList, HashMap&gt;, boolean)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Strategy.canOpenForIn(int, int, boolean, int)</td><td>5.0</td><td><strong>4.0</strong></td><td>3.0</td><td>5.0</td></tr><tr><td style="text-align:left">Strategy.canOpenForOut(int, HashMap&gt;)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr><tr><td style="text-align:left">Strategy.getAdvice(int, int, boolean, int, HashMap&gt;, boolean, boolean, …)</td><td>15.0</td><td><strong>7.0</strong></td><td>3.0</td><td>9.0</td></tr><tr><td style="text-align:left">Strategy.haveSameDirection(int, boolean)</td><td>3.0</td><td>3.0</td><td>2.0</td><td>3.0</td></tr><tr><td style="text-align:left">Strategy.Strategy(PriorityQueue)</td><td>0.0</td><td>1.0</td><td>1.0</td><td>1.0</td></tr></tbody></table><p>可以看到，为了保证性能、处理轿厢相撞问题，复杂度主要在电梯的<code>openAndClose</code>、<code>move</code>出现了超标，这也算是符合预期吧。不过总的来说，感觉最后的架构还是十分清晰的，各部分内容较好地做到了高内聚低耦合、职责分明。</p><h2 id="关于影子电梯">关于影子电梯</h2><h3 id="基本步骤">基本步骤</h3><ul><li>深克隆电梯状态</li><li>模拟电梯运行过程得到最优电梯</li><li>将请求分给对应电梯</li></ul><h3 id="需要注意的问题">需要注意的问题</h3><p>为了模拟结果的准确，我们必须获取到在进行分配的那一刻的所有电梯的状态，并且模拟过程中所有电梯都不能运行。</p><p>但是电梯是一刻不停地持锁在运作的，如果要等待每个电梯完成当前动作，那分配过程将会迟迟无法结束，这是完全不能接受的。所以选择将<code>sleep</code>改为<code>wait</code>，让电梯在模拟时间消耗时将锁释放出。这样调度器线程和电梯线程交替获取和释放锁，便可以在性能损失最小的情况下解决这一问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="variable">curTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="keyword">while</span> (System.currentTimeMillis() &lt; curTime + <span class="number">400</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        wait(curTime + <span class="number">400</span> - System.currentTimeMillis());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过这个时候又有新的问题产生，那就是电梯当前动作没有执行完，<strong>状态没有稳定下来</strong>，就可能导致模拟结果的不准确。为了解决这个问题，我在影子电梯中保留了当前的状态（如<code>resetFlag</code>等），让影子电梯将当前作业也完整地模拟一遍，同时记录电梯进行当前动作已经花费的时间（若需要花费），最后从总时间中减去，便可得到较为精确模拟的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">getRestTime</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> System.currentTimeMillis() - <span class="built_in">this</span>.startTime;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dispatcher</span></span><br><span class="line"><span class="keyword">if</span> (advice.equals(Advice.RESET) || advice.equals(Advice.MOVE) ||</span><br><span class="line">        advice.equals(Advice.OPEN)) &#123;</span><br><span class="line">    spendTime -= processingUnits.get(i - <span class="number">1</span>).getRestTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bug分析">bug分析</h2><p>第一次作业强测和互测均未出现问题。</p><p>第二次作业深克隆的时候没有去获取所有电梯的锁，线程安全出了大问题，本地没有做好足够的测试掉以轻心了。结果强测错两个点，互测更是被刀烂了。后来bug修复了时候进行了一些小重构，也使得架构更加清晰。</p><p>第三次作业出现了死锁问题。具体来说，为了避免双轿厢电梯相撞，设置了共享对象Flag，当轿厢将进入交换层时，若Flag被占则<strong>wait</strong>；当轿厢离开时，取消占领并<strong>notify</strong>另一轿厢。</p><p>但是在影子电梯的实现过程中需要依次获取总计12个电梯的锁（1-6为下层轿厢，7-12位上层），若已经获取了<strong>i-A</strong>电梯的锁，而<strong>i-B</strong>尝试进行上文所述唤醒操作时，则不可避免地会产生死锁。</p><p>为解决这个问题而不进行大的调整（改用<code>ReentrantLock</code>），将影子电梯中获取锁的顺序改为同一电梯井的顺序而非电梯编号顺序；同时若<strong>i-B</strong>尝试唤醒，先令其<strong>wait(5)</strong>，将可能被需要的锁短暂地交出。</p><h2 id="心得体会">心得体会</h2><p>本单元无疑是巨大的失败，后两次强测均有bug，归根结底还是因为没有做<strong>充分的测试</strong>和对多线程协作理解不够深。不过在修复bug的过程中，我也开始对如何设置同步块和锁的获取顺序以防止死锁等问题，有了更多的思考与体会。</p><p>另外，影子电梯虽然给我带来了不少bug，但最后实现了以后还是挺赏心悦目的，然后<s>debug能力也更进一步了</s></p>]]></content>
      
      
      <categories>
          
          <category> BUAA面向对象设计与构造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUAA-OO-2024-Unit1</title>
      <link href="/6e31788b.html"/>
      <url>/6e31788b.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note success modern"><p>随着第三次作业的强测结果公布，这一单元的学习也接近了尾声。从开始的迷茫和手足无措，到最后可以拿出一份层次清晰、结构完整代码，我开始对作业所要求的层次化设计思想有了一定感觉，也体会到编写代码时各个类之间做到有效协同、职责分派之后带来的高效和美观。这些也离不开许多同学在讨论区的想法分享和往年学长学姐的经验总结。下面我将以我的学习总结和心得体会为第一单元的学习画上一个句号。</p></div><h2 id="程序架构分析">程序架构分析</h2><p>得益于课程组大力提倡的<emp>递归下降法</emp>和实验课提供的demo，以及同学在讨论区的各式各样的想法分享，我能够在开始时就采用一个比较优秀的架构，所以本单元迭代过程中基本没有大的重构。因此关于代码架构的分析就以hw3的代码为主了。</p><h3 id="整体架构">整体架构</h3><p>首先根据题目的形式化表述，可以很自然地建出<code>Expr -&gt; Term -&gt; Factor</code>这样一个结构，而其中<code>Factor</code>又可以根据不同情况建立不同子类。将读入经过预处理之后，在使用递归下降的方法就可以清晰地将表达式解析开来。</p><p>接下来对于表达式的展开主要借鉴了<a href="http://oo.buaa.edu.cn/assignment/503/discussion/1463">zyt同学的思路</a>，从由若干基本单元组成的多项式的输出结果出发，考虑将从原始表达式解析出来的东西化归为统一的形式——即<code>Poly</code>类，然后在此类中依据题目要求定义不同运算方法。同时，将<code>Factor</code>定义为包含<code>toPoly()</code>接口的抽象类，也就可以沿着上述的结构递归地返回展开结果。最后在<code>Poly</code>类中重写<code>toString</code>即可进行结果的输出。</p><p>另外，关于自定义函数的处理，我采用了字符串替换的形式，将使用<code>parseFactor</code>方法得到的实参代入形成新的表达式，然后调用<code>parseExpr</code>即可。不用额外去考虑函数的嵌套，因为这样的递归结构已经就可以处理这个问题（就如同处理嵌套的括号一样）。</p><p>而对于导数的处理，我没有递归地返回各类因子求导结果，而是直接把求导看成一种运算，最后通过<code>toPoly</code>得到标准形式后再调用一次<code>Poly</code>中的求导方法即可。</p><p>具体的<code>UML</code>图如下</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/Snipaste_2024-03-22_21-12-09.png" alt="UML图"></p><h3 id="代码规模分析">代码规模分析</h3><div class="note info flat"><p>采用插件<code>Statistic</code></p></div><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image-20240323154417186.png" alt=""></p><p>可以看到总体的规模并不大，除去用于优化输出结果的部分，整份代码的实际行数也就不到600行。</p><p>其中多项式<code>Poly</code>类和基础单元<code>Unit</code>类占据了主要的部分，这也符合上述代码架构的逻辑。</p><h3 id="代码复杂度分析">代码复杂度分析</h3><div class="note info flat"><p>采用插件<code>MetricsReloaded</code>分析，其中所用度量标准如下：</p></div><ul><li><code>CogC</code>: 方法的认知复杂度。</li><li><code>ev(G)</code>：方法的基本圈复杂度，衡量程序非结构化程度，表示真正增加程序路径数目的条件分支。</li><li><code>iv(G)</code>：方法的设计复杂度，设计复杂度高意味模块耦合度高，这将导致模块难于隔离、维护和复用。</li><li><code>v(G)</code>：方法的独立路径的条数。</li><li><code>OCavg</code>：类的平均操作复杂度</li><li><code>OCmax</code>：类的最大操作复杂度</li><li><code>WMC</code>：类的加权方法复杂度</li></ul><p>其中超标的部分用粗体标出。</p><table><thead><tr><th style="text-align:left">method</th><th>CogC</th><th>ev(G)</th><th>iv(G)</th><th>v(G)</th></tr></thead><tbody><tr><td style="text-align:left">ConFactor.ConFactor(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">ConFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Definer.addFunc(String)</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Definer.callFunc(String, ArrayList&lt;Factor&gt;)</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">DerFactor.DerFactor(Expr)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">DerFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">ExpFactor.ExpFactor(BigInteger, Expr)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">ExpFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Expr.Expr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Expr.addTerm(Term)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Expr.toPoly()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">ExprFactor.ExprFactor(Expr, int)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">ExprFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">FuncFactor.FuncFactor(String, ArrayList&lt;Factor&gt;)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">FuncFactor.getExpr()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">FuncFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Lexer.Lexer(String)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Lexer.getNumber()</td><td>2</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Lexer.next()</td><td>3</td><td>2</td><td>2</td><td>3</td></tr><tr><td style="text-align:left">Lexer.peek()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">MainClass.main(String[])</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Parser.Parser(Lexer)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Parser.parseConFactor()</td><td>2</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Parser.parseDerFactor()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Parser.parseExpFactor()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Parser.parseExpr()</td><td>7</td><td>1</td><td>6</td><td>6</td></tr><tr><td style="text-align:left">Parser.parseExprFactor()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Parser.parseFactor()</td><td>7</td><td><strong>6</strong></td><td>8</td><td>8</td></tr><tr><td style="text-align:left">Parser.parseFuncFactor()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Parser.parseTerm(int)</td><td>3</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Parser.parseVarFactor()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Poly.Poly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.Poly(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.Poly(BigInteger, BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.Poly(Poly, BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.Poly(int)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.addPoly(Poly)</td><td>8</td><td>1</td><td>6</td><td>6</td></tr><tr><td style="text-align:left">Poly.derivation()</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Poly.equals(Object)</td><td>3</td><td>3</td><td>2</td><td>4</td></tr><tr><td style="text-align:left">Poly.getGcd()</td><td>4</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Poly.hashCode()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.isEmpty()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Poly.isMono(BigInteger)</td><td>2</td><td>3</td><td>2</td><td>3</td></tr><tr><td style="text-align:left">Poly.mulPoly(Poly)</td><td>9</td><td>1</td><td>6</td><td>6</td></tr><tr><td style="text-align:left">Poly.powPoly(int)</td><td>6</td><td>1</td><td>4</td><td>4</td></tr><tr><td style="text-align:left">Poly.toString(BigInteger)</td><td><strong>16</strong></td><td>3</td><td><strong>9</strong></td><td>9</td></tr><tr><td style="text-align:left">Processor.preprocess(String)</td><td>2</td><td>1</td><td>5</td><td>5</td></tr><tr><td style="text-align:left">Term.Term(int)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Term.addFactor(Factor)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Term.toPoly()</td><td>2</td><td>1</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Unit.Unit()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.Unit(BigInteger)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.Unit(BigInteger, Poly)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.Unit(Poly)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.derivation(BigInteger)</td><td>4</td><td>2</td><td>3</td><td>3</td></tr><tr><td style="text-align:left">Unit.equals(Object)</td><td>3</td><td>3</td><td>2</td><td>4</td></tr><tr><td style="text-align:left">Unit.expToString()</td><td>7</td><td>1</td><td>3</td><td>4</td></tr><tr><td style="text-align:left">Unit.hashCode()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.isMono(BigInteger, BigInteger)</td><td>6</td><td><strong>4</strong></td><td>4</td><td>7</td></tr><tr><td style="text-align:left">Unit.mulUnit(Unit)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">Unit.toString(BigInteger)</td><td><strong>24</strong></td><td>1</td><td><strong>13</strong></td><td><strong>13</strong></td></tr><tr><td style="text-align:left">VarFactor.VarFactor(int)</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left">VarFactor.toPoly()</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td style="text-align:left"><strong>Total</strong></td><td>131</td><td>81</td><td>143</td><td>153</td></tr><tr><td style="text-align:left">Average</td><td>2.08</td><td>1.29</td><td>2.27</td><td>2.43</td></tr></tbody></table><table><thead><tr><th style="text-align:left">class</th><th>OCavg</th><th>OCmax</th><th>WMC</th></tr></thead><tbody><tr><td style="text-align:left">ConFactor</td><td>1.00</td><td>1</td><td>2</td></tr><tr><td style="text-align:left">Definer</td><td>2.50</td><td>3</td><td>5</td></tr><tr><td style="text-align:left">DerFactor</td><td>1.00</td><td>1</td><td>2</td></tr><tr><td style="text-align:left">ExpFactor</td><td>1.00</td><td>1</td><td>2</td></tr><tr><td style="text-align:left">Expr</td><td>1.33</td><td>2</td><td>4</td></tr><tr><td style="text-align:left">ExprFactor</td><td>1.00</td><td>1</td><td>2</td></tr><tr><td style="text-align:left">FuncFactor</td><td>1.00</td><td>1</td><td>3</td></tr><tr><td style="text-align:left">Lexer</td><td>1.75</td><td>3</td><td>7</td></tr><tr><td style="text-align:left">MainClass</td><td>2.00</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Parser</td><td>2.70</td><td>6</td><td>27</td></tr><tr><td style="text-align:left">Poly</td><td>2.87</td><td>9</td><td><strong>43</strong></td></tr><tr><td style="text-align:left">Processor</td><td>2.00</td><td>2</td><td>2</td></tr><tr><td style="text-align:left">Term</td><td>1.67</td><td>3</td><td>5</td></tr><tr><td style="text-align:left">Unit</td><td>3.00</td><td>13</td><td><strong>33</strong></td></tr><tr><td style="text-align:left">VarFactor</td><td>1.00</td><td>1</td><td>2</td></tr><tr><td style="text-align:left"><strong>Total</strong></td><td></td><td></td><td>141</td></tr><tr><td style="text-align:left">Average</td><td>2.24</td><td>3.27</td><td>9.40</td></tr></tbody></table><p>可以看到，复杂度的情况基本符合预期。两个类中重写的<code>toString</code>方法加入了对优化的处理和判断，从而导致复杂度飙升；而<code>isMono</code>也是用作优化处理，判断某个多项式是否为基本单元。另外，由于<code>parseFactor</code>中对不同因子分别单独处理，使用了大量串行分支判断，此处的优化可以学习<a href="https://blog.csdn.net/alpha_1st/article/details/136880632">zpy同学的总结</a>。</p><h2 id="架构设计体验">架构设计体验</h2><h3 id="从0到1">从0到1</h3><p>俗话说，万事开头难。由于第一周刚经历了假期，上学期先导课学习的内容有不少遗忘，且对于第一份作业眼花缭乱的形式化表述有些迷糊，我经历了好几天的迷茫。虽然通过不断地去看训练项目、实验课的代码和<code>oolen</code>上对递归下降的讲解，大概明白了递归下降的思想，但我还是感觉下不了手。凭借递归下降在给的demo上修修改改固然就能完成比较简单的第一次作业，但我还是没构思好该用什么样的一个架构，怎样去处理解析后得到的不同形式的部分，害怕搞个大的等到以后迭代时不得不remake。</p><p>很快就到了周五，而我还没开始敲一行代码。很感谢讨论区同学的无私分享，在看完zyt同学发的<a href="http://oo.buaa.edu.cn/assignment/503/discussion/1463">帖</a>后，我才算是有了一点头绪和对层次化的理解，尝试去将他展现出来的思路实现出来。</p><p>当我写完各个类的属性方法，补完预处理和解析的部分，整份代码居然就可以“神奇”地跑出结果来了（虽然由于解析部分的bug没有全过样例）。恍惚间，我开始体会到各个类之间“有效协同，职责分派”的魔力，每个类通过其管理的对象提供的行为来完成任务，每个方法立足类的属性数据来规划行为，从而将原本复杂的任务目标拆解成逻辑清晰、结构清楚的形式。同时，我也开始逐渐接受递归处理在面向对象过程中实现的作用。</p><hr><p>不过，由于第一次作业的基本单元较为简单<code>a*x^n</code>， 所以最开始时我没有建立单独的类去管理，直接将<code>系数-指数</code>这一键值对存入<code>Poly</code>中的map中。</p><p>对于预处理，我采用了以下的方法并同时处理了前导零（互测过后我才发现这是多余的，同时预处理我也是直接写在<code>main</code>中的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input = input.replaceAll(<span class="string">&quot;[ \t]&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (input.contains(<span class="string">&quot;+-&quot;</span>) || input.contains(<span class="string">&quot;-+&quot;</span>) ||</span><br><span class="line">        input.contains(<span class="string">&quot;++&quot;</span>) || input.contains(<span class="string">&quot;--&quot;</span>)) &#123;</span><br><span class="line">    input = input.replaceAll(<span class="string">&quot;\\+-|-\\+&quot;</span>, <span class="string">&quot;-&quot;</span>);</span><br><span class="line">    input = input.replaceAll(<span class="string">&quot;\\+\\+|--&quot;</span>, <span class="string">&quot;+&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">input = input.replaceAll(<span class="string">&quot;\\^\\+&quot;</span>, <span class="string">&quot;^&quot;</span>);</span><br><span class="line">input = input.replaceAll(<span class="string">&quot;\\*\\+&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><p>此时字符串中没有连续的正负号了，只剩开头和<code>(</code>后的正负号以及<code>*</code>后的负号需要处理。于是在<code>parseExpr</code>和<code>parseTerm</code>中加入处理，并在<code>Term</code>中增加了属性<code>sign</code>表示正负号，若为负，递归生成多项式的时候乘一项<code>-1</code>,即可解决这一问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parseExpr</span></span><br><span class="line"><span class="type">Expr</span> <span class="variable">expr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Expr</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (lexer.peek().equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">    sign = -<span class="number">1</span>;</span><br><span class="line">    lexer.next();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (lexer.peek().equals(<span class="string">&quot;+&quot;</span>)) &#123;</span><br><span class="line">    lexer.next();</span><br><span class="line">&#125;</span><br><span class="line">expr.addTerm(parseTerm(sign));</span><br><span class="line"><span class="keyword">while</span> (lexer.peek().equals(<span class="string">&quot;+&quot;</span>) || lexer.peek().equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> expr;</span><br><span class="line"></span><br><span class="line"><span class="comment">//parseTerm</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (lexer.peek().equals(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">    lexer.next();</span><br><span class="line">    <span class="keyword">if</span> (lexer.peek().equals(<span class="string">&quot;-&quot;</span>)) &#123;</span><br><span class="line">        term.addFactor(<span class="keyword">new</span> <span class="title class_">ConFactor</span>(BigInteger.valueOf(-<span class="number">1</span>)));</span><br><span class="line">        lexer.next();</span><br><span class="line">    &#125;</span><br><span class="line">    term.addFactor(parseFactor());</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Term.toPoly()</span></span><br><span class="line"><span class="type">Poly</span> <span class="variable">poly</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poly</span>(BigInteger.valueOf(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (Factor factor : factors) &#123;</span><br><span class="line">    poly = poly.mulPoly(factor.toPoly());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sign == -<span class="number">1</span>) &#123;</span><br><span class="line">    poly = poly.mulPoly(<span class="keyword">new</span> <span class="title class_">Poly</span>(BigInteger.valueOf(-<span class="number">1</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> poly;</span><br></pre></td></tr></table></figure><h3 id="从第一次作业到第二次作业">从第一次作业到第二次作业</h3><div class="note info flat"><p>这一次作业新增了指数函数、自定义函数和嵌套的括号</p></div><p>这次作业是很痛苦的一次迭代，斟酌了很久怎么调整架构，debug也de到了昏天黑地。</p><p>首先是新增的指数函数使得之前基础单元需要改动，于是对于怎样定义新增类<code>Unit</code>的属性和处理它和<code>Poly</code>的关系，我又陷入了反复否定自己的思考。最后将信将疑地还是使用了递归定义的形式，并在敲下一行行代码后逐渐肯定了这一结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poly</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Unit, BigInteger&gt; units;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Unit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BigInteger exponent;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Poly poly;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，为了进行同类项的合并，对这两个类重写了<code>equals</code>和<code>hashcode</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Unit</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Unit)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Unit</span> <span class="variable">unit</span> <span class="operator">=</span> (Unit) o;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.exponent.equals(unit.exponent) &amp;&amp; <span class="built_in">this</span>.poly.equals(unit.poly);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(<span class="built_in">this</span>.exponent, <span class="built_in">this</span>.poly);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Poly</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Poly</span> <span class="variable">poly</span> <span class="operator">=</span> (Poly) o;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.units.entrySet().equals(poly.units.entrySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(<span class="built_in">this</span>.units.entrySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得一提的是<code>Poly</code>中需要用<code>units</code>的键值对<code>entrySet()</code>而不是<code>keySet()</code>或者<code>valueSet()</code>。在这个地方de了好久，当时还以为是深浅拷贝出了问题。</p><p>有了以上基础之后，接着顺便把<code>Poly</code>中的方法重新写了一遍（包括构造函数和运算方法（这应该不算大的重构把）），也特别注意了第一次没在意的深浅拷贝问题。</p><hr><p>然后是对自定义函数的处理。因为形式化表述中看到参数也是因子，所以仿照表达式因子的处理方法，于是采用了字符串替换的递归处理方式，将展开得到的参数因子带入，得到新的表达式，解析并返回结果。</p><p>函数定义式的拆解使用了正则表达式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;([A-Za-z]+)\\(([A-Za-z,]+)\\)=(.+)&quot;</span>);</span><br><span class="line"><span class="comment">//存储变量和函数式子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, String&gt; funcMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;String, ArrayList&lt;String&gt;&gt; varsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>另外有几个需要注意的点，1）将式子中的变量<code>x</code>换成<code>_x</code>的形式，避免后续替换时对<code>exp</code>造成影响。2）带入参数需要在左右添加括号。（血泪教训）</p><hr><p>最后将预处理的过程写成了一个静态类，保留了一个清清爽爽的<code>main</code>函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());</span><br><span class="line">    String input;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        input = Processor.preprocess(scanner.nextLine());</span><br><span class="line">        Definer.addFunc(input);</span><br><span class="line">    &#125;</span><br><span class="line">    input = Processor.preprocess(scanner.nextLine());</span><br><span class="line">    <span class="type">Lexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lexer</span>(input);</span><br><span class="line">    <span class="type">Parser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parser</span>(lexer);</span><br><span class="line">    <span class="type">Expr</span> <span class="variable">expr</span> <span class="operator">=</span> parser.parseExpr();</span><br><span class="line">    <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> expr.toPoly().toString();</span><br><span class="line">    <span class="keyword">if</span> (ans.isEmpty()) &#123;</span><br><span class="line">        ans = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总之，这次迭代让我对整个架构有了更深的理解和体会。</p><h3 id="从第二次作业到第三次作业">从第二次作业到第三次作业</h3><div class="note info flat"><p>这次作业新增了求导因子<code>dx()</code>，以及函数定义时可以调用其他函数。</p></div><p>经历了上次迭代的痛苦，这次作业就可以说是“轻舟已过万重山”了。之前的架构已经比较完善了，而字符串替换的方法可以轻松解决自定义函数的调用。同时如果采用最后才进行一次求导的方法，求导因子也可以在<code>Poly</code>和<code>Unit</code>中增加对应的运算方法，从而得到解决。</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo>∗</mo><msup><mi>x</mi><mi>n</mi></msup><mo>∗</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mo stretchy="false">)</mo><msup><mo stretchy="false">]</mo><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><mi>a</mi><mo>∗</mo><mi>n</mi><mo>∗</mo><msup><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi>a</mi><mo>∗</mo><msup><mi>x</mi><mi>n</mi></msup><mo>∗</mo><mi>p</mi><mi>o</mi><mi>l</mi><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo>∗</mo><mi>exp</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mi>o</mi><mi>l</mi><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a*x^n*\exp(poly)]&#x27; = (a*n*x^{n-1}+a*x^n*poly&#x27;)*\exp(poly)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.947438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">exp</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归求导</span></span><br><span class="line"><span class="comment">//Poly</span></span><br><span class="line"><span class="keyword">public</span> Poly <span class="title function_">derivation</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Poly</span> <span class="variable">retPoly</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poly</span>();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> <span class="built_in">this</span>.units.keySet().iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">Unit</span> <span class="variable">unit</span> <span class="operator">=</span> (Unit) it.next();</span><br><span class="line">        retPoly = retPoly.addPoly(unit.derivation(<span class="built_in">this</span>.units.get(unit)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retPoly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Unit</span></span><br><span class="line"><span class="keyword">public</span> Poly <span class="title function_">derivation</span><span class="params">(BigInteger coefficient)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.poly.isEmpty()) &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">newExp</span> <span class="operator">=</span> <span class="built_in">this</span>.exponent;</span><br><span class="line">        <span class="keyword">if</span> (!newExp.equals(BigInteger.valueOf(<span class="number">0</span>))) &#123;</span><br><span class="line">            newExp = newExp.add(BigInteger.valueOf(-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">newCoe</span> <span class="operator">=</span> coefficient.multiply(<span class="built_in">this</span>.exponent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Poly</span>(newCoe, newExp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Poly</span> <span class="variable">poly</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Poly</span>(coefficient, <span class="built_in">this</span>.exponent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Poly</span>(<span class="built_in">this</span>.poly, BigInteger.valueOf(<span class="number">1</span>)).mulPoly(</span><br><span class="line">                poly.derivation().addPoly(poly.mulPoly(<span class="built_in">this</span>.poly.derivation())));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，这次迭代增加了对<code>exp()</code>提取最大公因数的优化。需要注意的是<emp>不能直接在toString()中</emp>直接对要输出的系数进行修改。</p><h2 id="bug分析">bug分析</h2><p>本单元三次作业在中测、强测、互测中均未出现bug，算是安全过关了。这也要感谢大佬们搭建的评测机，尤其是第二次作业我好不容易终于写完了所有代码以后，帮我找到了解析过程中和处理自定义函数时的bug。</p><p>感觉自己的debug能力又提升了不少，大致谈一谈debug策略吧。</p><ul><li>首先是根据初始的数据（可能很大且复杂），尝试不断去除其中的部分，慢慢定位可以导致错误的部分</li><li>然后通过输出中间变量和各种调试语句去发现bug（<s>因为<code>IDEA</code>的调试我觉得实在是难用且费眼费脑</s>）</li><li>总之，定位了大概出错的区域，基本上就能将bug解决</li></ul><p>其实大部分还是写的过程中不细心导致的，除了集中注意力，也需要我们对自己的代码和架构了然于胸。</p><h2 id="hack分析">hack分析</h2><p>第一次作业由于比较基础简单，所以房内并未出现刀人情况。</p><p>第二次作业根据debug的经验和评测姬发现了房内同学的两个bug</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">f(x) = exp(x^+02)</span><br><span class="line">h(y , z , x) = ++exp(x)^+3</span><br><span class="line">++h(        ( f(x) ), ( f(x) ), f(x))</span><br><span class="line">//处理实参时没有注意因子定义，导致碰到括号时出错</span><br><span class="line">    </span><br><span class="line">1</span><br><span class="line">f(x,y)=-x^0-2*exp(x)*exp(y)</span><br><span class="line">f(exp(1),0)*exp(-1)</span><br><span class="line">//优化exp(0)出了问题</span><br></pre></td></tr></table></figure><p>第三次作业仍然是测出了以为同学不能处理好<code>exp(0)</code>的问题</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">g(z) = ++exp(0)+-1</span><br><span class="line">exp(g(x) )</span><br></pre></td></tr></table></figure><p>总之，如果想要成功出刀的话，需要对题目的要求有清楚的理解和一定的hack策略，比如：</p><ul><li>根据评测机数据构造能通过<code>cost</code>限制的同质bug数据</li><li>多进行<code>corner case</code>的测试</li><li>因为递归较多，可以进行合理范围内的压力测试</li></ul><p>在第三次作业时，因为没有利用好<code>cost</code>的限制，虽然有构造压力测试样例的想法，但最后因为不知道哪里触发了互测数据限制，浅尝辄止，浪费了出刀的好机会。这也是以后互测我需要注意改进的地方吧。</p><h2 id="优化分析">优化分析</h2><p>第一次作业基本没什么优化的空间，只有一个（基本的合并同类项就不提了）——尽量保证<code>Expr</code>的第一项系数为正（可以少一个符号）。</p><p>第二次作业引入指数函数后，事情便走向了不可控的境地。通过同学们的讨论发现基本没法做到最优，再加上那一周的迭代实在太过艰辛，于是放弃了这个方向的优化，只求能先保证正确性。于是只对<code>exp</code>的系数是否为<code>正负1</code>和指数是否为<code>0</code>，以及指数部分是否为不用添加括号的单项式（因子），进行了优化。</p><p>第三次作业虽然没有去搞各种复杂的拆分，但增加了提取最大公因数的优化，不过优得不是很化——没有把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>G</mi><mi>c</mi><mi>d</mi></mrow><mi>k</mi></mfrac><mo stretchy="false">(</mo><mn>1</mn><mo>⩽</mo><mi>k</mi><mo>⩽</mo><mn>9</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{Gcd}{k}(1 \leqslant k \leqslant 9)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.13667em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mclose">)</span></span></span></span>的情况都比较一遍，导致强测有一个点的性能分出现了一点点的负优化。</p><p>总之，虽然第三次做优化的时候很可惜为什么第二次不加上最大公约数的优化（那样就又可以多一点分了），但实际上做优化的时候又对优化带来的对正确性的bug de了好久，而且第二次作业de完bug感觉整个人的精神已经是强弩之末了，说不定反而会弄巧成拙。包括第三次作业做的优化，我自知肯定是卷不过那些优化仙人的（感觉也没必要），于是就对性价比最大的一部分进行了优化，这也算是一种<code>trade-off</code>吧。</p><h2 id="心得体会">心得体会</h2><p>对于我自身而言，第一单元的学习也带给了我很多关于面向对象构造的思考（其中一位同学发的帖也很令人深思 <a href="http://oo.buaa.edu.cn/assignment/505/discussion/1516">命令-查询分离原则</a>），对于如何将复杂问题进行层次分解和抽象，在之后的单元我还需要进行更多的学习和思考。</p><p>另外，我也需要注意对已有轮子的学习和使用，从而更多关注架构的设计。如本单元作业中，最开始对<code>BigInterger</code>不熟悉，合并同类项的<code>Merge</code>方法，优化时的处理有<code>compareTo</code>……</p><p>最后感谢上学期的<code>oopre</code>确实给我打下了一定的基础（否则不敢想我面对Unit 1的冲击会有多狼狈），也很感谢分享经验和搭建评测机的同学的帮助。</p><h2 id="未来方向">未来方向</h2><p>对于课程设计，我还是觉得对<code>exp</code>的拆分优化这些，这感觉已经不能算是化简了，而且以大量的运行时间换来了这样的长度的减少，感觉没有体现出性能二字意义何在。优化仙人们确实很厉害，但这部分的工作不是学好OO这门课必要的。</p>]]></content>
      
      
      <categories>
          
          <category> BUAA面向对象设计与构造 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 BUAA CO review: P2</title>
      <link href="/5bad4d19.html"/>
      <url>/5bad4d19.html</url>
      
        <content type="html"><![CDATA[<!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=35&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=329&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=330&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=415&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=416&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=419&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=422&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=52&PieId=1109 --><!-- http://cscore.buaa.edu.cn/#/problem?ProblemId=53&PieId=1109 --><h2 id="mips汇编">MIPS汇编</h2><h3 id="一些常用宏">一些常用宏</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#  程序结束</span><br><span class="line">.macro end</span><br><span class="line">    li        $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">#--------------------------</span><br><span class="line"></span><br><span class="line"># 输入Integer</span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li        $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move    %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">#--------------------------</span><br><span class="line"></span><br><span class="line"># 输出Interger</span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li        $v0, 1</span><br><span class="line">    move    $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">#--------------------------</span><br><span class="line"></span><br><span class="line"># 输出字符串（包括换行和空格）</span><br><span class="line"># 值得一提的是，最好只使用&quot;.asciiz&quot;，因为它会字符串结尾添加一个结束符&#x27;\0&#x27;</span><br><span class="line">.data</span><br><span class="line">  StrName:  .asciiz &quot;……&quot;</span><br><span class="line">  # space:    .asciiz &quot; &quot;</span><br><span class="line">  # enter:    .asciiz &quot;\n&quot;</span><br><span class="line">.macro printStr()</span><br><span class="line">  li  $v0, 4</span><br><span class="line">  la  $a0, StrName    # 将输出字符串的地址赋给$a0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">#--------------------------</span><br><span class="line"></span><br><span class="line"># 保护和读取寄存器</span><br><span class="line"># 临时寄存器不够用 或 递归函数使用</span><br><span class="line">.macro push(%d)</span><br><span class="line">    sw        %d, 0($sp)</span><br><span class="line">    addi    $sp, $sp, -4</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro pop(%d)</span><br><span class="line">    addi    $sp, $sp, 4</span><br><span class="line">    lw        %d, 0($sp)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">#--------------------------</span><br><span class="line"></span><br><span class="line"># 取二维数组下标地址</span><br><span class="line">.macro getIndex(%d, %m, %i, %j) # m为列</span><br><span class="line">    mul        %d, %m, %i</span><br><span class="line">    add        %d, %d, %j</span><br><span class="line">    sll        %d, %d, 2</span><br><span class="line">.end_macro</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="一些tips">一些tips</h3><ul><li>取用指令时，记得多查看指令集手册和<code>MARS</code>的帮助手册(快捷键<code>F1</code>)。</li></ul><div class="note info simple"><p>虽然<code>MARS</code>没有代码补全功能，但是书写指令的时候会有提示（格式和大概用法等等）<br>所以指令记个大概也没关系，比如利用<code>b-&gt;branch</code>,<code>g(t)-&gt;greater (than)</code>, <code>z-&gt;zero</code>等等可以很方便地写出多种多样的控制语句</p></div><ul><li>善用扩展指令 <code>li</code>,<code>la</code>,<code>move</code>等</li><li>灵活使用标签（并不一定要用来跳转）和缩进（，这样看起来能有一些层次感</li><li>函数的调用和递归函数<ul><li><code>jal</code>和<code>jr</code>配套</li><li>传参一般使用<code>$a0-$a3</code>，返回值<code>$v0-$v1</code></li><li>关于写递归函数的时候什么东西要入栈，什么不要，其实很简单，只需要把进行递归前后<strong>发生变化的</strong>、且<strong>寄存器中的值关系到后续（递归回来）使用</strong>的寄存器进行保存和恢复就好了</li><li>接上一条，进入函数的时候就先把要保存的进行入栈（包括<code>$ra</code>），然后在函数结束和<code>return</code>的地方进行出栈即可</li></ul></li><li>写一些必要的注释，标明寄存器保存的重要的变量和参数</li><li>可以将对应的C程序写出，再对着翻译</li></ul><h2 id="课下提交">课下提交</h2><h3 id="q1-p2-l0-matrix">Q1 P2_L0_matrix</h3><p>使用MIPS汇编语言编写一个具有矩阵相乘功能的汇编程序(不考虑延迟槽)。<br>具体要求：</p><ul><li>首先读取方形矩阵的阶数n，然后再依次读取第一个矩阵（n行n列）和第二个矩阵（n行n列）中的元素。</li><li>两个矩阵的阶数相同，我们提供的测试数据中0&lt;n≤8,每个矩阵元素是小于10的整数。</li><li>最终将计算出的结果输出，每行n个数据，每个数据间用空格分开。评测机会自动过滤掉行尾空格以及最后的回车。</li><li>使用<code>syscall</code>结束程序。</li></ul><hr><p>考察二维数组的使用</p><details class="folding-tag" cyan><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    arr1:    .space    256</span><br><span class="line">    arr2:    .space    256</span><br><span class="line">    arr3:    .space    256</span><br><span class="line">    space:    .asciiz    &quot; &quot;</span><br><span class="line">    enter:    .asciiz    &quot;\n&quot;</span><br><span class="line">    </span><br><span class="line">.macro end</span><br><span class="line">    li        $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li        $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move    %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro getIndex(%n, %d, %i, %j)</span><br><span class="line">    mul        %d, %i, %n</span><br><span class="line">    add        %d, %d, %j</span><br><span class="line">    sll        %d, %d, 2</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li        $v0, 1</span><br><span class="line">    move    $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printEnter()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, enter</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printSpace()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, space</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">    readInt($s0)</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_1:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_1</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_1:</span><br><span class="line">            beq        $t1, $s0, end_loop_j_1</span><br><span class="line">            getIndex($s0, $t2, $t0, $t1)</span><br><span class="line">            li        $v0, 5</span><br><span class="line">            syscall</span><br><span class="line">            sw        $v0, arr1($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_1</span><br><span class="line">        end_loop_j_1:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_1</span><br><span class="line">    end_loop_i_1:</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_2:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_2</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_2:</span><br><span class="line">            beq        $t1, $s0, end_loop_j_2</span><br><span class="line">            getIndex($s0, $t2, $t0, $t1)</span><br><span class="line">            li        $v0, 5</span><br><span class="line">            syscall</span><br><span class="line">            sw        $v0, arr2($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_2</span><br><span class="line">        end_loop_j_2:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_2</span><br><span class="line">    end_loop_i_2:</span><br><span class="line">    </span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_3:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_3</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_3:</span><br><span class="line">            beq        $t1, $s0, end_loop_j_3</span><br><span class="line">            getIndex($s0, $t5, $t0, $t1)</span><br><span class="line">            lw        $t5, arr3($t5)</span><br><span class="line">            li        $t2, 0</span><br><span class="line">            loop_k_1:</span><br><span class="line">                beq        $t2, $s0, end_loop_k_1</span><br><span class="line">                getIndex($s0, $t3, $t0, $t2)</span><br><span class="line">                getIndex($s0, $t4, $t2, $t1)</span><br><span class="line">                lw        $t3, arr1($t3)</span><br><span class="line">                lw        $t4, arr2($t4)</span><br><span class="line">                mult    $t3, $t4</span><br><span class="line">                mflo    $t3</span><br><span class="line">                add        $t5, $t5, $t3</span><br><span class="line">                addi    $t2, $t2, 1</span><br><span class="line">                j        loop_k_1</span><br><span class="line">            end_loop_k_1:</span><br><span class="line">            getIndex($s0, $t3, $t0, $t1)</span><br><span class="line">            sw        $t5, arr3($t3)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_3</span><br><span class="line">        end_loop_j_3:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_3            </span><br><span class="line">    end_loop_i_3:</span><br><span class="line">    </span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_4:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_4</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_4:</span><br><span class="line">            beq        $t1, $s0, end_loop_j_4</span><br><span class="line">            getIndex($s0, $t2, $t0, $t1)</span><br><span class="line">            lw        $t2, arr3($t2)</span><br><span class="line">            printInt($t2)</span><br><span class="line">            printSpace()</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_4</span><br><span class="line">        end_loop_j_4:</span><br><span class="line">        printEnter()</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_4</span><br><span class="line">    end_loop_i_4:</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="q2-p2-l0-judge">Q2 P2_L0_judge</h3><p>实现满足下面功能的汇编程序：</p><ol><li>判断输入的字符串是不是回文串。</li><li>输出一个字符，是回文串输出1，否则输出0</li><li>每组数据最多执行100,000条指令。</li><li>使用<code>syscall</code>结束程序</li></ol><hr><p>注意如果一次读取一个字符(<code>$v0 = 12</code>)，记得使用<code>lb</code>,<code>sb</code>进行存取使用</p><details class="folding-tag" green><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    array:    .space 20</span><br><span class="line"></span><br><span class="line">.macro end</span><br><span class="line">    li    $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li    $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readCh(%d)</span><br><span class="line">    li    $v0, 12</span><br><span class="line">    syscall</span><br><span class="line">    move %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">    readInt($s0)</span><br><span class="line">    li    $t0, 0</span><br><span class="line">    </span><br><span class="line">loop1:</span><br><span class="line">    beq    $t0, $s0, end_loop1</span><br><span class="line">    readCh($t1)</span><br><span class="line">    sb    $t1, array($t0)</span><br><span class="line">    addi $t0, $t0, 1</span><br><span class="line">    j    loop1</span><br><span class="line">    </span><br><span class="line">end_loop1:</span><br><span class="line">    li    $t0, 0</span><br><span class="line">    addi $t2, $s0, -1</span><br><span class="line">loop2:</span><br><span class="line">    beq $t0, $s0, end_loop2</span><br><span class="line">    lb    $t1, array($t0)</span><br><span class="line">    sub    $t3, $t2, $t0</span><br><span class="line">    lb    $t3, array($t3)</span><br><span class="line">    bne $t1, $t3, not_equal</span><br><span class="line">    addi $t0, $t0, 1</span><br><span class="line">    j    loop2</span><br><span class="line">    </span><br><span class="line">end_loop2:</span><br><span class="line">    li    $a0, 1</span><br><span class="line">    li    $v0, 1</span><br><span class="line">    syscall</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">not_equal:</span><br><span class="line">    li    $a0, 0</span><br><span class="line">    li    $v0, 1</span><br><span class="line">    syscall</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="q3-p2-l0-conv">Q3 P2_L0_conv</h3><p>使用MIPS汇编语言编写一个进行卷积运算的汇编程序(不考虑延迟槽)。<br>具体要求：</p><ul><li>首先读取待卷积矩阵的行数m1和列数n1，然后读取卷积核的行数m2和列数n2。</li><li>然后再依次读取待卷积矩阵(m1行n1列)和卷积核(m2行n2列)中的元素。</li><li>输出中，有m1-m2+1行，每行有n1-n2+1个数据，每个数据用空格分开。</li><li>卷积运算的定义:$$g(i, j) = \sum\limits_{k,l} f(i + k, j + l) \cdot h(k, l)$$其中f为待卷积矩阵，h为卷积核，g即为输出矩阵，k与l的终值分别为卷积核h的行大小、列大小。计算中不考虑边缘效应。</li><li>使用<code>syscall</code>结束程序</li></ul><hr><details class="folding-tag" yellow><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    arrf:        .space    400</span><br><span class="line">    arrh:        .space    400</span><br><span class="line">    arrg:        .space    400</span><br><span class="line">    space:        .asciiz    &quot; &quot;</span><br><span class="line">    enter:        .asciiz    &quot;\n&quot;</span><br><span class="line">    </span><br><span class="line">.macro end</span><br><span class="line">    li        $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li        $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move    %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li        $v0, 1</span><br><span class="line">    move    $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printEnter()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, enter</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printSpace()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, space</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro getIndex(%d, %n, %i, %j)</span><br><span class="line">    mul        %d, %n, %i</span><br><span class="line">    add        %d, %d, %j</span><br><span class="line">    sll        %d, %d, 2</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">    readInt($s0)</span><br><span class="line">    readInt($s1)</span><br><span class="line">    readInt($s2)</span><br><span class="line">    readInt($s3)</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_1:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_1</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_1:</span><br><span class="line">            beq        $t1, $s1, end_loop_j_1</span><br><span class="line">            getIndex($t2, $s1, $t0, $t1)</span><br><span class="line">            readInt($t3)</span><br><span class="line">            sw        $t3, arrf($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_1</span><br><span class="line">        end_loop_j_1:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_1</span><br><span class="line">    end_loop_i_1:</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_2:</span><br><span class="line">        beq        $t0, $s2, end_loop_i_2</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_2:</span><br><span class="line">            beq        $t1, $s3, end_loop_j_2</span><br><span class="line">            getIndex($t2, $s3, $t0, $t1)</span><br><span class="line">            readInt($t3)</span><br><span class="line">            sw        $t3, arrh($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_2</span><br><span class="line">        end_loop_j_2:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_2</span><br><span class="line">    end_loop_i_2:</span><br><span class="line">    move    $s6, $s1</span><br><span class="line">    sub        $s0, $s0, $s2</span><br><span class="line">    sub        $s1, $s1, $s3</span><br><span class="line">    addi    $s0, $s0, 1</span><br><span class="line">    addi    $s1, $s1, 1</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    </span><br><span class="line">    loop_i_3:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_3</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_3:</span><br><span class="line">            beq        $t1, $s1, end_loop_j_3</span><br><span class="line">            li        $t2, 0</span><br><span class="line">            getIndex($s4, $s1, $t0, $t1)</span><br><span class="line">            lw        $s5, arrg($s4)</span><br><span class="line">            loop_k_1:</span><br><span class="line">                beq        $t2, $s2, end_loop_k_1</span><br><span class="line">                li        $t3, 0</span><br><span class="line">                loop_l_1:</span><br><span class="line">                    beq        $t3, $s3, end_loop_l_1</span><br><span class="line">                    add        $t4, $t0, $t2</span><br><span class="line">                    add        $t5, $t1, $t3</span><br><span class="line">                    getIndex($t6, $s6, $t4, $t5)</span><br><span class="line">                    lw        $t6, arrf($t6)</span><br><span class="line">                    getIndex($t7, $s3, $t2, $t3)</span><br><span class="line">                    lw        $t7, arrh($t7)</span><br><span class="line">                    mult    $t6, $t7</span><br><span class="line">                    mflo    $t6</span><br><span class="line">                    add        $s5, $s5, $t6</span><br><span class="line">                    addi    $t3, $t3, 1</span><br><span class="line">                    j        loop_l_1</span><br><span class="line">                end_loop_l_1:</span><br><span class="line">                addi    $t2, $t2, 1</span><br><span class="line">                j        loop_k_1</span><br><span class="line">            end_loop_k_1:</span><br><span class="line">            sw        $s5, arrg($s4)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_3</span><br><span class="line">        end_loop_j_3:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_3</span><br><span class="line">    end_loop_i_3:</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_4:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_4</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_4:</span><br><span class="line">            beq        $t1, $s1, end_loop_j_4</span><br><span class="line">            getIndex($t2, $s1, $t0, $t1)</span><br><span class="line">            lw        $t2, arrg($t2)</span><br><span class="line">            printInt($t2)</span><br><span class="line">            printSpace()</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_4</span><br><span class="line">        end_loop_j_4:</span><br><span class="line">        printEnter()</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_4</span><br><span class="line">    end_loop_i_4:</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="q4-p2-l0-full-1">Q4 P2_L0_full_1</h3><p>实现满足下面功能的汇编程序：</p><ol><li>使用mips实现全排列生成算法。</li><li>以0x00000000为数据段起始地址。</li><li>输入一个小于等于6的正整数，求出n的全排列，并按照字典序输出。</li><li>每组数据最多执行500,000条指令。</li><li>使用<code>syscall</code>结束程序</li></ol><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/MARS_code_911.png" alt="C代码提示"></p><hr><p>一道递归题，注意<span class="bubble-content">递归返回的时候</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;"> 即代码 FullArray(index+1); 后</span></span>，除了保存恢复下标i，还要记得<span class="bubble-content">重新计算下标地址</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;"> 需要用来撤销symbol标记</span></span>( &lt;&lt;2 )</p><details class="folding-tag" red><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    array:    .space    28</span><br><span class="line">    symbol:    .space    28</span><br><span class="line">    space:    .asciiz    &quot; &quot;</span><br><span class="line">    enter:    .asciiz &quot;\n&quot;</span><br><span class="line">    </span><br><span class="line">.macro end</span><br><span class="line">    li    $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li    $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li    $v0, 1</span><br><span class="line">    move $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printEnter()</span><br><span class="line">    la    $a0, enter</span><br><span class="line">    li    $v0, 4</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printSpace()</span><br><span class="line">    la    $a0, space</span><br><span class="line">    li    $v0, 4</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro push(%d)</span><br><span class="line">    sw    %d, 0($sp)</span><br><span class="line">    addi $sp, $sp, -4</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro pop(%d)</span><br><span class="line">    addi $sp, $sp, 4</span><br><span class="line">    lw    %d, 0($sp)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">    readInt($s0)</span><br><span class="line">    li    $t0, 0</span><br><span class="line">    li    $t1, 0</span><br><span class="line">    li    $a0, 0 # index</span><br><span class="line">    jal    FullArray</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">FullArray:</span><br><span class="line">    push($ra)</span><br><span class="line">    push($t0)</span><br><span class="line">    push($t1)</span><br><span class="line">    </span><br><span class="line">    move $t0, $a0 # index</span><br><span class="line">    li    $t1, 0 # i</span><br><span class="line">    blt    $t0, $s0, else1</span><br><span class="line">    if1:</span><br><span class="line">        loop1:</span><br><span class="line">            beq    $t1, $s0, end_loop1</span><br><span class="line">            sll    $t2, $t1, 2</span><br><span class="line">            lw    $t2, array($t2) # array[i]</span><br><span class="line">            printInt($t2)</span><br><span class="line">            printSpace()</span><br><span class="line">            addi $t1, $t1, 1</span><br><span class="line">            j    loop1</span><br><span class="line">        end_loop1:</span><br><span class="line">        printEnter()</span><br><span class="line">        pop($t1)</span><br><span class="line">        pop($t0)</span><br><span class="line">        pop($ra)</span><br><span class="line">        jr    $ra # return</span><br><span class="line">    else1:</span><br><span class="line">    li    $t1, 0</span><br><span class="line">    loop2:</span><br><span class="line">        beq $t1, $s0, end_loop2 # t1:i</span><br><span class="line">        sll    $t2, $t1, 2</span><br><span class="line">        lw    $t3, symbol($t2) # symbol[i]</span><br><span class="line">        bnez $t3, else2</span><br><span class="line">        if2:</span><br><span class="line">            sll    $t3, $t0, 2 # index</span><br><span class="line">            addi $t4, $t1, 1</span><br><span class="line">            sw    $t4, array($t3) # array[index] = i + 1</span><br><span class="line">            li    $t3,1 </span><br><span class="line">            sw    $t3, symbol($t2) # symbol[i] = 1</span><br><span class="line">            addi $a0, $t0, 1 # new index</span><br><span class="line">            jal    FullArray</span><br><span class="line">            li    $t3, 0</span><br><span class="line">            sll    $t2, $t1, 2 # remember to reset</span><br><span class="line">            sw    $t3, symbol($t2) # symbol[i] = 0</span><br><span class="line">        else2:</span><br><span class="line">        addi $t1, $t1, 1</span><br><span class="line">        j    loop2</span><br><span class="line">    end_loop2:</span><br><span class="line">    pop($t1)</span><br><span class="line">    pop($t0)</span><br><span class="line">    pop($ra)</span><br><span class="line">    jr    $ra</span><br><span class="line">    </span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="附加题q1-p2-l1-puzzle">附加题Q1 P2_L1_puzzle</h3><p>使用深度优先探索算法求解01迷宫的逃离路线个数。<br><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/P2-lab1-maze.png" alt="例"><br>如左图，以红色0作为起点，绿色0作为终点，每一次行进只能选择上下左右中值为0且未走过的位置，满足上述条件的路线，即为一条迷宫逃跑路线。如右图中，蓝色的路线即为一条逃跑路线。</p><p>输入一个n*m的01矩阵作为01迷宫，并给定他的起点与终点，求出他不同逃跑路线的数目（不同逃跑路线中可以有相同的部分，但是不能完全相同）。</p><hr><details class="folding-tag" blue open><summary> C代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> n,m,ans,target[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> Map[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="type">int</span> flag[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    s 0 1 0 0</span></span><br><span class="line"><span class="comment">    1 0 0 0 1</span></span><br><span class="line"><span class="comment">    1 0 1 0 1</span></span><br><span class="line"><span class="comment">    1 0 0 0 t</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="comment">//便于翻译就这么写了</span></span><br><span class="line">    <span class="keyword">if</span> (x == target[<span class="number">2</span>] &amp;&amp; y == target[<span class="number">3</span>]) &#123;</span><br><span class="line">        ++ans;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x + <span class="number">1</span> &lt; n &amp;&amp; Map[x + <span class="number">1</span>][y] == <span class="number">0</span> &amp;&amp; flag[x + <span class="number">1</span>][y] == <span class="number">0</span>) &#123;</span><br><span class="line">        flag[x + <span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">        dfs(x + <span class="number">1</span>, y);</span><br><span class="line">        flag[x + <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; Map[x - <span class="number">1</span>][y] == <span class="number">0</span> &amp;&amp; flag[x - <span class="number">1</span>][y] == <span class="number">0</span>) &#123;</span><br><span class="line">        flag[x - <span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">        dfs(x - <span class="number">1</span>, y);</span><br><span class="line">        flag[x - <span class="number">1</span>][y] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y + <span class="number">1</span> &lt; m &amp;&amp; Map[x][y + <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; flag[x][y + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        flag[x][y + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dfs(x, y + <span class="number">1</span>);</span><br><span class="line">        flag[x][y + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; Map[x][y - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; flag[x][y - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">        flag[x][y - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dfs(x, y - <span class="number">1</span>);</span><br><span class="line">        flag[x][y - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;Map[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;target[i]);</span><br><span class="line">        target[i]--;</span><br><span class="line">    &#125;</span><br><span class="line">    flag[target[<span class="number">0</span>]][target[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">    dfs(target[<span class="number">0</span>],target[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" cyan><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    Map:    .space    196</span><br><span class="line">    flag:    .space    196</span><br><span class="line">    space:    .asciiz    &quot; &quot;</span><br><span class="line">    enter:    .asciiz    &quot;\n&quot;</span><br><span class="line"></span><br><span class="line">.macro end</span><br><span class="line">    li        $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li        $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move    %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li        $v0, 1</span><br><span class="line">    move    $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro getIndex(%d, %m, %i, %j)</span><br><span class="line">    mul        %d, %m, %i</span><br><span class="line">    add        %d, %d, %j</span><br><span class="line">    sll        %d, %d, 2</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro push(%d)</span><br><span class="line">    sw        %d, 0($sp)</span><br><span class="line">    addi    $sp, $sp, -4</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro pop(%d)</span><br><span class="line">    addi    $sp, $sp, 4</span><br><span class="line">    lw        %d, 0($sp)</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printSpace()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, space</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printEnter()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, enter</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro check()</span><br><span class="line">    push($a0)</span><br><span class="line">    li        $t6, 0</span><br><span class="line">    for_i:</span><br><span class="line">        beq        $t6, $s0, end_for_i</span><br><span class="line">        li        $t7, 0</span><br><span class="line">        for_j:</span><br><span class="line">            beq        $t7, $s1, end_for_j</span><br><span class="line">            getIndex($t5, $s1, $t6, $t7)</span><br><span class="line">            lw        $t5, flag($t5)</span><br><span class="line">            printInt($t5)</span><br><span class="line">            printSpace()</span><br><span class="line">            addi    $t7, $t7, 1</span><br><span class="line">            j        for_j</span><br><span class="line">        end_for_j:</span><br><span class="line">        printEnter()</span><br><span class="line">        addi    $t6, $t6, 1</span><br><span class="line">        j        for_i</span><br><span class="line">    end_for_i:</span><br><span class="line">    printEnter()</span><br><span class="line">    pop($a0)</span><br><span class="line">.end_macro</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">    readInt($s0)</span><br><span class="line">    readInt($s1)</span><br><span class="line">    li        $s2, 0</span><br><span class="line">    li        $t0, 0</span><br><span class="line">    loop_i_1:</span><br><span class="line">        beq        $t0, $s0, end_loop_i_1</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        loop_j_1:</span><br><span class="line">            beq        $t1, $s1, end_loop_j_1</span><br><span class="line">            getIndex($t2, $s1, $t0, $t1)</span><br><span class="line">            readInt($t3)</span><br><span class="line">            sw        $t3, Map($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_1</span><br><span class="line">        end_loop_j_1:</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_1</span><br><span class="line">    end_loop_i_1:</span><br><span class="line">    readInt($t0)</span><br><span class="line">    readInt($t1)</span><br><span class="line">    readInt($s3)</span><br><span class="line">    readInt($s4)</span><br><span class="line">    addi    $t0, $t0, -1</span><br><span class="line">    addi    $t1, $t1, -1</span><br><span class="line">    addi    $s3, $s3, -1    #target_x</span><br><span class="line">    addi    $s4, $s4, -1    #target_y</span><br><span class="line">    getIndex($t2, $s1, $t0, $t1)</span><br><span class="line">    move    $a0, $t0    # x</span><br><span class="line">    move    $a1, $t1    # y</span><br><span class="line">    li        $s5, 1        # const 1</span><br><span class="line">    sw        $s5, flag($t2)</span><br><span class="line">    jal        dfs</span><br><span class="line">    printInt($s2)</span><br><span class="line">    end</span><br><span class="line">    </span><br><span class="line">dfs:</span><br><span class="line">    push($ra)</span><br><span class="line">    push($t0)</span><br><span class="line">    push($t1)</span><br><span class="line">    move    $t0, $a0</span><br><span class="line">    move    $t1, $a1</span><br><span class="line">    bne        $t0, $s3, else_1</span><br><span class="line">    bne        $t1, $s4, else_1</span><br><span class="line">    if_1:</span><br><span class="line">        add        $s2, $s2, 1</span><br><span class="line">        pop($t1)</span><br><span class="line">        pop($t0)</span><br><span class="line">        pop($ra)</span><br><span class="line">        jr        $ra</span><br><span class="line">    else_1:</span><br><span class="line">    addi    $t2, $t0, 1</span><br><span class="line">    beq        $t2, $s0, else_2</span><br><span class="line">    getIndex($t3, $s1, $t2, $t1)</span><br><span class="line">    lw        $t4, Map($t3)</span><br><span class="line">    bnez    $t4, else_2</span><br><span class="line">    lw        $t4, flag($t3)</span><br><span class="line">    bnez    $t4, else_2</span><br><span class="line">    if_2:</span><br><span class="line">        sw        $s5, flag($t3)</span><br><span class="line">        move    $a0, $t2</span><br><span class="line">        move    $a1, $t1</span><br><span class="line">        jal        dfs</span><br><span class="line">        addi    $t2, $t0, 1</span><br><span class="line">        getIndex($t3, $s1, $t2, $t1)</span><br><span class="line">        sw        $0, flag($t3)</span><br><span class="line">    else_2:</span><br><span class="line">    beqz    $t0, else_3</span><br><span class="line">    addi    $t2, $t0, -1</span><br><span class="line">    getIndex($t3, $s1, $t2, $t1)</span><br><span class="line">    lw        $t4, Map($t3)</span><br><span class="line">    bnez    $t4, else_3</span><br><span class="line">    lw        $t4, flag($t3)</span><br><span class="line">    bnez    $t4, else_3</span><br><span class="line">    if_3:</span><br><span class="line">        sw        $s5, flag($t3)</span><br><span class="line">        move    $a0, $t2</span><br><span class="line">        move    $a1, $t1</span><br><span class="line">        jal        dfs</span><br><span class="line">        addi    $t2, $t0, -1</span><br><span class="line">        getIndex($t3, $s1, $t2, $t1)</span><br><span class="line">        sw        $0, flag($t3)</span><br><span class="line">    else_3:</span><br><span class="line">    addi    $t2, $t1, 1</span><br><span class="line">    beq        $t2, $s1, else_4</span><br><span class="line">    getIndex($t3, $s1, $t0, $t2)</span><br><span class="line">    lw        $t4, Map($t3)</span><br><span class="line">    bnez    $t4, else_4</span><br><span class="line">    lw        $t4, flag($t3)</span><br><span class="line">    bnez    $t4, else_4</span><br><span class="line">    if_4:</span><br><span class="line">        sw        $s5, flag($t3)</span><br><span class="line">        move    $a0, $t0</span><br><span class="line">        move    $a1, $t2</span><br><span class="line">        jal        dfs</span><br><span class="line">        addi    $t2, $t1, 1</span><br><span class="line">        getIndex($t3, $s1, $t0, $t2)</span><br><span class="line">        sw        $0, flag($t3)</span><br><span class="line">    else_4:</span><br><span class="line">    beqz    $t1, else_5</span><br><span class="line">    addi    $t2, $t1, -1</span><br><span class="line">    getIndex($t3, $s1, $t0, $t2)</span><br><span class="line">    lw        $t4, Map($t3)</span><br><span class="line">    bnez    $t4, else_5</span><br><span class="line">    lw        $t4, flag($t3)</span><br><span class="line">    bnez    $t4, else_5</span><br><span class="line">    if_5:</span><br><span class="line">        sw        $s5, flag($t3)</span><br><span class="line">        move    $a0, $t0</span><br><span class="line">        move    $a1, $t2</span><br><span class="line">        jal        dfs</span><br><span class="line">        addi    $t2, $t1, -1</span><br><span class="line">        getIndex($t3, $s1, $t0, $t2)</span><br><span class="line">        sw        $0, flag($t3)</span><br><span class="line">    else_5:</span><br><span class="line">    pop($t1)</span><br><span class="line">    pop($t0)</span><br><span class="line">    pop($ra)</span><br><span class="line">    jr        $ra</span><br><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="附加题q2-p2-l1-factorial">附加题Q2 P2_L1_factorial</h3><p>使用MIPS汇编语言编写一个求n的阶乘的汇编程序(不考虑延迟槽)。<br>具体要求：</p><ul><li>第一行读取n</li><li>计算并输出n的阶乘，输出字符串长度小于等于1000</li><li>步数限制为200,000</li><li>使用<code>syscall</code>结束程序</li></ul><hr><details class="folding-tag" green open><summary> C代码 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> n,len;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>, len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i&lt;=n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>;j &lt; len; ++j) &#123;</span><br><span class="line">            a[j] *= i;</span><br><span class="line">        &#125;</span><br><span class="line">        j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          对着翻译完才发现上面的for循环和while可以合成一个</span></span><br><span class="line"><span class="comment">          但是懒得改了，数据也弱（</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">while</span>(a[j] || j &lt; len) &#123;</span><br><span class="line">            a[j + <span class="number">1</span>] += a[j] / <span class="number">10</span>;</span><br><span class="line">            a[j] %= <span class="number">10</span>;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        len = j;</span><br><span class="line"><span class="comment">//        printf(&quot;%d %d\n&quot;, i, len);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" yellow><summary> Code(仅供参考) </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line">    arr:    .space    4000</span><br><span class="line">    space:    .asciiz    &quot; &quot;</span><br><span class="line">    enter:    .asciiz    &quot;\n&quot;</span><br><span class="line">    </span><br><span class="line">.macro end</span><br><span class="line">    li        $v0, 10</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro readInt(%d)</span><br><span class="line">    li        $v0, 5</span><br><span class="line">    syscall</span><br><span class="line">    move    %d, $v0</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printInt(%d)</span><br><span class="line">    li        $v0, 1</span><br><span class="line">    move    $a0, %d</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printEnter()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, enter</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.macro printSpace()</span><br><span class="line">    li        $v0, 4</span><br><span class="line">    la        $a0, space</span><br><span class="line">    syscall</span><br><span class="line">.end_macro</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">main:</span><br><span class="line">    readInt($s0)</span><br><span class="line">    li        $s1, 1            # len = 1</span><br><span class="line">    sw        $s1, arr($0)    # arr[0] = 1</span><br><span class="line">    li        $t0, 2            # i</span><br><span class="line">    li        $s2, 10            # const 10</span><br><span class="line">    loop_i_1:</span><br><span class="line">        bgt        $t0, $s0, end_loop_i_1</span><br><span class="line">        li        $t1, 0        # j</span><br><span class="line">        li        $t2, 0        # index of arr[]</span><br><span class="line">        loop_j_1:</span><br><span class="line">            beq        $t1, $s1, end_loop_j_1</span><br><span class="line">            lw        $t3, arr($t2)</span><br><span class="line">            mul        $t3, $t3, $t0</span><br><span class="line">            sw        $t3, arr($t2)</span><br><span class="line">            addi    $t2, $t2, 4</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        loop_j_1</span><br><span class="line">        end_loop_j_1:</span><br><span class="line">        li        $t1, 0</span><br><span class="line">        li        $t2, 0</span><br><span class="line">        while:</span><br><span class="line">            if_1:</span><br><span class="line">                lw        $t3, arr($t2)</span><br><span class="line">                beqz    $t3, if_2</span><br><span class="line">                j    else</span><br><span class="line">            if_2:</span><br><span class="line">                bge        $t1, $s1, end_while</span><br><span class="line">            else:</span><br><span class="line">            div        $t3, $s2</span><br><span class="line">            mfhi    $t3</span><br><span class="line">            sw        $t3, arr($t2)</span><br><span class="line">            addi    $t2, $t2, 4</span><br><span class="line">            lw        $t3, arr($t2)</span><br><span class="line">            mflo    $t4</span><br><span class="line">            add        $t3, $t3, $t4</span><br><span class="line">            sw        $t3, arr($t2)</span><br><span class="line">            addi    $t1, $t1, 1</span><br><span class="line">            j        while</span><br><span class="line">        end_while:</span><br><span class="line">        move    $s1, $t1</span><br><span class="line">        addi    $t0, $t0, 1</span><br><span class="line">        j        loop_i_1</span><br><span class="line">    end_loop_i_1:</span><br><span class="line">    addi    $t0, $s1, -1</span><br><span class="line">    sll        $t0, $t0, 2</span><br><span class="line">    loop:</span><br><span class="line">        lw        $t1, arr($t0)</span><br><span class="line">        printInt($t1)</span><br><span class="line">        beqz    $t0, end_loop</span><br><span class="line">        addi    $t0, $t0, -4</span><br><span class="line">        j        loop</span><br><span class="line">    end_loop:</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>              </div>            </details><h2 id="课上考试">课上考试</h2>]]></content>
      
      
      <categories>
          
          <category> BUAA计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
            <tag> MIPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 BUAA CO review: P1</title>
      <link href="/c2a41ca3.html"/>
      <url>/c2a41ca3.html</url>
      
        <content type="html"><![CDATA[<h2 id="课下提交">课下提交</h2><h3 id="q1-p1-l0-splitter">Q1 P1_L0_splitter</h3><div class="tabs" id="t1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t1-1">题目要求</button><button type="button" class="tab " data-href="t1-2">思路</button><button type="button" class="tab " data-href="t1-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t1-1"><p>使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span> 搭建一个32位 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">S</mi><mi mathvariant="bold">p</mi><mi mathvariant="bold">l</mi><mi mathvariant="bold">i</mi><mi mathvariant="bold">t</mi><mi mathvariant="bold">t</mi><mi mathvariant="bold">e</mi><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\bf{Splitter}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">S</span><span class="mord mathbf">p</span><span class="mord mathbf">l</span><span class="mord mathbf">i</span><span class="mord mathbf">t</span><span class="mord mathbf">t</span><span class="mord mathbf">e</span><span class="mord mathbf">r</span></span></span></span></span></span> , 给定一个32位的二进制数作为输入，将其划分为四个8位的二进制数作为输出。</p><p>模块名：splitter</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">A[31:0]</td><td style="text-align:center">I</td><td>输入的二进制数</td></tr><tr><td style="text-align:center">O1[7:0]</td><td style="text-align:center">O</td><td>A的[31:24]位</td></tr><tr><td style="text-align:center">O2[7:0]</td><td style="text-align:center">O</td><td>A的[23:16]位</td></tr><tr><td style="text-align:center">O3[7:0]</td><td style="text-align:center">O</td><td>A的[15:8]位</td></tr><tr><td style="text-align:center">O4[7:0]</td><td style="text-align:center">O</td><td>A的[7:0]位</td></tr></tbody></table></div><div class="tab-item-content" id="t1-2"><p>没什么好说的，直接<code>assign</code>即可</p></div><div class="tab-item-content" id="t1-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> splitter(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] O1,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] O2,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] O3,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">7</span>:<span class="number">0</span>] O4</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> O1 = A[<span class="number">31</span>:<span class="number">24</span>];</span><br><span class="line">    <span class="keyword">assign</span> O2 = A[<span class="number">23</span>:<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">assign</span> O3 = A[<span class="number">15</span>:<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">assign</span> O4 = A[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q2-p1-l0-alu">Q2 P1_L0_ALU</h3><div class="tabs" id="t2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t2-1">题目要求</button><button type="button" class="tab " data-href="t2-2">思路</button><button type="button" class="tab " data-href="t2-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t2-1"><p>使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span> 搭建一个 32 位六运算 ALU 并提交。具体模块端口定义如下：<br>模块名：alu</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">A[31:0]</td><td style="text-align:center">I</td><td>参与ALU计算的第一个值</td></tr><tr><td style="text-align:center">B[31:0]</td><td style="text-align:center">I</td><td>参与ALU计算的第二个值</td></tr><tr><td style="text-align:center">ALUOp[2:0]</td><td style="text-align:center">I</td><td>ALU功能的选择信号<br>000: ALU进行加法运算<br>001: ALU进行减法运算<br>010: ALU进行与运算<br>011: ALU进行或运算<br>100: ALU进行逻辑右移<br>101: ALU进行算数右移</td></tr><tr><td style="text-align:center">C[31:0]</td><td style="text-align:center">O</td><td>ALU的计算结果</td></tr></tbody></table><p>模块功能定义如下：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">功能名称</th><th>功能描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">无符号加运算</td><td>C=A+B (A,B无符号)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">无符号减运算</td><td>C=A-B (A,B无符号)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">与运算</td><td>C=A&amp;B</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">或运算</td><td>C=A|B</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">逻辑右移</td><td>C=A&gt;&gt;B (A,B无符号)</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">算术右移</td><td>C=A&gt;&gt;&gt;B (A有符号,B无符号)</td></tr></tbody></table></div><div class="tab-item-content" id="t2-2"><div class="note primary flat"><p>需要注意的是算术右移的处理，<code>$signed()</code>的使用</p></div></div><div class="tab-item-content" id="t2-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> alu(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] A,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] B,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] ALUOp,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] C</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">31</span>:<span class="number">0</span>] shift_right;</span><br><span class="line">    <span class="comment">//放在外面先计算好, 免得符号出错</span></span><br><span class="line">    <span class="keyword">assign</span> shift_right = <span class="built_in">$signed</span>(A) &gt;&gt;&gt; B;</span><br><span class="line">    <span class="keyword">assign</span> C = (ALUOp == <span class="number">3&#x27;b000</span>) ? (A + B) :</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b001</span>) ? (A - B) :</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b010</span>) ? (A &amp; B) :</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b011</span>) ? (A | B) :</span><br><span class="line">               (ALUOp == <span class="number">3&#x27;b100</span>) ? (A &gt;&gt; B) : shift_right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q3-p1-l0-ext">Q3 P1_L0_EXT</h3><div class="tabs" id="t3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t3-1">题目要求</button><button type="button" class="tab " data-href="t3-2">思路</button><button type="button" class="tab " data-href="t3-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t3-1"><p>使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span> 实现 EXT 。EXT为扩展单元，其主要功能是完成将输入到其中的16位数据进行符号扩展、零扩展以及将输入的16位数加载到高位等操作。具体模块端口定义如下：<br>模块名：ext</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">imm[15:0]</td><td style="text-align:center">I</td><td>输入EXT内部需要被扩展的16位数据</td></tr><tr><td style="text-align:center">Eop[1:0]</td><td style="text-align:center">I</td><td>输入数据进行扩展的方式的选择信号<br>00: 将imm进<strong>行符号扩展</strong>到32位<br>01: 将imm进行<strong>高位零扩展</strong>到32位<br>10: 将imm加载到高位，低位补0<br>11: 将imm进行符号扩展后左移两格</td></tr><tr><td style="text-align:center">ext[31:0]</td><td style="text-align:center">O</td><td>进行扩展之后的输出数据</td></tr></tbody></table><p>模块功能定义如下：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">功能名称</th><th>功能描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">符号扩展</td><td>将Input进行符号扩展到32位</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">零扩展</td><td>将Input进行高位补零扩展到32位</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">加载到高位</td><td>将Input加载到高位，低位补0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">符号扩展后左移</td><td>将Input符号扩展后，左移两位</td></tr></tbody></table></div><div class="tab-item-content" id="t3-2"><ul><li>使用位拼接运算符处理即可</li><li>需要注意的是，<strong>常数必须指明位宽</strong>，否则默认为32位；同时，拼接可以嵌套，但需要用<code>{}</code>括起来</li></ul></div><div class="tab-item-content" id="t3-3"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`timescale 1ns / 1ps</span><br><span class="line">module ext(</span><br><span class="line">    input [15:0] imm,</span><br><span class="line">    input [1:0] EOp,</span><br><span class="line">    output [31:0] ext</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    assign ext = (EOp == 2&#x27;b00) ? &#123;&#123;16&#123;imm[15]&#125;&#125;, imm&#125; :</span><br><span class="line">                 (EOp == 2&#x27;b01) ? &#123;16&#x27;b0, imm&#125; :</span><br><span class="line">                 (EOp == 2&#x27;b10) ? &#123;imm, &#123;16&#123;1&#x27;b0&#125;&#125;&#125; : (&#123;&#123;16&#123;imm[15]&#125;&#125;, imm&#125; &lt;&lt; 2);</span><br><span class="line">    end</span><br><span class="line">endmodule</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q4-p1-l0-gray">Q4 P1_L0_gray</h3><div class="tabs" id="t4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t4-1">题目要求</button><button type="button" class="tab " data-href="t4-2">思路</button><button type="button" class="tab " data-href="t4-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t4-1"><p>使用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span> 设计一个格雷码计数器。模块端口定义如下：<br>模块名：gray</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">Clk</td><td style="text-align:center">I</td><td>时钟信号</td></tr><tr><td style="text-align:center">Reset</td><td style="text-align:center">I</td><td><strong>同步</strong>复位信号</td></tr><tr><td style="text-align:center">En</td><td style="text-align:center">I</td><td>使能信号</td></tr><tr><td style="text-align:center">Output[2:0]</td><td style="text-align:center">O</td><td>计数器当前值</td></tr><tr><td style="text-align:center">Overflow</td><td style="text-align:center">O</td><td>溢出标志位</td></tr></tbody></table><p>要求实现功能如下：</p><ol><li>在任意一个时钟上升沿到来的时候，如果复位信号有效，则将计数器清零</li><li>每个时钟上升沿到来的时候，如果使能信号有效，计数器的值+1</li><li>在满足1时，即使2的条件满足，也不必执行2</li><li>计数器初值为0</li><li>当计数器的值在+1后出现溢出的情况时，将会回到零，同时从发生溢出的这个时钟上升沿开始，溢出标志位将会持续输出1，直到计数器被清零为止（其余情况下溢出标志位必须为0）</li></ol><div class="note info flat"><p>关于<a href="https://oi-wiki.org/misc/gray-code/">格雷码</a></p></div></div><div class="tab-item-content" id="t4-2"><ul><li>对于格雷码，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mo>⊕</mo><mrow><mo fence="true">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo fence="true">⌋</mo></mrow></mrow><annotation encoding="application/x-tex">G(n) = n \oplus \left \lfloor \frac{n}{2} \right \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">G</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.20001em;vertical-align:-0.35001em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">⌊</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">⌋</span></span></span></span></span></span></li><li>其余部分就是普通计数器</li></ul></div><div class="tab-item-content" id="t4-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> gray(</span><br><span class="line">    <span class="keyword">input</span> Clk,</span><br><span class="line">    <span class="keyword">input</span> Reset,</span><br><span class="line">    <span class="keyword">input</span> En,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] Output,</span><br><span class="line">    <span class="keyword">output</span> Overflow</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">2</span>:<span class="number">0</span>] st; </span><br><span class="line">    <span class="keyword">reg</span> flag;</span><br><span class="line">    <span class="keyword">assign</span> Output = st ^ (st &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">assign</span> Overflow = flag; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> Clk) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (Reset) <span class="keyword">begin</span></span><br><span class="line">            st &lt;= <span class="number">0</span>;</span><br><span class="line">            flag &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (En) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (st == <span class="number">3&#x27;d7</span>) <span class="keyword">begin</span></span><br><span class="line">                    st &lt;= <span class="number">3&#x27;d0</span>;</span><br><span class="line">                    flag &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> st &lt;= st + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> st &lt;= st;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q5-p1-l0-表达式状态机">Q5 P1_L0_表达式状态机</h3><div class="tabs" id="t1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t1-1">题目要求</button><button type="button" class="tab " data-href="t1-2">思路</button><button type="button" class="tab " data-href="t1-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t1-1"><p>现在，我们需要你用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi><mi mathvariant="script">H</mi><mi mathvariant="script">D</mi><mi mathvariant="script">L</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog HDL}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathcal" style="margin-right:0.00965em;">H</span><span class="mord mathcal" style="margin-right:0.02778em;">D</span><span class="mord mathcal">L</span></span></span></span></span> 语言设计一个有限状态机来识别这样一类表达式F：</p><ul><li>表达式F中只含有数字0-9，加号+，乘号*。</li><li>表达式F可以按如下的规则产生：<ul><li>单个数字[0-9]是F</li><li>如果X是F，Y是F，X+Y也是F</li><li>如果X是F，Y是F，X*Y也是F</li></ul></li></ul><p>模块规格：<br>模块名：expr</p><table><thead><tr><th style="text-align:center">端口名</th><th style="text-align:center">位宽</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">clk</td><td style="text-align:center">1</td><td>接收时钟信号</td></tr><tr><td style="text-align:center">clr</td><td style="text-align:center">1</td><td>接收<strong>异步</strong>清零信号</td></tr><tr><td style="text-align:center">in[7:0]</td><td style="text-align:center">8</td><td>接收逐个输入的字符，用 ASCII 编码</td></tr><tr><td style="text-align:center">out</td><td style="text-align:center">1</td><td>输出合法性信号</td></tr></tbody></table><ul><li>每个时钟上升沿，状态机从 in 中读入一个ASCII编码的字符。假设读入的第i个字符为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">c_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，则第n个时钟上升沿时，可以拼出一个字符串: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><msub><mi>c</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>c</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">s=c_1c_2 \cdots c_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>此时若s符合F的定义，那么 out 应输出1，否则输出0</li><li>如果s当前是空串，out也应输出0。清零后，上面定义的字符串s也应从空串开始计算</li></ul></div><div class="tab-item-content" id="t1-2"><ul><li>考虑这几种状态：<ol><li>S0: 当前字符串为空</li><li>S1: 当前字符串为F（即合法）</li><li>S2：字符串为<code>F+</code> or <code>F*</code></li><li>S3：字符串非法，如<code>99</code>、<code>+9</code>、<code>++</code>等（此时只能等待清零信号）</li></ol></li><li>注意要异步清零</li></ul></div><div class="tab-item-content" id="t1-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> expr(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> clr,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> out</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">1</span>:<span class="number">0</span>] st;</span><br><span class="line">    <span class="keyword">wire</span> [<span class="number">1</span>:<span class="number">0</span>] check = (in &gt;= <span class="string">&quot;0&quot;</span> &amp;&amp; in &lt;= <span class="string">&quot;9&quot;</span>) ? <span class="number">2&#x27;b01</span> :</span><br><span class="line">                       (in == <span class="string">&quot;+&quot;</span> || in == <span class="string">&quot;*&quot;</span>) ? <span class="number">2&#x27;b10</span> : <span class="number">2&#x27;b00</span>;</span><br><span class="line">    <span class="keyword">assign</span> out = (st == <span class="number">2&#x27;d1</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> clr) <span class="keyword">begin</span></span><br><span class="line">    <span class="comment">//异步清零</span></span><br><span class="line">        <span class="keyword">if</span> (clr == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">case</span> (st)</span><br><span class="line">            <span class="number">2&#x27;d0</span>: <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (check == <span class="number">2&#x27;b01</span>) st &lt;= <span class="number">2&#x27;d1</span>;</span><br><span class="line">                <span class="keyword">else</span> st &lt;= <span class="number">2&#x27;d3</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">2&#x27;d1</span>: <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (check == <span class="number">2&#x27;b10</span>) st &lt;= <span class="number">2&#x27;d2</span>;</span><br><span class="line">                <span class="keyword">else</span> st &lt;= <span class="number">2&#x27;d3</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">2&#x27;d2</span>: <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (check == <span class="number">2&#x27;b01</span>) st &lt;= <span class="number">2&#x27;d1</span>;</span><br><span class="line">                <span class="keyword">else</span> st &lt;= <span class="number">2&#x27;d3</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="number">2&#x27;d3</span>: st &lt;= st;</span><br><span class="line">            <span class="keyword">default</span>: st &lt;= <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="附加题q1-p1-l1-blockchecker">附加题Q1 P1_L1_BlockChecker</h3><div class="tabs" id="t6"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t6-1">题目要求</button><button type="button" class="tab " data-href="t6-2">思路</button><button type="button" class="tab " data-href="t6-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t6-1"><p>现在需要你用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">V</mi><mi mathvariant="script">e</mi><mi mathvariant="script">r</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">o</mi><mi mathvariant="script">g</mi></mrow><annotation encoding="application/x-tex">\mathcal{Verilog}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.08222em;">V</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span>语言编写一个模拟语句块检查的工具。<br>为了简化要求，输入由ASCII字母和空格组成。一个或多个连续出现的字母构成一个单词，单词不区分大小写，单词之间由一个或多个空格分隔开。检查工具检查自复位之后的输入中，begin和end是否能够匹配。</p><p>匹配规则类似括号匹配：一个begin只能匹配一个end，但是一个匹配的begin必须出现在对应的end之前；<strong>允许出现嵌套</strong>；最后若出现不能按上述规则匹配的begin或end，则匹配失败。<br>输入的读取在时钟上升沿进行。</p><p>匹配示例：Hello world，begin comPuTer orGANization End。</p><p>不匹配示例：eND，beGin study。</p><p>模块端口定义如下：<br>模块名：BlockChecker</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">clk</td><td style="text-align:center">I</td><td>时钟信号</td></tr><tr><td style="text-align:center">reset</td><td style="text-align:center">I</td><td>异步复位信号（高电平有效，复位时将输入记录清空）</td></tr><tr><td style="text-align:center">in[7:0]</td><td style="text-align:center">I</td><td>当前输入字符的ASCII码</td></tr><tr><td style="text-align:center">result</td><td style="text-align:center">O</td><td>当前输入是否能够完成begin和end的匹配</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/example_blockchecker.png" alt="示例波形"></p></div><div class="tab-item-content" id="t6-2"><ul><li>显然，这题需要统计<code>begin</code>和<code>end</code>单词的数量差，<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="monospace">m</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">s</mi><mi mathvariant="monospace">m</mi><mi mathvariant="monospace">a</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>=</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="monospace">m</mi><mi mathvariant="monospace">a</mi><mi mathvariant="monospace">t</mi><mi mathvariant="monospace">c</mi><mi mathvariant="monospace">h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>&lt;</mo><mn>0</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">l</mi><mi mathvariant="monospace">e</mi><mi mathvariant="monospace">g</mi><mi mathvariant="monospace">a</mi><mi mathvariant="monospace">l</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">count\begin{cases} &gt;0 ,&amp;\tt{mismatch} \\ =0 ,&amp;\tt{match} \\ &lt;0 ,&amp;\tt{illegal}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathtt">m</span><span class="mord mathtt">i</span><span class="mord mathtt">s</span><span class="mord mathtt">m</span><span class="mord mathtt">a</span><span class="mord mathtt">t</span><span class="mord mathtt">c</span><span class="mord mathtt">h</span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathtt">m</span><span class="mord mathtt">a</span><span class="mord mathtt">t</span><span class="mord mathtt">c</span><span class="mord mathtt">h</span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mord mathtt">i</span><span class="mord mathtt">l</span><span class="mord mathtt">l</span><span class="mord mathtt">e</span><span class="mord mathtt">g</span><span class="mord mathtt">a</span><span class="mord mathtt">l</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li>同时，需要注意区分<code>begin</code>和<code>beginx</code>(<code>end</code>和<code>endx</code>)</li><li>处理组合逻辑和时序逻辑的时候，注意不要让同一个<code>reg</code>变量在多个<code>always</code>块中被赋值，否则会<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">C</mi><mi mathvariant="script">o</mi><mi mathvariant="script">m</mi><mi mathvariant="script">p</mi><mi mathvariant="script">i</mi><mi mathvariant="script">l</mi><mi mathvariant="script">e</mi><mi mathvariant="script">E</mi><mi mathvariant="script">r</mi><mi mathvariant="script">r</mi><mi mathvariant="script">o</mi><mi mathvariant="script">r</mi></mrow><annotation encoding="application/x-tex">\mathcal{Compile Error}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathcal" style="margin-right:0.05834em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">m</span><span class="mord mathdefault">p</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span><span class="mord mathcal" style="margin-right:0.08944em;">E</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></span></li><li>state：<ol><li>S0: 等待单词读入(此时为空或空格)</li><li>S1: 处理非<code>begin</code>和<code>end</code>的单词</li><li>S2-S5: 判断<code>begin</code></li><li>S6: 已读入一个<code>begin</code>, <code>读入空格-&gt;S7</code> <code>else -&gt;S1</code></li><li>S7: 一个<code>begin</code>单词</li><li>S8-S9: 判断<code>end</code></li><li>S10: 已读入一个<code>end</code>, <code>读入空格-&gt;S11</code> <code>else -&gt;S1</code></li><li>S11: 一个<code>end</code>单词</li><li><code>default</code></li></ol></li></ul></div><div class="tab-item-content" id="t6-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> BlockChecker(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> reset,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">7</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="comment">// output reg [3:0] st, </span></span><br><span class="line">    <span class="keyword">output</span> result</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">wire</span> letter = (in == <span class="string">&quot; &quot;</span>) ? <span class="number">1&#x27;b0</span> : <span class="number">1&#x27;b1</span>;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">31</span>:<span class="number">0</span>] cnt;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] st;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assign</span> result = (cnt == <span class="number">32&#x27;b0</span> &amp;&amp; st != <span class="number">4&#x27;d6</span> &amp;&amp; st != <span class="number">4&#x27;d10</span>) ? <span class="number">1&#x27;b1</span> :</span><br><span class="line">                    (cnt == <span class="number">32&#x27;b1</span> &amp;&amp; st == <span class="number">4&#x27;d10</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (st, cnt, reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset == <span class="number">1&#x27;b1</span>) cnt = <span class="number">32&#x27;b0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (cnt != <span class="number">32&#x27;hffff</span>) <span class="keyword">begin</span></span><br><span class="line">                <span class="keyword">if</span> (st == <span class="number">4&#x27;d7</span>) <span class="keyword">begin</span></span><br><span class="line">                    cnt = cnt + <span class="number">32&#x27;b1</span>;<span class="comment">//begin</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (st == <span class="number">4&#x27;d11</span>) <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt == <span class="number">32&#x27;b0</span>) cnt = <span class="number">32&#x27;hffff</span>;</span><br><span class="line">                    <span class="comment">//赋了一个很大的值</span></span><br><span class="line">                    <span class="keyword">else</span> cnt = cnt - <span class="number">32&#x27;b1</span>;<span class="comment">//end</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">else</span> cnt = cnt;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> cnt = cnt;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">posedge</span> reset) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (reset == <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">            st &lt;= <span class="number">4&#x27;d0</span>; </span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">case</span> (st)</span><br><span class="line">                <span class="number">4&#x27;d0</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">                        <span class="keyword">if</span> (in == <span class="string">&quot;b&quot;</span> || in == <span class="string">&quot;B&quot;</span>) st &lt;= <span class="number">4&#x27;d2</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span> || in == <span class="string">&quot;E&quot;</span>) st&lt;= <span class="number">4&#x27;d8</span>;</span><br><span class="line">                        <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">end</span></span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d1</span>: <span class="keyword">begin</span><span class="comment">//其他单词</span></span><br><span class="line">                    <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d2</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span> || in == <span class="string">&quot;E&quot;</span>) st &lt;= <span class="number">4&#x27;d3</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d3</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;g&quot;</span> || in == <span class="string">&quot;G&quot;</span>) st &lt;= <span class="number">4&#x27;d4</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d4</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;i&quot;</span> || in == <span class="string">&quot;I&quot;</span>) st &lt;= <span class="number">4&#x27;d5</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d5</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;n&quot;</span> || in == <span class="string">&quot;N&quot;</span>) st &lt;= <span class="number">4&#x27;d6</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d6</span>: <span class="keyword">begin</span><span class="comment">//出现begin字串</span></span><br><span class="line">                    <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d7</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">4&#x27;d7</span>: <span class="keyword">begin</span><span class="comment">//出现begin单词</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;b&quot;</span> || in == <span class="string">&quot;B&quot;</span>) st &lt;= <span class="number">4&#x27;d2</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span> || in == <span class="string">&quot;E&quot;</span>) st &lt;= <span class="number">4&#x27;d8</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">&#x27;d8</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;n&quot;</span> || in == <span class="string">&quot;N&quot;</span>) st &lt;= <span class="number">4&#x27;d9</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">&#x27;d9</span>: <span class="keyword">begin</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;d&quot;</span> || in == <span class="string">&quot;D&quot;</span>) st &lt;= <span class="number">4&#x27;d10</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">&#x27;d10</span>: <span class="keyword">begin</span><span class="comment">//出现end字串</span></span><br><span class="line">                    <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d11</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="number">&#x27;d11</span>: <span class="keyword">begin</span><span class="comment">//出现end单词</span></span><br><span class="line">                    <span class="keyword">if</span> (in == <span class="string">&quot;b&quot;</span> || in == <span class="string">&quot;B&quot;</span>) st &lt;= <span class="number">4&#x27;d2</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;e&quot;</span> || in == <span class="string">&quot;E&quot;</span>) st &lt;= <span class="number">4&#x27;d8</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (letter == <span class="number">1&#x27;b1</span>) st &lt;= <span class="number">4&#x27;d1</span>;</span><br><span class="line">                    <span class="keyword">else</span> st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">                <span class="keyword">default</span>: st &lt;= <span class="number">4&#x27;d0</span>;</span><br><span class="line">            <span class="keyword">endcase</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="课上考试">课上考试</h2><h3 id="q1-p1-l1-dotproduct-2023">Q1 P1_L1_dotProduct_2023</h3><div class="tabs" id="t7"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t7-1">题目要求</button><button type="button" class="tab " data-href="t7-2">思路</button><button type="button" class="tab " data-href="t7-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t7-1"><p>请你设计一个向量点乘模块，实现向量的点乘操作。</p><p>为了简化题目，我们用两个位宽为 32 的 wire 型变量来表示两个需要点乘的 32 维向量，也就是说，向量任何一个维度的值只能为 0 或 1。你需要将两个向量同一位置相乘并将所有位置的乘积相加输出。</p><p>模块端口定义如下：<br>模块名：dotProduct</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">vector_a[31:0]</td><td style="text-align:center">input</td><td>需要点乘的向量a</td></tr><tr><td style="text-align:center">vector_b[31:0]</td><td style="text-align:center">input</td><td>需要点乘的向量b</td></tr><tr><td style="text-align:center">result[5:0]</td><td style="text-align:center">output</td><td>点乘结果</td></tr></tbody></table></div><div class="tab-item-content" id="t7-2"><ul><li>显然，1位二进制数的乘法和<code>&amp;</code>操作等价，故答案为<code>vector_a</code>和<code>vector_b</code>各位相与之和</li><li>故此题用<code>for</code>循环解决即可，或者<kbd>ctrl</kbd> + <kbd>c</kbd> <kbd>v</kbd>32次（</li></ul></div><div class="tab-item-content" id="t7-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> dotProduct(</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] vector_a, </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] vector_b,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">5</span>:<span class="number">0</span>] result</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">integer</span> i;</span><br><span class="line">    <span class="keyword">always</span> @(vector_a, vector_b) <span class="keyword">begin</span></span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记得初始化，惨痛教训</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6&#x27;d32</span>; i = i + <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> ((vector_a[i] &amp; vector_b[i]) == <span class="number">1&#x27;b1</span>) <span class="keyword">begin</span></span><br><span class="line">                result = result + <span class="number">6&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                result = result;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q2-p1-l4-coloring-2023">Q2 P1_L4_coloring_2023</h3><div class="tabs" id="t8"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t8-1">题目要求</button><button type="button" class="tab " data-href="t8-2">思路</button><button type="button" class="tab " data-href="t8-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t8-1"><p>小 B 同学准备对一列格子进行涂色，他想要使用红色，绿色，蓝色三种颜色，但是要求如下：同一颜色不得连续出现三次，红色不得与绿色相连。</p><p>我们将在每个周期通过 color 端口输入一个颜色代号：0（红色），1（绿色），2（蓝色），你需要设计 Moore 状态机来检测该涂色序列的合法性，并在检测到不合法的序列之后将输出端口 check 置为 1。</p><p>另外，在检测到不合法序列之后，小 B 同学会将最近的一次涂色擦除，重新涂色。</p><p>模块端口定义如下：<br>模块名：coloring</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">clk</td><td style="text-align:center">I</td><td>时钟信号</td></tr><tr><td style="text-align:center">rst_n</td><td style="text-align:center">I</td><td>异步复位信号（低电平有效）</td></tr><tr><td style="text-align:center">color[1:0]</td><td style="text-align:center">I</td><td>涂色信号</td></tr><tr><td style="text-align:center">check</td><td style="text-align:center">O</td><td>当前序列合法性</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/wave.png" alt="实例波形"></p></div><div class="tab-item-content" id="t8-2"><div class="note success simple"><p>法一:<br>有限状态机直接设好状态做就行，这里就不给出状态表了<s>因为我没用这种做法</s></p></div><div class="note success simple"><p>法二:</p><ul><li>对于这道题，可以发现只需要判断，输入的序列连续两个或三个是什么颜色即可</li><li>于是可以用四位<code>state</code>表示最近两次成功涂色，<code>in</code>为即将涂上的颜色，这样就可以很简单地进行状态的判断和转移</li><li>需要注意的是，判断当前序列合法后，才能给<code>state</code>更新</li></ul></div><div class="note warning flat"><p>低电平有效的异步复位的正确写法：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">if</span> (rst_n == <span class="number">1&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//reset</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">        <span class="comment">//……</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-item-content" id="t8-3"><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1ns / 1ps</span></span><br><span class="line"><span class="keyword">module</span> coloring(</span><br><span class="line">    <span class="keyword">input</span> clk,</span><br><span class="line">    <span class="keyword">input</span> rst_n,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">1</span>:<span class="number">0</span>] color,</span><br><span class="line">    <span class="keyword">output</span>  check</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">reg</span> flag;</span><br><span class="line">    <span class="keyword">reg</span> [<span class="number">3</span>:<span class="number">0</span>] st;</span><br><span class="line">    <span class="keyword">assign</span> check = (flag == <span class="number">1&#x27;b1</span>) ? <span class="number">1&#x27;b1</span> : <span class="number">1&#x27;b0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">always</span> @ (<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span> (rst_n == <span class="number">1&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">            flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            st &lt;= <span class="number">4&#x27;hf</span>;</span><br><span class="line">            <span class="comment">//避免st初始状态为0(错误表示成红色)的情况</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">            <span class="keyword">if</span> (st[<span class="number">3</span>:<span class="number">2</span>] == st[<span class="number">1</span>:<span class="number">0</span>] &amp;&amp; st[<span class="number">1</span>:<span class="number">0</span>] == color) <span class="keyword">begin</span></span><br><span class="line">                st &lt;= st;</span><br><span class="line">                flag &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((st[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b00</span> &amp;&amp; color == <span class="number">2&#x27;b01</span>) || (st[<span class="number">1</span>:<span class="number">0</span>] == <span class="number">2&#x27;b01</span> &amp;&amp; color == <span class="number">2&#x27;b00</span>)) <span class="keyword">begin</span></span><br><span class="line">                st &lt;= st;</span><br><span class="line">                flag &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">                st &lt;= &#123;st[<span class="number">1</span>:<span class="number">0</span>], color&#125;;</span><br><span class="line">                flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q3-p1-l5-numbernest-2023">Q3 P1_L5_numberNest_2023</h3><p><s>题面忘了，先咕了</s></p>]]></content>
      
      
      <categories>
          
          <category> BUAA计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
            <tag> Verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 BUAA CO review: P0</title>
      <link href="/b5a32c35.html"/>
      <url>/b5a32c35.html</url>
      
        <content type="html"><![CDATA[<h2 id="课下提交">课下提交</h2><h3 id="q1-p0-l0-crc-题目编号1119-13">Q1 P0_L0_CRC(题目编号1119-13)</h3><div class="tabs" id="t1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t1-1">提交要求</button><button type="button" class="tab " data-href="t1-2">思路</button><button type="button" class="tab " data-href="t1-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t1-1"><p>使用Logisim搭建一个除数为四位，原数据帧为8位的CRC校验码计算电路。具体模块端口定义如下：</p><table><thead><tr><th>信号名</th><th>方向</th><th>描述</th></tr></thead><tbody><tr><td>A[7:0]</td><td>I</td><td>8位原数据帧</td></tr><tr><td>B[3:0]</td><td>I</td><td>4位除数</td></tr><tr><td>C[10:0]</td><td>O</td><td>8位原数据帧 + 3位校验码</td></tr></tbody></table><ul><li>文件内模块名：<strong>CRC</strong></li><li>规定除数的最高位一定为1，不必考虑非1的情况</li></ul><div class="note info flat"><p>关于CRC校验码，可以看看这位大佬的<a href="http://cscore.buaa.edu.cn/#/discussion_area/959/1286/posts">总结</a></p></div></div><div class="tab-item-content" id="t1-2"><ul><li>由题意，需要进行8次四位模二除法，每次将上一次的余数输出，<br>拼接一位被除数作为下一次四位模二除法的被除数输入</li><li>对于四位模二除法，若被除数最高位为1，则商为1，余数为被除数与除数异或<br>若最高位为0，则商为0，余数直接等于被除数</li></ul></div><div class="tab-item-content" id="t1-3"><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/crc.png" alt="CRC"></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/crc_4bit_div.png" alt="四位模二除法"></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/crc_next.png" alt="拼接得到被除数"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q2-p0-l0-grf-1119-269">Q2 P0_L0_GRF(1119-269)</h3><div class="tabs" id="t2"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t2-1">提交要求</button><button type="button" class="tab " data-href="t2-2">思路</button><button type="button" class="tab " data-href="t2-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t2-1"><p>使用logisim搭建一个GRF。GRF中包含32个32位寄存器，分别对应0~31号寄存器，其中0号寄存器读取的结果恒为0。具体模块端口定义如下：</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">clk</td><td style="text-align:center">I</td><td>时钟信号</td></tr><tr><td style="text-align:center">reset</td><td style="text-align:center">I</td><td>复位信号，将32个寄存器中的值全部清零<br>1: 复位<br>0: 无效<br></td></tr><tr><td style="text-align:center">WE</td><td style="text-align:center">I</td><td>写使能信号<br>1: 可向GRF中写入数据<br>0: 不能向GRF中写入数据</td></tr><tr><td style="text-align:center">A1</td><td style="text-align:center">I</td><td>5位地址输入信号，指定32个寄存器中的一个，将其中储存的数据读出到RD1</td></tr><tr><td style="text-align:center">A2</td><td style="text-align:center">I</td><td>5位地址输入信号，指定32个寄存器中的一个，将其中储存的数据读出到RD2</td></tr><tr><td style="text-align:center">A3</td><td style="text-align:center">I</td><td>5位地址输入信号，指定32个寄存器中的一个，作为写入的目标寄存器</td></tr><tr><td style="text-align:center">WD</td><td style="text-align:center">I</td><td>32位数据输入信号</td></tr><tr><td style="text-align:center">RD1</td><td style="text-align:center">O</td><td>输出A1指定的寄存器中的32位数据</td></tr><tr><td style="text-align:center">RD2</td><td style="text-align:center">O</td><td>输出A2指定的寄存器中的32位数据</td></tr></tbody></table><p>模块功能定义如下：</p><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">功能名称</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">复位</td><td>reset信号有效时，所有的寄存器储存的数值清零，其行为与logisim自带部件的reset接口完全相同</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">读数据</td><td>读出A1,A2地址对应寄存器中所储存的数据到RD1,RD2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">写数据</td><td>当WE有效且时钟上升沿来临时，将WD写入A3对应的寄存器中</td></tr></tbody></table><ul><li>0号寄存器读出的数据在<mark class="hl-label red">任何时刻</mark> 都为0</li><li>文件内模块名：<strong>grf</strong></li></ul></div><div class="tab-item-content" id="t2-2"><ul><li>由题目的要求可知，在根据<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mn>3</mn></mrow><annotation encoding="application/x-tex">A3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord">3</span></span></span></span>的值将数据写入对应寄存器的同时，还需要<strong>保持其他寄存器不变</strong></li></ul><div class="note success simple"><p>方法一：</p><ul><li>32个寄存器，每个输入端口接上对应的Tunnel，Tunnel到一个DMX上</li><li>将DMX的<code>Three-state</code>属性设置为<code>Yes</code>，<code>Disabled Output</code>属性设置为<code>Floating</code>。这样，DMX使能时，除选中的输出为输入值外，其余输出均为浮空值（高阻态x）；不使能时，所有输出都为x。而<strong>Register在输入端为x时不更新</strong>，故满足题目需求。</li></ul></div><div class="note success simple"><p>方法二：</p><ul><li>每个寄存器<code>Enable</code>端接上对应的Tunnel，Tunnel到一个Deco上</li><li>将Deco的<code>Three-state</code>属性设置为<code>Yes</code>，<code>Disabled Output</code>属性设置为<code>Zero</code>。（<strong>Register在<code>Enable</code>端为x时依然会使能</strong>）</li></ul></div><ul><li>最后注意0号寄存器，可以不设置输出，也可以设置<code>reset</code>为常量<code>1</code></li></ul></div><div class="tab-item-content" id="t2-3"><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/grf.png" alt="GRF"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q3-p0-l1-navigation-2020-1119-393">Q3 P0_L1_navigation_2020(1119-393)</h3><div class="tabs" id="t3"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t3-1">题目要求</button><button type="button" class="tab " data-href="t3-2">思路</button><button type="button" class="tab " data-href="t3-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t3-1"><p>用logisim搭建一个可以导航的<strong>Moore型有限状态机</strong>，通过输入序列判断是否到达B</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/393-1.png" alt=""></p><ul><li>题目要求：</li></ul><blockquote><ol><li>只能往东南西北四个方向行走，且若能行走，则每次<strong>只能行走一格</strong>。若下一步&gt;撞墙，则<strong>将hit置高一周期</strong>并保持原地不动，等待下一周期再进行运动。（若下一步不会撞墙，则继续行进，hit在此周期置0）</li><li>走到B机房后，<strong>“到达”信号需要置位，并保持一周期</strong>。到达B机房后计小组将会在下一周期回到原点，（下一周期的输入将被忽略掉）等待下下周期的输入，继续测试他的序列。</li><li>计小组在时钟上升沿的时候就已经知道自己下一步的方向并且瞬移过去，并且立即做出判断。</li></ol></blockquote><ul><li>端口定义：</li></ul><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">dir[1:0]</td><td style="text-align:center">I</td><td>表示行走的方向 00：向北走 01：向东走 10：向南走 11：向西走</td></tr><tr><td style="text-align:center">clk</td><td style="text-align:center">I</td><td>时钟信号</td></tr><tr><td style="text-align:center">reset</td><td style="text-align:center">I</td><td>异步复位信号</td></tr><tr><td style="text-align:center">arrive</td><td style="text-align:center">O</td><td>是否到达</td></tr><tr><td style="text-align:center">hit</td><td style="text-align:center">O</td><td>是否撞上墙壁</td></tr></tbody></table><ul><li>模块名：navigation</li></ul></div><div class="tab-item-content" id="t3-2"><p>画出状态转移图</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/nav_fsm.png" alt=""></p><p>然后根据转移表<code>Analyze Circuit</code>即可</p></div><div class="tab-item-content" id="t3-3"><p>只展示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="monospace">m</mi><mi mathvariant="monospace">a</mi><mi mathvariant="monospace">i</mi><mi mathvariant="monospace">n</mi></mrow><annotation encoding="application/x-tex">\tt{main}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathtt">m</span><span class="mord mathtt">a</span><span class="mord mathtt">i</span><span class="mord mathtt">n</span></span></span></span></span></span>模块</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/navigation.png" alt="navigation"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q4-p0-l0-fsm-1119-9">Q4 P0_L0_FSM(1119-9)</h3><div class="tabs" id="t4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t4-1">题目要求</button><button type="button" class="tab " data-href="t4-2">思路</button><button type="button" class="tab " data-href="t4-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t4-1"><p>使用Logisim搭建一个Mealy型有限状态机 检测串行输入字符串中的能匹配正则表达式<code>b{1,2}[ac]{2}</code>的子串并输出。具体模块端口定义如下：</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">In[1:0]</td><td style="text-align:center">I</td><td>串行方式输入字符串<br>规定 00 表示 ‘a’，01 表示 ‘b’，10 表示 ‘c’，11 表示其他字符</td></tr><tr><td style="text-align:center">CLR</td><td style="text-align:center">I</td><td>清除置位信号</td></tr><tr><td style="text-align:center">Z</td><td style="text-align:center">O</td><td>输出是否检测到了与表达式匹配的子串<br>1：检测到了 0：未检测到</td></tr></tbody></table><ul><li>文件内模块名：fsm</li><li><strong>注意：每当匹配到一个子串时，需要输出一次1。例如对字符串bacbacac,模块应当在第1个c输入和第2个c输入时输出1,而在其他时刻保持输出为0。</strong></li><li><strong>注意：有限状态机的设计是<mark class="hl-label red">Mealy</mark> 型有限状态机。</strong></li><li>要求<strong>同步复位</strong></li></ul></div><div class="tab-item-content" id="t4-2"><ul><li>定义4个状态：</li></ul><table><thead><tr><th style="text-align:center">S0</th><th style="text-align:center">S1</th><th style="text-align:center">S2</th><th style="text-align:center">S3</th></tr></thead><tbody><tr><td style="text-align:center">检测到null</td><td style="text-align:center">检测到b</td><td style="text-align:center">检测到bb</td><td style="text-align:center">检测到b{1,2}[ac]</td></tr></tbody></table><ul><li>转移图为：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/fsm_fsm.png" alt=""></p><ul><li>同步复位方法：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/%E5%90%8C%E6%AD%A5%E5%A4%8D%E4%BD%8D.png" alt="同步复位"></p></div><div class="tab-item-content" id="t4-3"><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/fsm.png" alt="fsm"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="附加题q1-p0-l1-ftoi-1119-319">附加题Q1 P0_L1_ftoi(1119-319)</h3><div class="tabs" id="t5"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t5-1">题目要求</button><button type="button" class="tab " data-href="t5-2">思路</button><button type="button" class="tab " data-href="t5-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t5-1"><p>使用Logisim进行组合逻辑设计，要求输入一个16位的单精度浮点数（符合IEEE-754标准），输出该浮点数的整数部分(包含符号)，用32位二进制符号数表示。<br>IEEE-754 标准中一个半精度16位浮点数的表示方法:</p><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mrow><mi>f</mi><mi>l</mi><mi>o</mi><mi>a</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>S</mi></msup><mo>×</mo><mi>M</mi><mo>×</mo><msup><mn>2</mn><mi>E</mi></msup></mrow><annotation encoding="application/x-tex">V_{float} = (-1)^S \times M \times 2^E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10764em;">f</span><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1413309999999999em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8913309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span></span></span></span></span></p><p>利用这种浮点数表示方法进行编码后的值可以分为4类，如下图所示<br><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/319-1.png" alt=""></p><ul><li>S代表最高位符号位，由sign[15]位编码，规定S=sign</li><li>E代表指数，由图中exponent[14:10]域编码，规定补码<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>−</mo><mn>0111</mn><msub><mn>1</mn><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E = exponent - 01111_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80952em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>M代表小数点后的二进制小数位，由图中frac[9:0]域编码，Normalized的情况M永远有一位前导1，因此不占位，相当于1 + frac；而Denormalized的情况frac前面是0，M默认就是frac，即规定</li></ul><p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mo>+</mo><mi>f</mi><mi>r</mi><mi>a</mi><mi>c</mi><mo separator="true">,</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo mathvariant="normal">≠</mo><mn>0</mn><mo stretchy="false">(</mo><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>c</mi><mo separator="true">,</mo><mi>e</mi><mi>x</mi><mi>p</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>n</mi><mi>t</mi><mo>=</mo><mn>0</mn><mo stretchy="false">(</mo><mi>D</mi><mi>e</mi><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">M = \begin{cases}1 + frac, exponent \ne 0(Normalized) \\ frac, exponent = 0(Denormalized)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/image.png" alt=""></p><p>模块端口定义如下：</p><table><thead><tr><th style="text-align:center">信号名</th><th style="text-align:center">方向</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">float[15:0]</td><td style="text-align:center">I</td><td>16位半精度浮点数（IEEE-754标准）</td></tr><tr><td style="text-align:center">int[31:0]</td><td style="text-align:center">O</td><td>该浮点数的整数部分（带符号），用32位符号数的补码来表示，超出表示范围则取低32位。<strong>第3类Infinity和第4类NaN为了简化直接输出0即可</strong></td></tr></tbody></table><ul><li>文件内模块名: <strong>ftoi</strong></li></ul></div><div class="tab-item-content" id="t5-2"><ul><li>由题意，只需计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>l</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Normalized</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">i</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mord mathdefault">e</span><span class="mord mathdefault">d</span></span></span></span>型的整数部分</li><li>先取出<code>sign</code>和<code>exponent</code>进行判断，然后根据<code>exponent</code>是否小于<code>0x0f</code>继续分类（可使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">N</mi><mi mathvariant="bold">e</mi><mi mathvariant="bold">g</mi><mi mathvariant="bold">a</mi><mi mathvariant="bold">t</mi><mi mathvariant="bold">o</mi><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\bf{Negator}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8805499999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">N</span><span class="mord mathbf">e</span><span class="mord mathbf" style="margin-right:0.01597em;">g</span><span class="mord mathbf">a</span><span class="mord mathbf">t</span><span class="mord mathbf">o</span><span class="mord mathbf">r</span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">M</mi><mi mathvariant="bold">U</mi><mi mathvariant="bold">X</mi></mrow><annotation encoding="application/x-tex">\bf{MUX}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68611em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">M</span><span class="mord mathbf">U</span><span class="mord mathbf">X</span></span></span></span></span></span>进行处理）</li><li>根据不同的情况对<code>fraction</code>进行移位即可</li></ul></div><div class="tab-item-content" id="t5-3"><p><del>建得有点乱</del></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/ftoi.png" alt="ftoi"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="课上考试">课上考试</h2><h3 id="q1-p0-l2-nonexist-2023-1120-1149">Q1 P0_L2_nonexist_2023(1120-1149)</h3><div class="tabs" id="t6"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t6-1">题目要求</button><button type="button" class="tab " data-href="t6-2">思路</button><button type="button" class="tab " data-href="t6-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t6-1"><p>使用 Logisim 搭建一个组合电路。给定输入的 5 个任意无符号二进制数。确定输入中未出现的最小正整数是多少。</p><p>模块端口定义如下：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">功能</th><th style="text-align:center">位宽</th><th style="text-align:center">方向</th></tr></thead><tbody><tr><td style="text-align:center">input1</td><td style="text-align:center">数据输入</td><td style="text-align:center">8</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">input2</td><td style="text-align:center">数据输入</td><td style="text-align:center">8</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">input3</td><td style="text-align:center">数据输入</td><td style="text-align:center">8</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">input4</td><td style="text-align:center">数据输入</td><td style="text-align:center">8</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">input5</td><td style="text-align:center">数据输入</td><td style="text-align:center">8</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">输出</td><td style="text-align:center">结果</td><td style="text-align:center">8</td><td style="text-align:center">O</td></tr></tbody></table></div><div class="tab-item-content" id="t6-2"><ul><li>显然，本题的答案是<strong>1-6中未出现的最小正整数</strong></li><li>于是可以用独热码的方式记录这六个数有哪些出现过，再用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">B</mi><mi mathvariant="bold">i</mi><mi mathvariant="bold">t</mi><mi mathvariant="bold">F</mi><mi mathvariant="bold">i</mi><mi mathvariant="bold">n</mi><mi mathvariant="bold">d</mi><mi mathvariant="bold">e</mi><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\bf{Bit Finder}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">B</span><span class="mord mathbf">i</span><span class="mord mathbf">t</span><span class="mord mathbf">F</span><span class="mord mathbf">i</span><span class="mord mathbf">n</span><span class="mord mathbf">d</span><span class="mord mathbf">e</span><span class="mord mathbf">r</span></span></span></span></span></span>找出<strong>最低位0</strong>即可</li><li>最后记得调整<code>appearance</code>（</li></ul></div><div class="tab-item-content" id="t6-3"><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/non.png" alt="main"></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/non_one_hot.png" alt="one_hot"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q2-p0-l3-walker-2023-1120-1158">Q2 P0_L3_walker_2023(1120-1158)</h3><div class="tabs" id="t7"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="t7-1">题目要求</button><button type="button" class="tab " data-href="t7-2">思路</button><button type="button" class="tab " data-href="t7-3">实现</button></ul><div class="tab-contents"><div class="tab-item-content active" id="t7-1"><p>设计Mealy型状态机模拟在回型建筑中移动的学生。</p><p>某校有一栋回字型的建筑，可以分为八个单元，由右上角起顺时针编号为 1 至 8，结成一个环。现一名学生从编号 1（东北角）的单元开始移动。</p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/graph.svg" alt=""></p><ul><li>当学生恰好移动向相邻单元方向时，学生进入该相邻单元，输出其编号。</li><li>当学生的移动方向上没有单元，这次不移动，直接输出当前所在单元格编号。</li></ul><p>输入输出如下：</p><ul><li>输入<code>00</code>时，学生试图向上（北）移动。</li><li>输入<code>01</code>时，学生试图向下（南）移动。</li><li>输入<code>10</code>时，学生试图向左（西）移动。</li><li>输入<code>11</code>时，学生试图向右（东）移动。</li><li>输出学生试图移动到的建筑单元。</li></ul><p>模块端口定义如下：</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">功能</th><th style="text-align:center">位宽</th><th style="text-align:center">方向</th></tr></thead><tbody><tr><td style="text-align:center">input</td><td style="text-align:center">方向输入</td><td style="text-align:center">2</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">reset</td><td style="text-align:center">异步复位信号</td><td style="text-align:center">1</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">clk</td><td style="text-align:center">时钟信号</td><td style="text-align:center">1</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">output</td><td style="text-align:center">结果</td><td style="text-align:center">4</td><td style="text-align:center">O</td></tr></tbody></table></div><div class="tab-item-content" id="t7-2"><ul><li>可以用0-7来表示8个房间，这样只需用3位就可以存下状态，最后再加1即可</li><li>同时由于本体状态只会进行<code>-1</code>和<code>+1</code>两种变化，故可以用<code>S0</code>,<code>S1</code>,<code>S2</code>分别表示不动、进一步、退一步，这样又减去一位状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/walk.png" alt=""></p></div><div class="tab-item-content" id="t7-3"><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/walk_main.png" alt="main"></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/walk_next.png" alt="next_state_logic"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h3 id="q3-p0-l5-hexcode-2023">Q3 P0_L5_hexcode_2023</h3><h4 id="题意">题意</h4><p>使用 Logisim 搭建一个 Moore 状态机。该状态机每周期输入四位二进制数，作为一位十六进制输入。当此前三个周期的输入恰好为三个特定序列之一时，输出对应序列编号。</p><ul><li>对于输入与下列三者均不一致的情况，输出<code>0</code></li><li>对于输入依次为<code>EEE</code>的情况，输出<code>1</code></li><li>对于输入依次为<code>A0E</code>的情况，输出<code>2</code></li><li>对于输入依次为<code>0A0</code>的情况，输出<code>3</code></li></ul><p>模块端口定义如下：</p><table><thead><tr><th style="text-align:center">名称</th><th>功能</th><th style="text-align:center">位宽</th><th style="text-align:center">方向</th></tr></thead><tbody><tr><td style="text-align:center">input</td><td>十六进制输入</td><td style="text-align:center">4</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">reset</td><td>异步复位信号</td><td style="text-align:center">1</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">clk</td><td>时钟信号</td><td style="text-align:center">1</td><td style="text-align:center">I</td></tr><tr><td style="text-align:center">output</td><td>识别结果</td><td style="text-align:center">2</td><td style="text-align:center">O</td></tr></tbody></table><h4 id="题解">题解</h4><div class="note success simple"><p>法一：<br>用一个10个状态的自动机来描述字符之间的转换关系</p><p><del>组合逻辑分析点错直接rmk</del></p></div><div class="note success simple"><p>法二：</p><ul><li>可以用三个串联的寄存器，依次将三个周期的输出的存下来（类比移位寄存器）</li><li>然后判断答案就十分简单了，可以组合逻辑也可以直接用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="bold">c</mi><mi mathvariant="bold">o</mi><mi mathvariant="bold">m</mi><mi mathvariant="bold">p</mi><mi mathvariant="bold">a</mi><mi mathvariant="bold">r</mi><mi mathvariant="bold">a</mi><mi mathvariant="bold">t</mi><mi mathvariant="bold">o</mi><mi mathvariant="bold">r</mi></mrow><annotation encoding="application/x-tex">\bf{comparator}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8293600000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">c</span><span class="mord mathbf">o</span><span class="mord mathbf">m</span><span class="mord mathbf">p</span><span class="mord mathbf">a</span><span class="mord mathbf">r</span><span class="mord mathbf">a</span><span class="mord mathbf">t</span><span class="mord mathbf">o</span><span class="mord mathbf">r</span></span></span></span></span></span></li><li>需要注意的是，寄存器初始值为0，所以为了避免误判<code>0A0</code>的情况，可以这样设计：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/98fbda373adc1cb1883ddfca8bcf55b.png" alt=""></p></div><h2 id="总结">总结</h2><p>考试之前不知道有<code>Analyze Circuit</code>这个功能，考场上直接手搓与或门，结果第二题我那个做法一直没查出来错，最后卡点搓了个这个东西出来极限通过<img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/emoji-6.png" style="height:1.5em"/></p><p><img src="https://cdn.jsdelivr.net/gh/EinNiemand28/my-img@master/images/walk2.png" alt="😅"></p>]]></content>
      
      
      <categories>
          
          <category> BUAA计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CO </tag>
            
            <tag> logisim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录</title>
      <link href="/27d394ca.html"/>
      <url>/27d394ca.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fcdb6ff90382f64a70a8aa7a714e0c87af4dfec4e4a21392f6d9f8fd3c6bd5a6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Hey, password is required here.">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/4a17b156.html"/>
      <url>/4a17b156.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cd1c11f6a838d77d2b4d8ce2667856d65ae3c3e67131bc971a35b01780a40bde"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Hey, password is required here.">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Butterfly </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
